package com.bpms.listener.loan;

import java.util.List;
import java.util.Set;

import org.activiti.engine.HistoryService;
import org.activiti.engine.delegate.DelegateTask;
import org.activiti.engine.task.IdentityLink;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;

import com.bpms.model.LoanOrder;
import com.bpms.model.Role;
import com.bpms.model.Users;
import com.bpms.service.LoanOrderHisService;
import com.bpms.service.LoanOrderService;
import com.bpms.service.LoanOrderWorkFlowService;
import com.bpms.service.RoleService;
import com.bpms.service.UserService;
import com.bpms.util.Collections;
import com.bpms.util.Constants;
import com.bpms.util.SendMessageUtil;

/**
 * 贷款业务的基类监听器
 * 
 * @author liuhh
 *
 */
public abstract class BaseLoanTaskListener {

	// 贷款订单的业务操作方法
	protected LoanOrderService loanOrderService;
	
	// 获取订单的信息的service
	protected LoanOrderHisService loanOrderHisService;

	// 上下文
	protected WebApplicationContext webContext;

	// 用户的UserService
	protected UserService userService;

	// 角色的service
	protected RoleService roleService;

	// activiti历史任务查看服务
	protected HistoryService historyService;

	// 贷款业务的工作流的业务操作
	protected LoanOrderWorkFlowService loanOrderWorkFlowService;

	// 初始化
	{
		webContext = ContextLoader.getCurrentWebApplicationContext();
		userService = (UserService) webContext.getBean("userService");
		roleService = (RoleService) webContext.getBean("roleService");
		loanOrderService = (LoanOrderService) webContext.getBean("loanOrderService");
		loanOrderHisService = (LoanOrderHisService) webContext.getBean("loanOrderHisService");
		loanOrderWorkFlowService = (LoanOrderWorkFlowService) webContext.getBean("loanOrderWorkFlowService");
		historyService = (HistoryService) webContext.getBean("historyService");
	}

	// 参与该活动的活动节点角色组
	protected abstract String getRoleCode();

	// 获取该活动节点参与的组织机构信息
	protected abstract String[] getOrganizationIds();

	// 根据当前的活动节点获取申请订单的信息
	protected LoanOrder getLoanOrderByTaskId(DelegateTask task) {
		// 获取流程业务businessKey
		String processBusinessKey = (String)task.getVariables().get(Constants.PROCESS_BUSINESS_KEY);
		if (StringUtils.isNotBlank(processBusinessKey)) {
			// 截取字符串，取BusinessKey小数点的第2个值
			String id = processBusinessKey.split("\\.")[1];
			return loanOrderService.findLoanOrderById(id);
			// 根据订单的id获取订单的信息
		}
		return null;
	}

	// 设置总部受理组
	protected void addCandidateGroupHQ(DelegateTask task) {
		String[] organizationIds = getOrganizationIds();
		if (null != organizationIds && organizationIds.length != 0) {
			for (String id : organizationIds) {
				task.addCandidateGroup(getRoleCode() + "." + id);
			}
		}
	}

	// 设置地方候选组
	protected void addCandidateGroupLocal(DelegateTask task) {
		LoanOrder order = getLoanOrderByTaskId(task);
		if (null != order) {
			task.addCandidateGroup(getRoleCode() + "." + order.getOrganizationId());
		}
	}

	// 设置当前任务的处理角色
	protected void setLocalVariableRole(DelegateTask task) {
		Role role = roleService.findRoleByCode(getRoleCode());
		task.createVariableLocal("role", role);
	}
	
	/**
	 * 向用户发送消息
	 * 
	 * @param users
	 *            用户的信息
	 */
	protected void sendMessageByCandidateGroup(DelegateTask task) {
		// 获取受理组信息
		Set<IdentityLink> candidates = task.getCandidates();
		// 循环获取用户的信息,并发送消息提醒
		if(null!=candidates && candidates.size()!=0){
			for (IdentityLink identity : candidates) {
				String groupId = identity.getGroupId();
				if(StringUtils.isNotBlank(groupId)){
					// 拆分"角色Code.组织机构ID" orgRole[0]为角色Code,orgRole[1]组织机构ID
					String[] orgRole = groupId.split("\\.");
					List<Users> users = userService.findUsersByRoleCodeAndOrganizationId(orgRole[0], Integer.parseInt(orgRole[1]));
					if(Collections.listIsNotEmpty(users)){
						for (Users user : users) {
							String userId = String.valueOf(user.getUserId());
							// 受理任务
							Long claimCount = loanOrderWorkFlowService.findAllClaimTaskCount(userId);
							// 签收任务
							Long unClaimCount = loanOrderWorkFlowService.findAllUnClaimTaskCount(userId) + 1;
							// 组织发送的消息
							String message = SendMessageUtil.getMessageData(
									SendMessageUtil.DATATYPE_UNCLAIMLOANORDER,
									SendMessageUtil.CALCULATETYPE_ADD,
									task.getId(),
									claimCount, 
									unClaimCount);
							// 发送消息
							SendMessageUtil.sendMessageByUserId(message, userId);
						}
					}
					
				}
			}
		}
	}

	/**
	 * 向用户发送消息
	 * 
	 * @param userId
	 *            制定的用户
	 */
	protected void sendMessageByAssignee(DelegateTask task) {
		// 受理任务个数
		Long claimCount = loanOrderWorkFlowService.findAllClaimTaskCount(task.getAssignee()) + 1;
		// 代办任务个数
		Long unClaimCount = loanOrderWorkFlowService.findAllUnClaimTaskCount(task.getAssignee());
		// 组织发送消息
		String message = SendMessageUtil.getMessageData(
				SendMessageUtil.DATATYPE_CLAIMLOANORDER,
				SendMessageUtil.CALCULATETYPE_ADD,
				task.getId(),
				claimCount,
				unClaimCount);
		// 发送消息
		SendMessageUtil.sendMessageByUserId(message,task.getAssignee());
	}

}