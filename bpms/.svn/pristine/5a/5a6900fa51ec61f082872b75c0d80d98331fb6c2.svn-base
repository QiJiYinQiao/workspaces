package com.bpms.service.impl;

import java.io.File;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URLEncoder;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.AccountInfo;
import com.bpms.model.CarInfo;
import com.bpms.model.FinalAuditReport;
import com.bpms.model.LoanContract;
import com.bpms.model.LoanCustRepaymentDetail;
import com.bpms.model.LoanOrder;
import com.bpms.model.LoanOrderHis;
import com.bpms.model.MicrocreditOpinion;
import com.bpms.model.Organization;
import com.bpms.model.Users;
import com.bpms.model.vo.LoanContractInfoModel;
import com.bpms.model.vo.LoanerJointModel;
import com.bpms.service.AccountInfoService;
import com.bpms.service.AddressService;
import com.bpms.service.CarInfoService;
import com.bpms.service.CommonService;
import com.bpms.service.FinalAuditReportService;
import com.bpms.service.LoanContractService;
import com.bpms.service.LoanCustRepaymentDetailService;
import com.bpms.service.LoanOrderHisService;
import com.bpms.service.LoanOrderService;
import com.bpms.service.LoanerJointService;
import com.bpms.service.MicrocreditOpinionService;
import com.bpms.service.OrganizationService;
import com.bpms.service.UserService;
import com.bpms.util.Collections;
import com.bpms.util.Constants;
import com.bpms.util.DateUtils;
import com.bpms.util.NumberFormatUtil;
import com.bpms.util.PageUtil;
import com.bpms.util.ReadExcel;

@Service("loanContractService")
public class LoanContractServiceImpl implements LoanContractService {

	@Autowired
	private BaseDAO<LoanContract> baseDAO;

	@Autowired
	private LoanerJointService loanerJointService;

	@Autowired
	private FinalAuditReportService finalAuditReportService;

	@Autowired
	private MicrocreditOpinionService microcreditOpinionService;

	@Autowired
	private CommonService commonService;

	@Autowired
	private AccountInfoService accountInfoService;

	@Autowired
	private AddressService addressService;

	@Autowired
	private OrganizationService organizationService;

	@Autowired
	private UserService userService;

	@Autowired
	private LoanOrderService loanOrderService;
	
	@Autowired
	private LoanOrderHisService loanOrderHisService;

	@Autowired
	private LoanCustRepaymentDetailService custRepaymentDetailService;

	@Autowired
	private CarInfoService carInfoService;

	@Override
	public boolean persistenceLoanContract(LoanContract loanContract) {
		if (StringUtils.isBlank(loanContract.getLcId())) {
			loanContract.setIsAheadRepayment("1");// 是否提前还款，取值范围：0－是，1－否，OA系统中特批申请流程审批通过后系统自动更新该值为0
			loanContract.setContractStatus("0");//0－初始状态，1－已签约，2－客户拒签，3－作废
			baseDAO.save(loanContract);
		} else {
			baseDAO.update(loanContract);
		}
		return true;
	}

	@Override
	public String findJinJianNo(String no) {
		String sql = "SELECT lc.CONTRACT_NO FROM t_bp_loan_contract lc WHERE lc.CONTRACT_NO LIKE '" + no + "%' ORDER BY lc.CONTRACT_NO DESC LIMIT 1 " ;
		List list = baseDAO.findBySQL(sql);
		if (list.size() > 0 && null != list.get(0)) {
			String jinjianNo = (String) list.get(0);
			return String.format("%08d", (Integer.parseInt(jinjianNo) + 1));
		} else {
			return "00000001";
		}
	}

	@Override
	public LoanContract findLoanContract(String id) {
		String hql = " FROM LoanContract lc WHERE lc.lcId = '" + id + "'";
		List<LoanContract> list = baseDAO.find(hql);
		if (list.size() > 0)
			return list.get(0);
		else
			return null;
	}

	@Override
	public LoanContract findLoanContractByLoanOrderId(final String loanOrderId) {
		String hql = "from LoanContract lc where lc.loanOrderId=:loanOrderId";
		List<LoanContract> list = baseDAO.find(hql,
				new HashMap<String, Object>() {
					{
						put("loanOrderId", loanOrderId);
					}
				});
		if (list.size() > 0)
			return list.get(0);
		else
			return null;
	}

	@Override
	public List<LoanContractInfoModel> findLoanConractInfoModelList(Map<String, Object> map, PageUtil pageUtil) {
		List<Object> list = this.baseDAO.findBySql(createContractInfoSql(map),	pageUtil);
		List<LoanContractInfoModel> contractInfoModes = new ArrayList<LoanContractInfoModel>();
		if (Collections.listIsNotEmpty(list)) {
			for (Object object : list) {
				Object[] o = (Object[]) object;
				LoanContractInfoModel infoModel = new LoanContractInfoModel();
				if (!StringUtils.isEmpty((String) o[0])) {
					Users user1 = userService.findUserById(Integer.parseInt((String) o[0]));
					infoModel.setLoanReviewRommitteeName1(user1.getName());
				}
				if (!StringUtils.isEmpty((String) o[1])) {
					Users user2 = userService.findUserById(Integer.parseInt((String) o[1]));
					infoModel.setLoanReviewRommitteeName2(user2.getName());
				}
				if (!StringUtils.isEmpty((String) o[2])) {
					Users user3 = userService.findUserById(Integer.parseInt((String) o[2]));
					infoModel.setLoanReviewRommitteeName3(user3.getName());
				}
				infoModel.setContractNo((String) o[3]);
				infoModel.setLoanerActName((String) o[4]);
				infoModel.setLoanerActNum((String) o[5]);
				infoModel.setLoanerBankName((String) o[6]);
				infoModel.setContractSignDate((Date) o[7]);
				infoModel.setContractSignSite((String) o[8]);
				infoModel.setLoanBgDate((Date) o[9]);
				infoModel.setLoanEdDate((Date) o[10]);
				infoModel.setMonthlyRepayment(String.valueOf(o[11]));
				infoModel.setLoanPeriod((Integer) o[12]);
				infoModel.setRemark((String) o[13]);
				infoModel.setLoanName((String) o[14]);
				infoModel.setLoanIdNo((String) o[15]);
				infoModel.setLoanCurAddr((String) o[16]);
				infoModel.setLoanMobileTel((String) o[17]);
				infoModel.setLoanEdu(String.valueOf(o[18]));
				infoModel.setLoanInterest(String.valueOf(o[19]));
				infoModel.setLoanOrderId((String) o[20]);

				infoModel.setLoanType((String) o[21]);
				infoModel.setLoanTypeName(commonService.findDictName("loan_type", o[21] + ""));

				infoModel.setSalesMan((String) o[22]);

				Organization organ = this.findLoanCityByOrganizationId((Integer) o[23]);
				infoModel.setOrganizationId(organ.getFullName());

				infoModel.setLoanHukouAddrId((String) o[24]);
				infoModel.setLoanHukouAddr(addressService.addressName((String) o[24]));

				if (!StringUtils.isEmpty((String) o[25])) {
					Users user4 = userService.findUserById(Integer.parseInt((String) o[25]));
					infoModel.setOperatorAName(user4.getName());
				}
				if (!StringUtils.isEmpty((String) o[26])) {
					Users user5 = userService.findUserById(Integer.parseInt((String) o[26]));
					infoModel.setOperatorBName(user5.getName());
				}

				infoModel.setVisitFee(String.valueOf(o[27]));
				infoModel.setMonthlyFee();
				infoModel.setBelongTo((String) o[28]);
				infoModel.setLoanCity((String) o[29]);
				if(StringUtils.isNotBlank(infoModel.getBelongTo())&&infoModel.getBelongTo().equals("IPC")){
					List<LoanOrderHis> loanOrderHisList = loanOrderHisService.findLoanOrderHis(infoModel.getLoanOrderId());
					if(Collections.listIsNotEmpty(loanOrderHisList)){
					infoModel.setLoanReviewRommittee1(loanOrderHisList.get(0).getAssignee());
					infoModel.setLoanReviewRommittee2(loanOrderHisList.get(1).getAssignee());
					infoModel.setLoanReviewRommittee3(loanOrderHisList.get(2).getAssignee());
					infoModel.setLoanReviewRommitteeName1(userService.findUserById(Integer.valueOf(loanOrderHisList.get(0).getAssignee())).getName());
					infoModel.setLoanReviewRommitteeName2(userService.findUserById(Integer.valueOf(loanOrderHisList.get(1).getAssignee())).getName());
					infoModel.setLoanReviewRommitteeName3(userService.findUserById(Integer.valueOf(loanOrderHisList.get(2).getAssignee())).getName());
					}
				}
				contractInfoModes.add(infoModel);
			}
		}
		return contractInfoModes;
	}

	@Override
	public Long getCountOfConractInfoModel(Map<String, Object> map) {
		return baseDAO.countBySql("SELECT COUNT(1) FROM ( "
				+ createContractInfoSql(map) + " ) AS fo");
	}

	@Override
	public boolean saveLoanContract(LoanContract loanContract) throws Exception {
		// 设置合同信息
		packLoanContractEntity(loanContract);
		// 保存贷款申请合同信息
		return persistenceLoanContract(loanContract);
	}

	private void packLoanContractEntity(LoanContract loanContract) throws Exception {
		// 获取贷款申请订单
		LoanOrder loanOrder = loanOrderService.findLoanOrderById(loanContract.getLoanOrderId());
		
		if(null != loanOrder){
			// 判断是否含有合同编号,如果没有合同编号信息,生成合同编号
			if (StringUtils.isBlank(loanContract.getLcId())) {
				String contractNo = createContractNo(loanOrder);
				if(null==contractNo){
					throw new Exception("合同信息编号生成错误.");
				}else{
					loanContract.setContractNo(contractNo);
				}
			}
			// 设置贷款人信息
			loanContract.setLoaner(loanOrder.getName());
			loanContract.setLoanerIdno(loanOrder.getIdNo());
			
			// 通讯地址
			loanContract.setLoanerPostalAddr(addressService.addressName(loanOrder.getCurAddr()));
			loanContract.setLoanerTel(loanOrder.getMobileTel());
			loanContract.setLoanerSignDate(new Date());
			
			
			// 设置出借人
			loanContract.setLender(Constants.LENDER);
			loanContract.setLenderIdno(Constants.LENDER_IDNO);
			loanContract.setObliMatchStatus("0");
			loanContract.setPurpose(loanOrder.getPurpose());
			
			// 贷款开始日期
			loanContract.setLoanBgDate(new Date());
			
			// 获取贷款客户的住银行卡
			List<AccountInfo> accountList = accountInfoService.findListByLoanerId(loanOrder.getLoanerId());
			if (null != accountList && accountList.size() > 0) {
				AccountInfo account = accountList.get(0);
				loanContract.setLoanerBankName(account.getBankName());
				loanContract.setLoanerActName(account.getAccountName());
				loanContract.setLoanerActNum(account.getAccountNum());
			}
			
			// 设置共同贷款人
			LoanerJointModel loanerJoint = loanerJointService.findLoanerJointByOrderId(loanOrder.getLoanOrderId());
			if (null != loanerJoint) {
				loanContract.setLoanerJoint(loanerJoint.getName());
				loanContract.setLjIdno(loanerJoint.getIdNo());
				String ljPostalAddr = addressService.addressName(loanerJoint
						.getCurAddr());
				loanContract.setLjPostalAddr(ljPostalAddr);
				loanContract.setLjTel(loanerJoint.getMobileTel());
			}
			
			// 计算合同金额
			LoanContract calculateContract = calculateContract(loanOrder.getLoanOrderId());
			// 设置贷款期限
			loanContract.setLoanPeriods(calculateContract.getLoanPeriods());
			// 设置月利率
			loanContract.setMonthlyRate(calculateContract.getMonthlyRate());
			// 设置贷款额
			loanContract.setLoanEdu(calculateContract.getLoanEdu());
			// 设置贷款利息 贷款利息=贷款利率*贷款金额*贷款期限
			loanContract.setLoanInterest(calculateContract.getLoanInterest());
			// 设置月还款额
			loanContract.setMonthlyRepayment(calculateContract.getMonthlyRepayment());
			// 设置实放金额
			loanContract.setActualLoanAmount(calculateContract.getActualLoanAmount());
		}
	}
	
	
	@Override
	public LoanContract calculateContract(String loanOrderId) {
		// 返回计算完的合同信息
		LoanContract loanContract = new LoanContract();
		// 获取贷款申请订单
		LoanOrder loanOrder = loanOrderService.findLoanOrderById(loanOrderId);

		// 贷款期限
		BigDecimal loanPeriods = new BigDecimal("0.00");
		// 贷款利率
		BigDecimal loanReate = new  BigDecimal("0.00");
		// 贷款月服务费率
		BigDecimal monthServiceFeeRate =  new BigDecimal("0.00");
		// 贷款额度
		BigDecimal loanEdu = new BigDecimal("0.00");
		// 贷款信访费用
		BigDecimal visitFee = new BigDecimal("0.00");

		// 获取终审报告
		FinalAuditReport finalAuditReport = finalAuditReportService.findFinalAuditReportByLoanOrderId(loanOrder.getLoanOrderId());
		// 如果终审报告存在,则说明走的是终审资质分析的分支
		if (null != finalAuditReport) {
			loanEdu = finalAuditReport.getContractLoanAmount();
			loanPeriods = new BigDecimal(commonService.findDictName("loan_period_type", finalAuditReport.getLoanPeriodType()));
			loanReate = new BigDecimal(finalAuditReport.getLoanInterestRate());
			String monthServiceFeeRateStr = commonService.findDictName("month_service_fee_rate", finalAuditReport.getMonthServiceFeeRate());
			monthServiceFeeRate  = new BigDecimal(monthServiceFeeRateStr.replaceAll("%", "")).divide(new BigDecimal("100.0"),2,RoundingMode.HALF_UP);
			visitFee = finalAuditReport.getVisitFee();
		} else {
			// 如果不存在终审报告,则说明走的是微贷呈报意见表的分支
			// 获取呈报意见表信息
			MicrocreditOpinion microcreditOpinion = microcreditOpinionService.findMicrocreditOpinionByOid(loanOrder.getLoanOrderId());
			loanEdu= microcreditOpinion.getFinalLoanAmt();
			loanPeriods = new BigDecimal(commonService.findDictName("loan_period_type",	microcreditOpinion.getFinalLoanPeriod()));
			loanReate = microcreditOpinion.getLoanRate();
			monthServiceFeeRate  = microcreditOpinion.getCounselingRate();
			visitFee = microcreditOpinion.getVisitFee();
		}
		// 设置贷款期限
		loanContract.setLoanPeriods(loanPeriods.intValue());
		// 设置月利率
		loanContract.setMonthlyRate(loanReate);
		// 设置贷款额
		loanContract.setLoanEdu(loanEdu);
		// 设置贷款利息 贷款利息=贷款利率*贷款金额*贷款期限
		loanContract.setLoanInterest(loanReate.multiply(loanEdu).multiply(loanPeriods));
		// 计算月还款额 月还款额=贷款额/贷款期限+贷款额*贷款利率
		BigDecimal monthlyRepayment = loanEdu
				.divide(loanPeriods,2,RoundingMode.HALF_UP)
				.add(loanEdu.multiply(loanReate))
				.setScale(2, RoundingMode.HALF_UP);
		// 设置月还款额
		loanContract.setMonthlyRepayment(monthlyRepayment);
		// 计算实放金额 实放金额 = 合同金额- ((合同金额*月服务汇率*期限)+信访费用)
		BigDecimal  actualLoanAmount =  loanEdu.subtract(loanEdu.multiply(monthServiceFeeRate).multiply(loanPeriods).add(visitFee)).setScale(2, RoundingMode.HALF_UP);
		// 设置实放金额
		loanContract.setActualLoanAmount(actualLoanAmount);
		
		return loanContract;
	}

	@Override
	public boolean saveCompleteContract(LoanContract loanContract) {
		LoanContract loanCract = this.findLoanContract(loanContract.getLcId());

		loanCract.setContractSignSite(loanContract.getContractSignSite());
		loanCract.setContractSignDate(loanContract.getContractSignDate());
		if (loanCract.getContractSignDate() != null) {
			Calendar calendar = GregorianCalendar.getInstance();
			calendar.setTime(loanCract.getContractSignDate());
			if (calendar.get(Calendar.DATE) >= 15) {
				loanCract.setMonthlyRepaymentDate(15);
			} else {
				loanCract.setMonthlyRepaymentDate(30);
			}
		}
		loanCract.setLjSignDate(loanContract.getLjSignDate());
		loanCract.setAgent(loanContract.getAgent());
		loanCract.setAgentIdno(loanContract.getAgentIdno());
		loanCract.setAgentSignDate(loanContract.getAgentSignDate());
		loanCract.setLoanEdDate(loanContract.getLoanEdDate());
		loanCract.setRepaymentBgDate(loanContract.getRepaymentBgDate());
		loanCract.setRepaymentEdDate(loanContract.getRepaymentEdDate());
		loanCract.setRemark(loanContract.getRemark());
		loanCract.setContractStatus("1");
		boolean result = this.persistenceLoanContract(loanCract);
		// 先删除原先的贷款还款明细
		custRepaymentDetailService.deleteRepaymentDetailByCNO(loanContract.getContractNo());
		// 再重新分割贷款还款明细
		saveLoanCusRepaymentDetail(loanCract);
		return result;
	}

	/**
	 * 拆分客户还款明细，并保存客户还款明细
	 */
	private void saveLoanCusRepaymentDetail(LoanContract contract) {
		LoanOrder loanOrder = loanOrderService.findLoanOrderById(contract
				.getLoanOrderId());
		for (int i = 1; i <= contract.getLoanPeriods(); i++) {
			LoanCustRepaymentDetail custRepaymentDetail = new LoanCustRepaymentDetail();
			custRepaymentDetail.setContractNo(contract.getContractNo());
			custRepaymentDetail.setPeriods(i);

			// 计算还款日期
			if (contract.getContractSignDate() != null) {
				Calendar calendar = GregorianCalendar.getInstance();
				calendar.setTime(contract.getContractSignDate());
				if (calendar.get(Calendar.DATE) >= 15) {
					custRepaymentDetail.setPlanRepmtDate(DateUtils
							.getNextMonth15Day(DateUtils.addMonth(
									contract.getLoanBgDate(), i - 1)));
				} else {
					custRepaymentDetail.setPlanRepmtDate(DateUtils
							.get30Day(DateUtils.addMonth(
									contract.getLoanBgDate(), i - 1)));
				}
			}
			custRepaymentDetail.setPlanRepmtAmt(contract.getMonthlyRepayment());
			custRepaymentDetail.setRpmtStatus("0");
			custRepaymentDetail.setOperator(loanOrder.getSalesMan());
			custRepaymentDetail.setOverdueDays(0);
			custRepaymentDetail.setRealRepmtAmt(new BigDecimal("0"));
			custRepaymentDetail.setLateFee(new BigDecimal("0"));
			custRepaymentDetail.setDefaultInterest(new BigDecimal("0"));
			custRepaymentDetail.setFreeInterestFee(new BigDecimal("0"));
			custRepaymentDetailService.persistenceLoanCustRepaymentDetail(custRepaymentDetail);
		}
	}

	// 生成合同编号
	public String createContractNo(LoanOrder loanOrder) {
		String contractNoParent = "QQJR-LO-{0}-{1}-{2}";
		String contractNo = contractNoParent+ "-{3}";
		//QQJR-LO-BJ-BJ-00-2015121511191400000001
		String province = Constants.EMPTY;
		String city = Constants.EMPTY;
		String deptNo = Constants.EMPTY;
		String jinjianNo = Constants.EMPTY;
		Users user = userService.findUserById(loanOrder.getCreator());
		Organization organization = user.getOrganization();
		// 如果用户不存在所属组织机构,进行返回null
		if(null==organization){
			return null;
		}
		// 判断组织机构是否为空
		if(null!=organization.getDetpNo()){
			if(organization.getDetpNo()!=0){
				if(organization.getDetpNo()<10){
					deptNo = "0"+organization.getDetpNo();
				}else{
					deptNo = ""+organization.getDetpNo();
				}
			}else{
				deptNo = "01";
			}
		}else{
			deptNo = "01";
		}
		
		// 获取组织机构的城市
		Organization cityOrganization = findLoanCityByOrganizationId(organization.getOrganizationId());
		// 获取组织机构的城市所在区
		if(null!= cityOrganization){
			// 如果是直辖市的时候
			if(cityOrganization.getRegionType().equals("1")){
				province = cityOrganization.getAreaShortName();
				city = cityOrganization.getAreaShortName();
			}else{// 普通城市
				Organization provinceOrganization = organizationService.findOrganizationById(cityOrganization.getPid());
				if(null!=provinceOrganization){
					province = provinceOrganization.getAreaShortName();
				}
				city = cityOrganization.getAreaShortName();
			}
		}else{
			return null;
		}
		jinjianNo = this.findJinJianNo(MessageFormat.format(contractNoParent, province,city,deptNo));
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		return MessageFormat.format(contractNo, province,city,deptNo,sdf.format(new Date())+jinjianNo);
	}

	@Override
	public void exprotLoanConractInfoModel(Map<String, Object> map)
			throws Exception {
		List<LoanContractInfoModel> modelList = this
				.findLoanConractInfoModelList(map, new PageUtil(0, 0));
		String srcXlsxPath = ServletActionContext
				.getServletContext()
				.getRealPath(File.separator + "excel" + File.separator + "loan")
				+ File.separator + "信贷合同明细模板.xlsx";// 模板路径
		Workbook workbook = ReadExcel.openExcleFile(srcXlsxPath);// 获取工作簿
		if (Collections.listIsNotEmpty(modelList)) {
			Sheet sheet = workbook.getSheetAt(0);// 获取页签
			for (int i = 0; i < modelList.size(); i++) {
				// 第一行不用copy
				if (i > 0) {
					ReadExcel.copyRows(sheet, 5, 5, 4 + i);
				}
				LoanContractInfoModel info = modelList.get(i);
				Row row = sheet.getRow(4 + i);
				row.getCell(0).setCellValue(i + 1);
				row.getCell(1).setCellValue(info.getLoanCity());
				row.getCell(2).setCellValue(info.getContractNo());
				row.getCell(3).setCellValue(info.getContractSignDate());
				row.getCell(4).setCellValue(info.getLoanerActName());
				row.getCell(5).setCellValue(info.getLoanerBankName());
				row.getCell(6).setCellValue(info.getLoanerActNum());
				row.getCell(7).setCellValue(info.getLoanName());
				row.getCell(8).setCellValue(info.getLoanIdNo());
				row.getCell(9).setCellValue(info.getLoanHukouAddr());
				row.getCell(10).setCellValue(info.getLoanCurAddr());
				row.getCell(11).setCellValue(info.getLoanMobileTel());
				row.getCell(12).setCellValue(info.getLoanTypeName());
				row.getCell(13).setCellValue(info.getOrganizationId());
				row.getCell(14).setCellValue(
						NumberFormatUtil.formatNumber(2, info.getLoanEdu())
								.doubleValue());
				row.getCell(15).setCellValue(info.getLoanPeriod());
				row.getCell(16).setCellValue(
						NumberFormatUtil.formatNumber(2, info.getMonthlyFee())
								.doubleValue());
				row.getCell(17).setCellValue(
						NumberFormatUtil.formatNumber(2, info.getVisitFee())
								.doubleValue());
				row.getCell(18).setCellValue(
						NumberFormatUtil.formatNumber(2, info.getLoanEdu())
								.doubleValue());
				row.getCell(19).setCellValue(
						NumberFormatUtil.formatNumber(2,
								info.getMonthlyRepayment()).doubleValue());
				row.getCell(20).setCellValue(info.getMonthlyRepaymentDate());
				row.getCell(21).setCellValue(info.getRepaymentBgDate());
				row.getCell(22).setCellValue(info.getRepaymentEndDate());
				row.getCell(23).setCellValue(info.getDrawPlatform());
				row.getCell(24).setCellValue(info.getDrawDate());
				row.getCell(25).setCellValue(info.getOperatorAName());
				row.getCell(26).setCellValue(info.getOperatorBName());
				row.getCell(27)
						.setCellValue(info.getLoanReviewRommitteeName1());
				row.getCell(28)
						.setCellValue(info.getLoanReviewRommitteeName2());
				row.getCell(29)
						.setCellValue(info.getLoanReviewRommitteeName3());
				row.getCell(30).setCellValue(info.getSalesMan());
				row.getCell(31).setCellValue(info.getTeamManger());
				row.getCell(32).setCellValue(info.getRemark());
			}
		}

		HttpServletResponse response = ServletActionContext.getResponse();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());
		response.setHeader(
				"Content-disposition",
				"attachment;filename="
						+ URLEncoder.encode(
								"信贷合同明细-" + calendar.get(Calendar.YEAR) + "-"
										+ calendar.get(Calendar.MONTH) + "-"
										+ calendar.get(Calendar.DATE) + ".xlsx",
								"utf-8"));
		OutputStream ouputStream = response.getOutputStream();
		workbook.write(ouputStream);
		ouputStream.flush();
		ouputStream.close();
	}

	private Organization findLoanCityByOrganizationId(Integer id) {
		Organization organization = organizationService.findOrganizationById(id);
		if (null == organization)
			return null;
		if ("1".equals(organization.getRegionType())
				|| "3".equals(organization.getRegionType())) {
			return organization;
		}
		return findLoanCityByOrganizationId(organization.getPid());
	}

	// 创建合同信息SQL
	private String createContractInfoSql(Map<String, Object> map) {
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT");
		sql.append("	'' AS daishenwei1");
		sql.append("	,'' AS daishenwei2");
		sql.append("	,'' AS daishenwei3");
		sql.append("	,lc.CONTRACT_NO");
		sql.append("	,lc.LOANER_ACT_NAME");
		sql.append("	,lc.LOANER_ACT_NUM");
		sql.append("	,lc.LOANER_BANK_NAME");
		sql.append("	,lc.CONTRACT_SIGN_DATE");
		sql.append("	,lc.CONTRACT_SIGN_SITE");
		sql.append("	,lc.LOAN_BG_DATE");
		sql.append("	,lc.LOAN_ED_DATE");
		sql.append("	,lc.MONTHLY_REPAYMENT");
		sql.append("	,lc.LOAN_PERIODS");
		sql.append("	,lc.REMARK");
		sql.append("	,lc.LOANER");
		sql.append("	,lc.LOANER_IDNO");
		sql.append("	,lc.LOANER_POSTAL_ADDR");
		sql.append("	,lc.LOANER_TEL");
		sql.append("	,lc.LOAN_EDU");
		sql.append("	,lc.LOAN_INTEREST");
		sql.append("	,fo.*");
		sql.append("	,tbcar.LOAN_CITY");
		sql.append(" FROM");
		sql.append("	(");
		sql.append("		SELECT");
		sql.append("			lo.LOAN_ORDER_ID");
		sql.append("			,lo.LOAN_TYPE");
		sql.append("			,lo.SALESMAN");
		sql.append("			,lo.ORGANIZATION_ID");
		sql.append("			,lo.HUKOU_ADDR");
		sql.append("			,mo.OPERATOR_A");
		sql.append("			,mo.OPERATOR_B");
		sql.append("			,0 AS VISIT_FEE");
		sql.append("			,lo.BELONG_TO");
		sql.append("		FROM");
		sql.append("			t_bp_loan_order lo");
		sql.append("		INNER JOIN t_bp_order_status os ON lo.STATUS_ID = os.STATUS_ID");
		sql.append("		INNER JOIN t_bp_microcredit_opinion mo ON mo.LOAN_ORDER_ID = lo.LOAN_ORDER_ID");
		sql.append("		UNION");
		sql.append("			SELECT");
		sql.append("				lo.LOAN_ORDER_ID");
		sql.append("				,lo.LOAN_TYPE");
		sql.append("				,lo.SALESMAN");
		sql.append("				,lo.ORGANIZATION_ID");
		sql.append("				,lo.HUKOU_ADDR");
		sql.append("				,'' AS OPERATOR_A");
		sql.append("				,'' AS OPERATOR_B");
		sql.append("				,far.VISIT_FEE");
		sql.append("				,lo.BELONG_TO");
		sql.append("			FROM");
		sql.append("				t_bp_loan_order lo");
		sql.append("			INNER JOIN t_bp_order_status os ON lo.STATUS_ID = os.STATUS_ID");
		sql.append("			INNER JOIN t_bp_final_audit_report far ON far.LOAN_ORDER_ID = lo.LOAN_ORDER_ID");
		sql.append("	) AS fo");
		sql.append(" INNER JOIN t_bp_loan_contract lc ON lc.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND lc.CONTRACT_STATUS = '1'");
		sql.append(" LEFT JOIN t_bp_credit_audit_report tbcar ON tbcar.LOAN_ORDER_ID = fo.LOAN_ORDER_ID");
		sql.append(" WHERE");
		sql.append("	1 = 1");
		if (!map.isEmpty()) {
			String loanName = (String) map.get("loanName");
			String loanBgDateS = (String) map.get("loanBgDateS");
			String loanBgDateE = (String) map.get("loanBgDateE");
			String contractNo = (String) map.get("contractNo");

			// 借款人
			if (StringUtils.isNotEmpty(loanName)) {
				sql.append(" AND lc.LOANER LIKE '%" + loanName + "%' ");
			}

			// 合同的签署日期
			if (StringUtils.isNotEmpty(loanBgDateS)) {
				if (StringUtils.isNotEmpty(loanBgDateE)) {
					sql.append(" AND lc.CONTRACT_SIGN_DATE BETWEEN '"
							+ loanBgDateS + "' AND '" + loanBgDateE + "'");
				} else {
					sql.append(" AND lc.CONTRACT_SIGN_DATE = str_to_date('"
							+ loanBgDateS + "','%Y-%m-%d')");
				}

			}
			// 合同编号
			if (StringUtils.isNotEmpty(contractNo)) {
				sql.append("  AND lc.CONTRACT_NO LIKE '%" + contractNo + "%'");
			}

			// 进件城市
			if (StringUtils.isNotBlank((String) map.get("loanCity"))) {
				sql.append(" AND tbcar.LOAN_CITY like '%" + map.get("loanCity")
						+ "%'");
			}
		}
		return sql.toString();
	}

	@Override
	public LoanContract findLoanContractByContractNo(String contractNo) {
		List<LoanContract> list = this.baseDAO
				.find("from LoanContract o where o.contractNo = '" + contractNo
						+ "' ");
		if (Collections.listIsNotEmpty(list)) {
			return list.get(0);
		}
		return null;
	}

	@Override
	public LoanContract findLoanContractRelativeInfo(LoanContract loanContract) throws Exception {
		packLoanContractEntity(loanContract);
		return loanContract;
	}
}
