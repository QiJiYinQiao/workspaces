package com.bpms.service.impl;

import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.bpms.dao.BaseDAO;
import com.bpms.model.LoanCustRepaymentDetail;
import com.bpms.model.vo.CustomerRepaymentInfoModel;
import com.bpms.service.CommonService;
import com.bpms.service.LoanCustRepaymentDetailService;
import com.bpms.util.Collections;
import com.bpms.util.PageUtil;
import com.bpms.util.ReadExcel;

/**
 * 贷款客户还款明细实现类
 * 
 * @author liuhh
 *
 */
@Service
public class LoanCustRepaymentDetailServiceImpl implements
		LoanCustRepaymentDetailService {

	@Autowired
	private BaseDAO<LoanCustRepaymentDetail> loanCustRepaymentDetailDao;
	@Autowired
	private CommonService commonService;

	@Override
	public boolean persistenceLoanCustRepaymentDetail(
			LoanCustRepaymentDetail loanCustRepaymentDetail) {
		if (StringUtils.isBlank(loanCustRepaymentDetail.getRdId())) {
			loanCustRepaymentDetailDao.save(loanCustRepaymentDetail);
		} else {
			loanCustRepaymentDetailDao.update(loanCustRepaymentDetail);
		}
		return true;
	}

	@Override
	public List<CustomerRepaymentInfoModel> findLoanCustRepaymentDetail(
			Map<String, Object> map, PageUtil pageUtil) {
		StringBuffer sql = new StringBuffer();
		createContractRepaymentDetailSql(map, sql, "");
		List<Object> list = this.loanCustRepaymentDetailDao.findBySql(
				sql.toString(), pageUtil);
		List<CustomerRepaymentInfoModel> listcri = new ArrayList<CustomerRepaymentInfoModel>();
		if (Collections.listIsNotEmpty(list)) {
			for (Object cri : list) {
				Object[] o = (Object[]) cri;
				CustomerRepaymentInfoModel cusrepayInfo = new CustomerRepaymentInfoModel();
				cusrepayInfo.setContractNo((String) o[0]);
				cusrepayInfo.setContractSignDate((Date) o[1]);
				cusrepayInfo.setLoanBgDate((Date) o[1]);
				cusrepayInfo.setLoanerActName((String) o[2]);
				cusrepayInfo.setLoanerActNum((String) o[3]);
				cusrepayInfo.setLoanerBankName((String) o[4]);
				cusrepayInfo.setMonthlyRepayment(String.valueOf(o[5]));
				cusrepayInfo.setLoanPeriods((Integer) o[6]);
				cusrepayInfo.setLoanName((String) o[7]);
				cusrepayInfo.setLoanIdNo((String) o[8]);
				cusrepayInfo.setLoanMobileTel((String) o[9]);
				cusrepayInfo.setLoanEdu(String.valueOf(o[10]));
				cusrepayInfo.setLoanOrderId((String) o[11]);
				cusrepayInfo.setRepaymentBgDate((Date) o[12]);
				cusrepayInfo.setRepaymentEndDate((Date) o[13]);
				cusrepayInfo.setSalesMan((String) o[14]);
				cusrepayInfo.setOrganizationId(Integer.toString((int) o[15]));
				cusrepayInfo.setOrganizationName((String) o[16]);
				if (null != o[17]) {
					cusrepayInfo
							.setOverdueDays(((BigDecimal) o[17]).intValue());
				} else {
					cusrepayInfo.setOverdueDays(0);
				}
				cusrepayInfo.setLateFee((BigDecimal) o[18]);
				cusrepayInfo.setDefaultFnterest((BigDecimal) o[19]);
				cusrepayInfo.setRealRepmtAmt((BigDecimal) o[20]);
				if (null != o[21]) {
					cusrepayInfo.setPaidLoanPeriods(((BigDecimal) o[21])
							.intValue());
				} else {
					cusrepayInfo.setPaidLoanPeriods(0);
				}
				if (null != o[22]) {
					cusrepayInfo.setOverdueTimes(((BigDecimal) o[22])
							.intValue());
				} else {
					cusrepayInfo.setOverdueTimes(0);
				}
				if (null != o[23]) {
					cusrepayInfo.setLoanType((String) o[23]);
				}
				cusrepayInfo.setLoanTypeName(commonService.findDictName(
						"loan_type", o[23] + ""));
				listcri.add(cusrepayInfo);
			}
		}
		return listcri;
	}

	@Override
	public Long getCountoFLoanCustRepaymentDetail(Map<String, Object> map) {
		StringBuffer sql = new StringBuffer();
		createContractRepaymentDetailSql(map, sql, "1");

		List list = loanCustRepaymentDetailDao.findBySQL(sql.toString());
		BigInteger bi = (BigInteger) list.get(0);
		return bi.longValue();
	}

	private void createContractRepaymentDetailSql(Map<String, Object> map,
			StringBuffer sql, String type) {
		if (type.equals("1")) {
			sql.append(" SELECT COUNT(*) FROM  t_bp_loan_contract lc ");
		} else {
			sql.append(" SELECT  lc.CONTRACT_NO 合同编号,lc.CONTRACT_SIGN_DATE 签署日期,lc.LOANER_ACT_NAME  开户人姓名, ");
			sql.append(" lc.LOANER_ACT_NUM 开户行账号,lc.LOANER_BANK_NAME 开户行名称,lc.MONTHLY_REPAYMENT 月还款额,");
			sql.append(" lc.LOAN_PERIODS 贷款期数,lc.LOANER 客户姓名,lc.LOANER_IDNO 贷款申请人的身份证号,lc.LOANER_TEL 贷款申请人的手机电话, ");
			sql.append(" lc.LOAN_EDU 贷款额度,lc.LOAN_ORDER_ID 订单ID,lc.REPAYMENT_BG_DATE 还款开始日期, lc.REPAYMENT_ED_DATE 还款结束日期, ");
			sql.append(" lo.SALESMAN 业务员,lo.ORGANIZATION_ID 所属机构ID, orgz.FULL_NAME 所属机构名称,tlc.OVERDUE_DAYS 逾期天数, ");
			sql.append(" tlc.LATE_FEE 滞纳金,tlc.DEFAULT_INTEREST 罚息,tlc.REAL_REPMT_AMT 实际还款,tlc.stat2  已还期数,tlc.stat3 逾期次数, ");
			sql.append("  lo.LOAN_TYPE 贷款类型    FROM  t_bp_loan_contract lc  ");
		}
		sql.append(" LEFT JOIN t_bp_loan_order lo ON lo.LOAN_ORDER_ID = lc.LOAN_ORDER_ID ");
		//sql.append(" LEFT JOIN t_users tu ON tu.USER_ID = lo.SALESMAN ");
		sql.append(" LEFT JOIN t_organization orgz ON orgz.ORGANIZATION_ID = lo.ORGANIZATION_ID ");
		sql.append(" LEFT JOIN (  SELECT tlc.CONTRACT_NO CONTRACT_NO,SUM(tlc.OVERDUE_DAYS) OVERDUE_DAYS, ");
		sql.append(" SUM(tlc.LATE_FEE) LATE_FEE,SUM(tlc.DEFAULT_INTEREST) DEFAULT_INTEREST,SUM(tlc.REAL_REPMT_AMT) REAL_REPMT_AMT, ");
		sql.append(" SUM(case when tlc.RPMT_STATUS ='2' then 1 else 0 end)  stat2,SUM(case when tlc.RPMT_STATUS ='3' then 1 else 0 end)  stat3 ");
		sql.append(" FROM t_bp_loan_cust_repayment_detail tlc GROUP BY tlc.CONTRACT_NO ) tlc ON tlc.CONTRACT_NO = lc.CONTRACT_NO ");
		if (!map.isEmpty()) {
			sql.append(" WHERE 1 = 1");
			String organizationId = (String) map.get("organizationId");
			String loanName = (String) map.get("loanName");
			String contractNo = (String) map.get("contractNo");
			String repaymentBgDate = (String) map.get("repaymentBgDate");
			String contractSignDateS = (String) map.get("contractSignDateS");
			String contractSignDateE = (String) map.get("contractSignDateE");
			String isOverdue = (String) map.get("isOverdue");// 是否逾期
			if (StringUtils.isNotEmpty(organizationId)) {
				sql.append(" AND lo.ORGANIZATION_ID = '" + organizationId + "'");
			}
			if (StringUtils.isNotEmpty(loanName)) {
				sql.append(" AND lc.LOANER LIKE '%" + loanName + "%' ");
			}
			if (StringUtils.isNotEmpty(contractNo)) {
				sql.append("  AND lc.CONTRACT_NO LIKE '%" + contractNo + "%'");
			}
			if (StringUtils.isNotEmpty(repaymentBgDate)) {
				sql.append("  AND lc.REPAYMENT_BG_DATE = str_to_date('"
						+ repaymentBgDate + "','%Y-%m-%d')");
			}
			if (StringUtils.isNotEmpty(contractSignDateS)) {
				if (StringUtils.isNotEmpty(contractSignDateE)) {
					sql.append(" AND lc.CONTRACT_SIGN_DATE BETWEEN '"
							+ contractSignDateS + "' AND '" + contractSignDateE
							+ "'");
				} else {
					sql.append(" AND lc.CONTRACT_SIGN_DATE = str_to_date('"
							+ contractSignDateS + "','%Y-%m-%d')");
				}

			}
			if (StringUtils.isNotBlank(isOverdue)) {
				if("1".equals(isOverdue)){
					sql.append(" AND tlc.OVERDUE_DAYS  =  0 ");
				}else if("2".equals(isOverdue)){
					sql.append(" AND tlc.OVERDUE_DAYS  >  0 ");
				}
			}
		}
	}

	@Override
	public List<LoanCustRepaymentDetail> findRepaymentDetailByCno(
			Map<String, Object> map, PageUtil pageUtil) {
		String hql = " FROM LoanCustRepaymentDetail lcrd WHERE lcrd.contractNo = '"
				+ map.get("contractNo") + "'";
		List<LoanCustRepaymentDetail> list = loanCustRepaymentDetailDao.find(
				hql, pageUtil);
		return list;
	}

	@Override
	public Long getCountRepaymentDetail(Map<String, Object> map) {
		String hql = "SELECT COUNT(*) FROM LoanCustRepaymentDetail lcrd WHERE lcrd.contractNo = '"
				+ map.get("contractNo") + "'";
		List list = loanCustRepaymentDetailDao.find(hql);
		return (Long) list.get(0);
	}

	@Override
	public void exportLoanCustRepaymentDetail() throws Exception {
		List<CustomerRepaymentInfoModel> modelList = this
				.findLoanCustRepaymentDetail(new HashMap<String, Object>(){
					{
						put("isOverdue", "2");
					}
				},
						new PageUtil(0, 0));
		Map<String, List<CustomerRepaymentInfoModel>> modelMap = handleCustomerRepaymentInfo(modelList);
		if (modelList != null && modelList.size() > 0) {
			String srcXlsxPath = ServletActionContext.getServletContext()
					.getRealPath("/excel/loan") + "\\客户贷款明细表模板.xlsx";// 模板路径
			Workbook workbook = ReadExcel.openExcleFile(srcXlsxPath);// 获取工作簿7
			Sheet sheet = workbook.getSheetAt(0);// 获取页签
			int count = 0;
			Set<Entry<String, List<CustomerRepaymentInfoModel>>> entrySet = modelMap
					.entrySet();
			for (Entry<String, List<CustomerRepaymentInfoModel>> entry : entrySet) {
				List<CustomerRepaymentInfoModel> list = entry.getValue();
				for (int i = 0; i < list.size(); i++) {
					// 第一行不用copy
					if (count > 0) {
						ReadExcel.copyRows(sheet, 4, 4, 3 + count);
					}
					Row row = sheet.getRow(3+count);
					CustomerRepaymentInfoModel info = list.get(i);
					row.getCell(1).setCellValue(info.getContractNo());
					row.getCell(2).setCellValue(info.getLoanName());
					row.getCell(3).setCellValue(info.getLoanMobileTel());
					row.getCell(4).setCellValue(info.getLoanerBankName());
					row.getCell(5).setCellValue(info.getLoanerActNum());
					row.getCell(6).setCellValue(info.getLoanEdu());
					row.getCell(7).setCellValue(info.getMonthlyRepayment());
					row.getCell(8).setCellValue(info.getLateFee().doubleValue());
					row.getCell(9).setCellValue(info.getOverdueDays());
					row.getCell(10).setCellValue(info.getNow());
					row.getCell(11).setCellValue(info.getDefaultFnterest().doubleValue());
					row.getCell(12).setCellValue(info.getRealRepmtAmt()!=null?info.getRealRepmtAmt().doubleValue():0);
					row.getCell(13).setCellValue(info.getLoanerActNum());
					row.getCell(14).setCellValue("");
					row.getCell(15).setCellValue("");
					row.getCell(16).setCellValue("");
					row.getCell(17).setCellValue(info.getSalesMan());
					row.getCell(18).setCellValue(info.getOverdueTimes());
					row.getCell(19).setCellValue(info.getLoanBgDate());
					row.getCell(20).setCellValue(info.getPaidLoanPeriods());
					row.getCell(20).setCellValue(info.getLoanPeriods());
					count++;
				}
				sheet.addMergedRegion(new CellRangeAddress(3+count-list.size(), 3+count-1, 0, 0));
				sheet.getRow(3+count-list.size()).getCell(0).setCellValue(entry.getKey());
			}
			HttpServletResponse response = ServletActionContext.getResponse();
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(new Date());
			response.setHeader(
					"Content-disposition",
					"attachment;filename=" + "客户贷款明细表-"
							+ calendar.get(Calendar.YEAR) + "-"
							+ calendar.get(Calendar.MONTH) + "-"
							+ calendar.get(Calendar.DATE) + ".xlsx");
			OutputStream ouputStream = response.getOutputStream();
			workbook.write(ouputStream);
			ouputStream.flush();
			ouputStream.close();
		}
	}

	// 对信息进行分组
	private Map<String, List<CustomerRepaymentInfoModel>> handleCustomerRepaymentInfo(
			List<CustomerRepaymentInfoModel> modelList) {
		Map<String, List<CustomerRepaymentInfoModel>> map = new HashMap<String, List<CustomerRepaymentInfoModel>>();
		if (Collections.listIsNotEmpty(modelList)) {
			// 组织对应的key
			for (CustomerRepaymentInfoModel model : modelList) {
				map.put(model.getOrganizationName(), null);
			}
			// 对信息进行分组
			Set<Entry<String, List<CustomerRepaymentInfoModel>>> entrySet = map
					.entrySet();
			for (Entry<String, List<CustomerRepaymentInfoModel>> entry : entrySet) {
				List<CustomerRepaymentInfoModel> list = new ArrayList<CustomerRepaymentInfoModel>();
				for (CustomerRepaymentInfoModel model : modelList) {
					if (entry.getKey().equals(model.getOrganizationName())) {
						list.add(model);
					}
				}
				entry.setValue(list);
			}
		}
		System.out.println(JSON.toJSONString(map));
		return map;
	}
	
	@Override
	public LoanCustRepaymentDetail findCustRepaymentDeatilById(String id) {
		String hql = " FROM LoanCustRepaymentDetail lcrd WHERE lcrd.rdId = '"+id+"'";
		List<LoanCustRepaymentDetail> list = loanCustRepaymentDetailDao.find(hql);
		if(Collections.listIsNotEmpty(list))
			return list.get(0);
		else
			return null;
	}
}
