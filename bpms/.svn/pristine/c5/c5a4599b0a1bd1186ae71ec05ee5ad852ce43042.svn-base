package com.bpms.listener.loan.ipc;


import org.activiti.engine.delegate.DelegateTask;
import org.activiti.engine.delegate.TaskListener;
import org.apache.commons.lang3.StringUtils;

import com.bpms.listener.loan.BaseLoanTaskListener;
import com.bpms.model.LoanOrder;
import com.bpms.model.LoanOrderHis;
import com.bpms.util.Constants;

/**
 * IPC电核专员活动节点监听器
 * 
 * @author liuhh
 *
 */
@SuppressWarnings("serial")
public class LoanIPCInitialAuditTaskListener extends BaseLoanTaskListener  implements TaskListener{

	@Override
	public String getRoleCode() {
		return Constants.LOAN_ROLE_CODE_IPCDIANHEZHUANYUAN;
	}

	@Override
	protected String[] getOrganizationIds() {
		String[] organizationIds = { Constants.LOAN_ORGANIZATION_ID };
		return organizationIds;
	}

	@Override
	public void notify(DelegateTask task) {
		// 设置当前用户执行的角色信息
		setLocalVariableRole(task);
		// 设置候选人组
		addCandidateGroupHQ(task);

		// 判断当前任务是否指派,如果是指派,则直接设定候选人
		String userId = (String) task.getVariable("commissioner");
		if(StringUtils.isNotEmpty(userId)){
			task.setAssignee(userId);
			// 发送消息提醒
			sendMessageByAssignee(task);
			return;
		}

		// 获取当前执行的业务订单
		LoanOrder loanOrder = getLoanOrderByTaskId(task);
		// 获取当前业务订单的备注信息,获取当前IPCDianHeZhuanYuan角色受理人,设置受理人信息
		LoanOrderHis loanOrderHis = loanOrderHisService.findLoanOrderHis(getRoleCode(), loanOrder.getLoanOrderId());

		// 判断该节点是否已经办理过一次,如果没有办理则重新设定
		if (null!=loanOrderHis) {
			// 设置上一次处理的电荷专员为受理人
			task.setAssignee(loanOrderHis.getAssignee());
			// 发送消息提醒
			sendMessageByAssignee(task);
		} else {
			// 发送提示消息
			sendMessageByCandidateGroup(task);
		}

	}

}
