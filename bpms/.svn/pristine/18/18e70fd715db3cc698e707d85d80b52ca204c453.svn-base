package com.bpms.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.Address;
import com.bpms.model.Contacts;
import com.bpms.model.vo.ContactsModel;
import com.bpms.mydao.ContactsMapper;
import com.bpms.service.AddressService;
import com.bpms.service.ContactsService;
import com.bpms.service.LoanorderAndContactsService;
import com.bpms.util.Collections;
import com.bpms.util.Constants;

/**
 * bpms 紧急联系人信息servicImpl
 * 
 * @author panchuanhe
 * @date 2015/6/16
 */
@Service("contactsService")
public class ContactsServiceImpl implements ContactsService {
	@Autowired
	private BaseDAO<Contacts> baseDAO;
	@Autowired
	private LoanorderAndContactsService loanorderAndContactsServiceImpl;// 紧急联系人与订单关系表service
	@Autowired
	private AddressService addressServiceImpl;
	@Autowired
	private ContactsMapper contactsMapper;

	@Override
	public List<ContactsModel> findListById(String id) {
		try {
			StringBuffer hql = new StringBuffer("from com.bpms.model.Contacts t where 1=1 and t.cusId = '"+id+"'");
			hql.append(" order by t.createDate desc");
			//查询出列表
			List<Contacts> list = baseDAO.find(hql.toString());
			List<ContactsModel> cmlist = new ArrayList<ContactsModel>();
			if(list!=null && list.size()>0){
				for (int i = 0; i < list.size(); i++) {
					Contacts contacts = list.get(i);
					ContactsModel contactsModel = new ContactsModel();
					//复制字段
					PropertyUtils.copyProperties(contactsModel, contacts);
					//公司地址
					String compId = contacts.getCompAddr();//公司地址id
					Address address = addressServiceImpl.findById(compId);
					if(address!=null){
						contactsModel.setCompProvince(address.getProvinceId());
						contactsModel.setCompCity(address.getCityId());
						contactsModel.setCompArea(address.getAreaId());
						contactsModel.setCompAddrDetails(address.getAddrDetails());
					}
					//家庭地址
					String currId = contacts.getCurrAddr();
					Address address1 = addressServiceImpl.findById(currId);
					if(address1!=null){
						contactsModel.setFamilyProvince(address1.getProvinceId());
						contactsModel.setFamilyCity(address1.getCityId());
						contactsModel.setFamilyArea(address1.getAreaId());
						contactsModel.setFamilyAddrDetails(address1.getAddrDetails());
					}
					cmlist.add(contactsModel);
				}
			}
			return cmlist;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 新增紧急联系人
	 */
	@Override
	public boolean saveContacts(ContactsModel contactsModel) {
		try {
			//获取用户id
			Integer userid = Constants.getCurrendUser().getUserId();
			Contacts contacts = new Contacts();
			PropertyUtils.copyProperties(contacts,contactsModel);
			if(StringUtils.isNotBlank(contacts.getContactId())){
				baseDAO.update(contacts);
			}else{
				//设置创建时间
				contacts.setCreateDate(new Date());
				//创建人
				contacts.setCreator(String.valueOf(userid));
				baseDAO.save(contacts);
			}
			
			/**保存地址**/
			Address jiaAddr = new Address();
			jiaAddr.setProvinceId(contactsModel.getFamilyProvince()==null?0:contactsModel.getFamilyProvince());//省
			jiaAddr.setCityId(contactsModel.getFamilyCity()==null?0:contactsModel.getFamilyCity());//市
			jiaAddr.setAreaId(contactsModel.getFamilyArea()==null?0:contactsModel.getFamilyArea());//县
			jiaAddr.setAddrDetails(contactsModel.getFamilyAddrDetails()==null?"":contactsModel.getFamilyAddrDetails());//详细
			jiaAddr.setHostType("A");//客户类型
			jiaAddr.setAddrType("A");//地址类别
			jiaAddr.setHostId(contacts.getContactId());//客户id
			addressServiceImpl.saveAddress(jiaAddr);//保存家庭地址
			
			Address compAddr = new Address();
			compAddr.setProvinceId(contactsModel.getCompProvince()==null?0:contactsModel.getCompProvince());//省
			compAddr.setCityId(contactsModel.getCompCity()==null?0:contactsModel.getCompCity());//市
			compAddr.setAreaId(contactsModel.getCompArea()==null?0:contactsModel.getCompArea());//县
			compAddr.setAddrDetails(contactsModel.getCompAddrDetails()==null?"":contactsModel.getCompAddrDetails());//详细
			compAddr.setHostType("A");//客户类型
			compAddr.setAddrType("A");//地址类别
			compAddr.setHostId(contacts.getContactId());//客户id
			addressServiceImpl.saveAddress(compAddr);//保存公司地址
			
			contacts.setCompAddr(compAddr.getAddrId());//紧急联系人公司地址
			contacts.setCurrAddr(jiaAddr.getAddrId());//紧急联系人家庭地址
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public Long count(String id) {
		Long count = 0L;
		StringBuffer hql = new StringBuffer("select count(*) from com.bpms.model.Contacts t where 1=1 and t.cusId = '"+id+"'");
		count = baseDAO.count(hql.toString());
		return count;
	}

	@Override
	public boolean doDeleteById(Contacts contacts) {
		try {
			StringBuffer hql = new StringBuffer("delete from com.bpms.model.Contacts c where c.contactId = '"+contacts.getContactId()+"'");
			baseDAO.executeHql(hql.toString());
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public Contacts findContactByOid(String oid) {
		String hql = "select c FROM Contacts c , LoanorderAndContacts lc , LoanOrder l "
				+ " WHERE c.contactId = lc.contactId AND l.loanOrderId = lc.loanOrderId AND c.relationship = 'spouse' AND l.loanOrderId = '"
				+ oid + "'";
		List<Contacts> list = baseDAO.find(hql);
		if (list.size()>0)
			return baseDAO.find(hql).get(0);
		return null;
	}

	@Override
	public List<ContactsModel> findContactsByOid(String oid) {
		String hql = "select c FROM Contacts c , LoanorderAndContacts lc , LoanOrder l "
				+ " WHERE c.contactId = lc.contactId AND l.loanOrderId = lc.loanOrderId AND l.loanOrderId = '"
				+ oid + "'";
		List<Contacts> cts = baseDAO.find(hql);
		List<ContactsModel> list = new ArrayList<ContactsModel>();
		if(Collections.listIsNotEmpty(cts)){
			for(Contacts c : cts){
				String sql = "SELECT t.DICT_NAME from t_sys_dict t where t.`STATUS`='A' AND t.PARENT_ID = (select td.CODE_ID from t_sys_dict td where td.DICT_CODE = 'relationship_type') AND t.DICT_CODE = '"+c.getRelationship()+"'";
				List l = baseDAO.findBySQL(sql);
				String relationshipName = "";
				if(l.size()>0){
					relationshipName = (String) l.get(0);
				}
				ContactsModel cm = new ContactsModel();
				cm.setChName(c.getChName());
				cm.setTel(c.getTel());
				cm.setRelationship(c.getRelationship());
				cm.setRelationshipName(relationshipName);
				list.add(cm);
			}
		}
		return list;
	}

	@Override
	public Contacts findByContactId(String id) {
		try {
			Contacts contacts = new Contacts();
			contacts = baseDAO.get(Contacts.class,id);
			return contacts;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<Map<String, Object>> findContactList(Map<String, Object> param) {
		return contactsMapper.findContactList(param);
	}

	@Override
	public long findContactListCount(Map<String, Object> param) {
		return contactsMapper.findContactListCount(param);
	}
}
