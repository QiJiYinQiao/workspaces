package com.bpms.service.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.InvestOrder;
import com.bpms.model.OrderStatus;
import com.bpms.model.Users;
import com.bpms.model.vo.InvestorAndInvestOrderModel;
import com.bpms.model.vo.InvestorAndInvestProductModel;
import com.bpms.service.InvestOrderService;
import com.bpms.service.OrderStatusService;
import com.bpms.service.UserService;
import com.bpms.util.Collections;
import com.bpms.util.Constants;
import com.bpms.util.PageUtil;

/**
 * @ClassName: InvestOrderServiceImpl 
 * @Description: 投资订单ServiceImpl 
 * @author PANCHUANHE 
 * @date 2015年7月20日 下午1:45:17
 */
@Service("investOrderService")
public class InvestOrderServiceImpl implements InvestOrderService {

	@Autowired
	private BaseDAO<InvestOrder> baseDAO;
	@Autowired
	private UserService userService;
	@Autowired
	private OrderStatusService orderStatusServiceImpl;

	@Override
	public boolean persistenceInvestOrder(InvestOrder investOrder) {
		try {
			if (StringUtils.isBlank(investOrder.getInvestOrderId())) {
				//理财经理新增订单
				// 获取当前用户的id
				Users user = userService.findUserById(Constants.getCurrendUser().getUserId());
				Integer userId = Constants.getCurrendUser().getUserId();
				investOrder.setCreator(String.valueOf(userId));//创建人
				investOrder.setCreateDate(new Date());//创建时间
				investOrder.setProcessStatus("0");//流程状态
				investOrder.setOrganizationId(user.getOrganization().getOrganizationId());//部门id
				baseDAO.save(investOrder);
			} else {
				//不修改订单状态
				investOrder.setOrderStatus(orderStatusServiceImpl.getOrderStatusByStatusCode(investOrder.getOrderStatus().getStatusCode()));
				baseDAO.update(investOrder);
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public List<InvestOrder> findAllInvestOrderList() {
		StringBuffer hql = new StringBuffer("from com.bpms.model.InvestOrder where 1=1");
		return baseDAO.find(hql.toString());
	}

	@Override
	public List<InvestOrder> findListByField(String hql) {
		return baseDAO.find(hql);
	}

	@Override
	public List<InvestorAndInvestOrderModel> findListByInvestorAndInvestOrder(PageUtil pageUtil) {
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("select t1.INVEST_ORDER_ID,");
			sql.append("t1.INVESTOR_ID,");
			sql.append("t1.ORDER_STATUS,");
			sql.append("t1.ORDER_DESC,");
			sql.append("t1.CONTRACT_NO,");
			sql.append("t1.SIGN_SITE,");
			sql.append("t1.SIGN_DATE,");
			sql.append("t1.MOB_TEL,");
			sql.append("t1.FINANCING_MGR,");
			sql.append("t1.FM_PHONE,");
			sql.append("t1.FM_SIGN_DATE,");
			sql.append("t1.DEPT_MGR,");
			sql.append("t1.DM_SIGN_DATE,");
			sql.append("t1.CREATOR,");
			sql.append("t1.CREATE_DATE,");
			sql.append("t1.BANK_NAME,");
			sql.append("t1.ACT_NO,");
			sql.append("t1.ACT_NAME,");
			sql.append("t1.ACT_MEDIUM,");
			sql.append("t1.ACT_NATURE,");
			sql.append("t1.ID_CARD,");
			sql.append("t2.INVESTOR_TYPE,");
			sql.append("t2.INVESTOR_STATUS,");
			sql.append("t2.CH_NAME,");
			sql.append("t2.EN_NAME,");
			sql.append("t2.GENDER_TYPE,");
			sql.append("t2.BIRTHDAY,");
			sql.append("t2.NATIONALITY,");
			sql.append("t2.MARITAL_STATUS,");
			sql.append("t2.FAMILY_STATUS,");
			sql.append("t2.FAM_INC_STA,");
			sql.append("t2.ID_TYPE,");
			sql.append("t2.ID_NO,");
			sql.append("t2.ID_ISSUE_DATE,");
			sql.append("t2.ID_EXPIRE_DATE,");
			sql.append("t2.ID_LOCATION,");
			sql.append("t2.DEGREE_TYPE,");
			sql.append("t2.JOB_TYPE,");
			sql.append("t2.INDUSTRY,");
			sql.append("t2.COMPANY_NAME,");
			sql.append("t2.YEARS_OF_WORK,");
			sql.append("t2.COMP_SCALE,");
			sql.append("t2.JOB_TITLE,");
			sql.append("t2.MOBILE_TEL,");
			sql.append("t2.FIXED_TEL,");
			sql.append("t2.EMAIL,");
			sql.append("t2.COMM_ADDR,");
			sql.append("t2.ZIP,");
			sql.append("t1.PROCESS_STATUS,");
			sql.append("t1.ORGANIZATION_ID");
			sql.append(" FROM T_BP_INVEST_ORDER T1 LEFT JOIN T_BP_INVESTOR T2 ON T1.INVESTOR_ID = T2.INVESTOR_ID where T2.INVESTOR_STATUS = 'A' ORDER BY T1.CREATE_DATE DESC");
			List<Object> list = baseDAO.findBySql(sql.toString(),pageUtil);
			if(Collections.listIsNotEmpty(list)){
				//需要返回的lsit
				List<InvestorAndInvestOrderModel> modelList = new ArrayList<InvestorAndInvestOrderModel>();
				//vo实体对象
				InvestorAndInvestOrderModel vom = new InvestorAndInvestOrderModel();
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);
					InvestorAndInvestOrderModel vo = (InvestorAndInvestOrderModel) vom.clone();
					vo.setInvestOrderId(obj[0]==null?"":String.valueOf(obj[0]));//订单ID
					vo.setInvestorId(obj[1]==null?"":String.valueOf(obj[1]));//投资人ID
					vo.setOrderStatus(obj[2]==null?"":String.valueOf(obj[2]));
					vo.setOrderDesc(obj[3]==null?"":String.valueOf(obj[3]));
					vo.setContractNo(obj[4]==null?"":String.valueOf(obj[4]));
					vo.setSignSite(obj[5]==null?"":String.valueOf(obj[5]));
					vo.setSignDate((Date)obj[6]);
					vo.setMobTel(obj[7]==null?"":String.valueOf(obj[7]));
					vo.setFinancingMgr(obj[8]==null?"":String.valueOf(obj[8]));
					vo.setFmPhone(obj[9]==null?"":String.valueOf(obj[9]));
					vo.setFmSignDate((Date)obj[10]);
					vo.setDeptMgr(obj[11]==null?"":String.valueOf(obj[11]));
					vo.setDmSignDate((Date)obj[12]);
					vo.setCreator(obj[13]==null?"":String.valueOf(obj[13]));
					vo.setCreateDate((Date)obj[14]);
					vo.setBankName(obj[15]==null?"":String.valueOf(obj[15]));
					vo.setActNo(obj[16]==null?"":String.valueOf(obj[16]));
					vo.setActName(obj[17]==null?"":String.valueOf(obj[17]));
					vo.setActMedium(obj[18]==null?"":String.valueOf(obj[18]));
					vo.setActNature(obj[19]==null?"":String.valueOf(obj[19]));
					vo.setIdCrad(obj[20]==null?"":String.valueOf(obj[20]));
					
					vo.setInvestorType(obj[21]==null?"":String.valueOf(obj[21]));
					vo.setInvestorStatus(obj[22]==null?"":String.valueOf(obj[22]));
					vo.setChName(obj[23]==null?"":String.valueOf(obj[23]));
					vo.setEnName(obj[24]==null?"":String.valueOf(obj[24]));
					vo.setGenderType(obj[25]==null?"":String.valueOf(obj[25]));
					vo.setBirthday((Date)obj[26]);
					vo.setNationality(obj[27]==null?"":String.valueOf(obj[27]));
					vo.setMaritalStatus(obj[28]==null?"":String.valueOf(obj[28]));
					vo.setFamilyStatus(obj[29]==null?"":String.valueOf(obj[29]));
					vo.setFamIncSta(obj[30]==null?"":String.valueOf(obj[30]));
					vo.setIdType(obj[31]==null?"":String.valueOf(obj[31]));
					vo.setIdNo(obj[32]==null?"":String.valueOf(obj[32]));
					vo.setIdIssueDate((Date)obj[33]);
					vo.setIdExpireDate((Date)obj[34]);
					vo.setIdLocation(obj[35]==null?"":String.valueOf(obj[35]));
					vo.setDegreeType(obj[36]==null?"":String.valueOf(obj[36]));
					vo.setJobType(obj[37]==null?"":String.valueOf(obj[37]));
					vo.setIndustry(obj[38]==null?"":String.valueOf(obj[38]));
					vo.setCompanyName(obj[39]==null?"":String.valueOf(obj[39]));
					vo.setYearsOfWork((Integer)obj[40]);
					vo.setCompScale(obj[41]==null?"":String.valueOf(obj[41]));
					vo.setJobTitle(obj[42]==null?"":String.valueOf(obj[42]));
					vo.setMobileTel(obj[43]==null?"":String.valueOf(obj[43]));
					vo.setFixedTel(obj[44]==null?"":String.valueOf(obj[44]));
					vo.setEmail(obj[45]==null?"":String.valueOf(obj[45]));
					vo.setCommAddr(obj[46]==null?"":String.valueOf(obj[46]));
					vo.setZip(obj[47]==null?"":String.valueOf(obj[47]));
					vo.setProcessStatus(obj[48]==null?"":String.valueOf(obj[48]));
					vo.setOrganizationId(obj[49]==null?0:(Integer)obj[49]);
					//放入list集合中
					modelList.add(vo);
				}
				return modelList;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Long count() {
		try {
			StringBuffer sql = new StringBuffer("SELECT COUNT(1) FROM T_BP_INVEST_ORDER T1 LEFT JOIN T_BP_INVESTOR T2 ON T1.INVESTOR_ID = T2.INVESTOR_ID where T2.INVESTOR_STATUS = 'A'");
			return baseDAO.countBySql(sql.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return 0L;
	}

	@Override
	public boolean doDeleteInvestOrder(String investOrderId) {
		try {
			StringBuffer sql = new StringBuffer("delete from com.bpms.model.InvestOrder t where 1=1 and t.investOrderId = '"+investOrderId+"'");
			baseDAO.executeBySql(sql.toString());
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public void updateInvestOrderProcessStatus(String investOrderId,
			String zhuangtai) {
		try {
			InvestOrder investOrder = baseDAO.get(InvestOrder.class, investOrderId);
			if(null != investOrder){
				investOrder.setProcessStatus(zhuangtai);
			}
			baseDAO.update(investOrder);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public InvestOrder findByInvestOrderId(String InvestOrderId) {
		//根据id查询一个实例对象
		return baseDAO.get(InvestOrder.class, InvestOrderId);
	}

	@Override
	public void updateInvestOrderStatus(String InvestOrderId, String status) {
		InvestOrder investOrder = this.baseDAO.get(InvestOrder.class, InvestOrderId);
		OrderStatus orderStatus = orderStatusServiceImpl
				.getOrderStatusByStatusCode(InvestOrder.class.getSimpleName()
						+ "_" + status);
		investOrder.setOrderStatus(orderStatus);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<InvestorAndInvestProductModel> findInvestorAndInvestProductsDetails(String investOrderId) {
		
		String sql = 
			"SELECT"+	
                " t1.INVESTOR_NAME," +
                " t1.ID_CARD," +
                " t1.MOB_TEL," +
                " t3.PROD_NAME," +
                " t3.LENDING_CYCLE," +
                " t3.ARS," +
                " t3.YTM," +
                " t2.INVEST_EDU," +
                " t3.REPAYMENT_MODE," +
                " t2.BEGIN_DATE," +
                " t2.END_DATE," +
                " t3.PROD_DESC," +                
                " t3.MSF" +                
    		" FROM" +
                " t_bp_invest_order t1" +
                " JOIN t_bp_investOrder_and_products t2 ON t1.INVEST_ORDER_ID = t2.INVEST_ORDER_ID" +	
                " JOIN t_bp_invest_products t3 ON t2.PROD_ID = t3.PROD_ID" +
        	" WHERE" +
                " t1.INVEST_ORDER_ID='"+investOrderId+"'";
	
		List<Object[]> rawDataRows = baseDAO.findBySQL(sql);
		
		List<InvestorAndInvestProductModel> resultRows = new ArrayList<InvestorAndInvestProductModel>();			
		
		try {		
			if(Collections.listIsNotEmpty(rawDataRows)){
				//1.获取每一行的数据
				InvestorAndInvestProductModel vo = new InvestorAndInvestProductModel();
				for(Object[] objArray : rawDataRows){
					InvestorAndInvestProductModel oneModel = (InvestorAndInvestProductModel) vo.clone();
					oneModel.setInvestorName( objArray[0]==null ? "" : String.valueOf(objArray[0]) );    //设置客户姓名
					oneModel.setIdCrad( objArray[1]==null ? "" : String.valueOf(objArray[1]) );           //设置客户身份证编号
					oneModel.setMobTel( objArray[2]==null ? "" : String.valueOf(objArray[2]) );           //设置客户联系方式
					oneModel.setProdName( objArray[3]==null ? "" : String.valueOf(objArray[3]) );         //设置理财产品名称
					oneModel.setLendingCycle(Integer.parseInt( objArray[4]==null ? "" : String.valueOf(objArray[4]) ));             //设置出借周期
					oneModel.setArs(BigDecimal.valueOf(Double.parseDouble( objArray[5]==null ? "" : String.valueOf(objArray[5] )))); //设置年化收益率
					oneModel.setYtm(BigDecimal.valueOf(Double.parseDouble(objArray[6]==null ? "" : String.valueOf(objArray[6]))));   //设置到期收益
					oneModel.setInvestEdu(BigDecimal.valueOf(Double.parseDouble( objArray[7]==null ? "" : String.valueOf(objArray[7])  ))); //设置理财金额
					oneModel.setRepaymentMode( objArray[8]==null ? "" :String.valueOf(objArray[8]) );					  //设置还款方式
					oneModel.setBeginDate(   new SimpleDateFormat("yyyy-MM-dd").parse( (objArray[9]==null ? "" : String.valueOf(objArray[9])) )   );;	//设置计息日期
					oneModel.setEndDate(   new SimpleDateFormat("yyyy-MM-dd").parse( (objArray[10]==null ? "" : String.valueOf(objArray[10])) )   );;	//设置到期日期
					oneModel.setProdDesc( objArray[11]==null ? "" : String.valueOf(objArray[11]) );      //设置理财产品的产品描述
					oneModel.setMsf( new BigDecimal(objArray[12]==null ? "0" : String.valueOf(objArray[12])) );      //设置理财产品的年华折标系数
										
					//2.将每一行的数据添加到List<InvestorAndInvestProductModel>中去。
					resultRows.add(oneModel);
				}
			}					
		
		} catch (Exception e) {
			e.printStackTrace();
		}				
		return resultRows;			
	}

	@Override
	public List<InvestOrder> findInvestOrderListByOrderStatus() {
		StringBuffer hql = new StringBuffer();
		hql.append("from InvestOrder t where t.orderStatus = (select statusId from OrderStatus where statusCode = 'InvestOrder_SalesCustCommAgree')");
		return baseDAO.find(hql.toString());
	}

	@Override
	public List<InvestOrder> findInvestOrderListByInvestOrderIds(String investOrderIds) {
		StringBuffer hql = new StringBuffer();
		hql.append("from InvestOrder t where t.investOrderId in (");
		if(StringUtils.isNotBlank(investOrderIds)){
			String[] ids = investOrderIds.split(",");
			for (int i=0;i<ids.length;i++) {
				if(i == (ids.length-1)){
					hql.append("'"+ids[i]+"'");
				}else{
					hql.append("'"+ids[i]+"',");
				}
			}
		}else{
			hql.append("null");
		}
		hql.append(")");
		return this.baseDAO.find(hql.toString());
	}

	@Override
	public void updateInvestOrderStauts(String investOrderId, String result) {
		// TODO Auto-generated method stub
		InvestOrder investOrder = this.baseDAO.get(InvestOrder.class, investOrderId);
		OrderStatus orderStatus = orderStatusServiceImpl
				.getOrderStatusByStatusCode(InvestOrder.class.getSimpleName()
						+ "_" + result);
		investOrder.setOrderStatus(orderStatus);
	}

}
