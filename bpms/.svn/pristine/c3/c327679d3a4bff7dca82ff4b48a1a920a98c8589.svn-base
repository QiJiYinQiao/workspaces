package com.bpms.service.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.LoanOrder;
import com.bpms.model.OrderStatus;
import com.bpms.model.Organization;
import com.bpms.model.Users;
import com.bpms.service.LoanOrderService;
import com.bpms.service.LoanorderAndAccountinfoService;
import com.bpms.service.LoanorderAndCompanyService;
import com.bpms.service.LoanorderAndContactsService;
import com.bpms.service.OrderStatusService;
import com.bpms.service.OrganizationService;
import com.bpms.service.UserService;
import com.bpms.util.Constants;
import com.bpms.util.HqlUtil;
import com.bpms.util.PageUtil;

/**
 * 
 * 个人贷款业务申请单的serviceImp
 * 
 * @author 刘洪虎 2015/05/07.
 * 
 * @version V1.00.
 * 
 *          更新履历： V1.00 2015/05/07 刘洪虎 创建.
 */
@Service("loanOrderService")
public class LoanOrderServiceImpl implements LoanOrderService {
	@Autowired
	private BaseDAO<LoanOrder> baseDAO;
	@Autowired
	private OrderStatusService orderStatusService;
	// 紧急联系人与订单关系表
	@Autowired
	private LoanorderAndContactsService loanorderAndContactsServiceImpl;
	// 开户行信息与订单关系表
	@Autowired
	private LoanorderAndAccountinfoService loanorderAndAccountinfoServiceImpl;
	// 工作单位与订单关系表
	@Autowired
	private LoanorderAndCompanyService loanorderAndCompanyServiceImpl;

	// 注入用户的service
	@Autowired
	private UserService userService;

	@Autowired
	private OrganizationService organizationService;

	@Override
	public List<LoanOrder> findAllLoanOrder(Map<String, Object> map,
			PageUtil pageUtil) {
		String hql = "from LoanOrder t where 1=1";
		hql += HqlUtil.getSearchConditionsHQL("t", map);
		hql += HqlUtil.getGradeSearchConditionsHQL("t", pageUtil);
		hql += " and t.creator = " + Constants.getCurrendUser().getUserId();
		hql += " order by t.createDate desc";
		return baseDAO.find(hql, map, pageUtil.getPage(), pageUtil.getRows());
	}

	@Override
	public Long getCount(Map<String, Object> map, PageUtil pageUtil) {
		String hql = "select count(*) from LoanOrder t where 1=1";
		hql += HqlUtil.getSearchConditionsHQL("t", map);
		hql += HqlUtil.getGradeSearchConditionsHQL("t", pageUtil);
		hql += " and t.creator = " + Constants.getCurrendUser().getUserId();
		return baseDAO.count(hql, map);
	}

	@Override
	public boolean persistenceLoanOrder(LoanOrder loanOrder) {
		if (StringUtils.isBlank(loanOrder.getLoanOrderId())) {
			// 获取当前用户的id
			Users user = userService.findUserById(Constants.getCurrendUser()
					.getUserId());
			// 设置订单的创建者
			loanOrder.setCreator(user.getUserId());
			// 设置创建时间
			loanOrder.setCreateDate(new Date());
			// 设置订单状态
			loanOrder.setProcessStatus("0");
			// 设置创建者所属机构
			loanOrder.setOrganizationId(user.getOrganization()
					.getOrganizationId());
			// 保存用户的信息
			baseDAO.save(loanOrder);
		} else {
			baseDAO.update(loanOrder);
		}
		return true;
	}

	@Override
	public boolean deleteLoanOrder(String loanOrderId) {
		try {
			// 解除该订单与紧急联系的关系
			loanorderAndContactsServiceImpl.deleteByLoanOrderId(loanOrderId);
			// 解除该订单与开户行信息的关系
			loanorderAndAccountinfoServiceImpl.deleteByLoanOrderId(loanOrderId);
			// 解除该订单与工作单位的关系
			loanorderAndCompanyServiceImpl.deleteByLoanOrderId(loanOrderId);
			// 删除订单
			StringBuffer hql = new StringBuffer();
			hql.append("delete from com.bpms.model.LoanOrder t where t.loanOrderId = '"
					+ loanOrderId + "'");
			baseDAO.executeHql(hql.toString());
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public void updateLoanOrderStauts(String id, String status) {
		LoanOrder loanOrder = this.baseDAO.get(LoanOrder.class, id);
		OrderStatus orderStatus = orderStatusService
				.getOrderStatusByStatusCode(LoanOrder.class.getSimpleName()
						+ "_" + status);
		loanOrder.setOrderStatus(orderStatus);
	}

	@Override
	public LoanOrder findLoanOrderById(String id) {
		return this.baseDAO.get(LoanOrder.class, id);
	}

	@Override
	public void updateLoanOrderProcessStatus(String id, String processStatus) {
		LoanOrder loanOrder = this.baseDAO.get(LoanOrder.class, id);
		loanOrder.setProcessStatus(processStatus);
	}

	@Override
	public Organization findLoanCityByOrderId(String loanOrderId) {
		LoanOrder loanOrder = findLoanOrderById(loanOrderId);
		if (loanOrder != null) {
			return findLoanCityByOrganizationId(loanOrder.getOrganizationId());
		}
		return null;
	}

	private Organization findLoanCityByOrganizationId(Integer id) {
		Organization organization = organizationService
				.findOrganizationById(id);
		if (null == organization)
			return null;
		
		if ("1".equals(organization.getRegionType())
				|| "3".equals(organization.getRegionType())) {
			return organization;
		}
		return findLoanCityByOrganizationId(organization.getPid());
	}

	@Override
	public List<LoanOrder> findLoanOrderListByOrderStatus(PageUtil pageUtil) {
		StringBuffer hql = new StringBuffer("from LoanOrder t where 1=1");
		hql.append(" and t.orderStatus.statusId= (select t2.statusId from OrderStatus t2 where t2.statusCode = 'LoanOrder_SignatoryThrough')");
		return this.baseDAO.find(hql.toString(),pageUtil);
	}

	@Override
	public Long countLoanOrderListByOrderStatus() {
		StringBuffer hql = new StringBuffer("select count(*) from LoanOrder t where 1=1");
		hql.append(" and t.orderStatus.statusId= (select t2.statusId from OrderStatus t2 where t2.statusCode = 'LoanOrder_SignatoryThrough')");
		return this.baseDAO.count(hql.toString());
	}

	@Override
	public LoanOrder findLoanOrderByLoanOrderId(String loanOrderId) {
		StringBuffer hql = new StringBuffer();
		/*hql.append("select t1.*,(select parmValue from SysParameter where parmCode = 'loan_rate') as rate,t2.dictName as qixian from LoanOrder t1 ");
		hql.append(" left join (select dictCode,dictName from SysDict tt where tt.parentId = (select codeId from SysDict where dictCode='loan_period_type')) t2 on t1.loanPeriod = t2.dictCode");
		hql.append(" where t1.loanOrderId = '"+loanOrderId+"' ");*/
		hql.append("select new LoanOrder(loanOrderId,loanerId,name,idNo,loanAmount,loanPeriod,(select parmValue from SysParameter where parmCode = 'loan_rate') as rate,repayMethod)");
		hql.append(" from LoanOrder t1 where t1.loanOrderId = '"+loanOrderId+"' ");
		return this.baseDAO.get(hql.toString(), null);
	}
}
