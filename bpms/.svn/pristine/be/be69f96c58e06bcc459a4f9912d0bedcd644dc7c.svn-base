package com.bpms.service.impl;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.InvestOrder;
import com.bpms.model.vo.InvestorAndInvestProductModel;
import com.bpms.service.InvestorSupervisionService;
import com.bpms.util.Collections;
import com.bpms.util.PageUtil;

/**
 * @ClassName: InvestorSupervisionServiceImpl 
 * @Description: 投资客户监管ServiceImpl 
 * @author ZHANGJIAN    
 * @date 2015年8月06日 上午13:31:00
 */
@Service("investorSupervisionService")
public class InvestorSupervisionServiceImpl implements InvestorSupervisionService {	
	
	@Autowired
	private BaseDAO<InvestorAndInvestProductModel> baseDAO;

	public Object[] findDueInvestorInfoDetails(PageUtil pageUtil, InvestorAndInvestProductModel model) {
		//声明一个封装结果的数组，该数组包含两部分：1、符合条件的到期客户列表List， 2、符合条件的到期客户列表的个数
		Object[] resultReturen = new Object[2];
		
		//1、符合条件的到期客户列表List -----> List<InvestorAndInvestProductModel>			
		List<InvestorAndInvestProductModel> dueInvestorList = new ArrayList<InvestorAndInvestProductModel>();		
		
		resultReturen[0] = 	dueInvestorList;
		
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT ");
			sql.append("t1.INVEST_ORDER_ID, ");
			sql.append("t2.PROD_ID, ");
			sql.append("t1.CONTRACT_NO, ");
			sql.append("t1.INVESTOR_NAME, ");
			sql.append("t1.ID_CARD, ");
			sql.append("t1.MOB_TEL, ");
			sql.append("t1.ACT_NAME, ");
			sql.append("t1.ACT_NO, ");
			sql.append("t3.PROD_NAME, ");
			sql.append("t2.INVEST_EDU, ");
			sql.append("t2.BEGIN_DATE, ");
			sql.append("t2.INTEREST_DATE, ");
			sql.append("t2.END_DATE, ");
			sql.append("t1.INVESTOR_ID ");
			sql.append("FROM ");
			sql.append("t_bp_invest_order t1 ");
			sql.append("JOIN t_bp_investOrder_and_products t2 ON t1.INVEST_ORDER_ID = t2.INVEST_ORDER_ID ");
			sql.append("JOIN t_bp_invest_products t3 ON t2.PROD_ID = t3.PROD_ID ");
			sql.append("WHERE ");
			sql.append("t2.END_DATE >= DATE_ADD(curdate(),interval -day(curdate())+1 day) AND ");        //默认查询到期日期为当月的数据。
			sql.append("t2.END_DATE <= LAST_DAY(CURDATE())");                                            //默认查询到期日期为当月的数据。
			
			if( model.getContractNo() !=null && StringUtils.isNotBlank(model.getContractNo())){	        //高级查询，过滤合同编号			
				sql.append(" AND t1.CONTRACT_NO = '" + model.getContractNo().toString().trim() + "'");
			}
			if( model.getInvestorName() != null &&  StringUtils.isNotBlank(model.getInvestorName())){	//高级查询，过滤投资者姓名			
				sql.append(" AND t1.INVESTOR_NAME LIKE '%" + model.getInvestorName().toString().trim() + "%'");
			}
			if( model.getProdId() != null &&  StringUtils.isNotBlank(model.getProdId())){	             //高级查询，过滤理财产品			
				sql.append(" AND t2.PROD_ID = '" + model.getProdId().toString().trim() + "'");
			}
			
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			
			if( model.getInterestDate01() != null && model.getInterestDate02() != null ){	             //高级查询，过滤处于计息日期01和计息日期02之间的日期
				sql.append(" AND t2.INTEREST_DATE >= '" + df.format(model.getInterestDate01()) +"'");
				sql.append(" AND t2.INTEREST_DATE <= '" + df.format(model.getInterestDate02()) +"'");								
			}
			
			if( model.getEndDate01() != null && model.getEndDate02() != null ){	             //高级查询，过滤处于到期日期01和到期日期02之间的日期
				sql.append(" AND t2.END_DATE >= '" + df.format(model.getEndDate01()) +"'");
				sql.append(" AND t2.END_DATE <= '" + df.format(model.getEndDate02()) +"'");								
			}			
			
			List<Object> list = baseDAO.findBySql(sql.toString(), pageUtil);
						
			InvestorAndInvestProductModel tmpObj = new InvestorAndInvestProductModel();
			
			if(Collections.listIsNotEmpty(list)){
				for(Object oneRowObj : list){
					Object[] rowArray = (Object[]) oneRowObj;
					InvestorAndInvestProductModel vo = (InvestorAndInvestProductModel) tmpObj.clone();
					vo.setInvestOrderId( rowArray[0]==null ? "" : String.valueOf(rowArray[0])  );     //设置投资订单ID
					vo.setProdId( rowArray[1]==null ? "" : String.valueOf(rowArray[1]) );             //设置理财产品ID
					vo.setContractNo( rowArray[2]==null ? "" : String.valueOf(rowArray[2])  );        //设置合同编号
					vo.setInvestorName( rowArray[3]==null ? "" : String.valueOf(rowArray[3])  );      //设置投资者姓名
					vo.setIdCrad( rowArray[4]==null ? "" : String.valueOf(rowArray[4])  );            //设置身份证号
					vo.setMobTel( rowArray[5]==null ? "" : String.valueOf(rowArray[5])  );            //设置联系方式
					vo.setBankName( rowArray[6]==null ? "" : String.valueOf(rowArray[6])  );          //设置开户行名称
					vo.setActNo( rowArray[7]==null ? "" : String.valueOf(rowArray[7])  );             //设置开户行帐号
					vo.setProdName( rowArray[8]==null ? "" : String.valueOf(rowArray[8])  );          //设置理财产品名称
					vo.setInvestEdu(BigDecimal.valueOf(Double.parseDouble(  rowArray[9]==null ? "" : String.valueOf(rowArray[9]) )));  //设置投资金额
					vo.setBeginDate(  new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[10]==null ? "" : String.valueOf(rowArray[10]) ) ); //设置意向投资日期
					vo.setInterestDate( new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[11]==null ? "" : String.valueOf(rowArray[11]) )  ); //设置计息日期
					vo.setEndDate(  new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[12]==null ? "" : String.valueOf(rowArray[12])  ) );  //设置到期日期
					vo.setInvestorId( rowArray[13]==null ? "" : String.valueOf(rowArray[13])  );        //设置投资人ID
					
					vo.setTotalInterest(BigDecimal.valueOf(Double.parseDouble("2")));
					vo.setTotalAmountDue(BigDecimal.valueOf(Double.parseDouble("2")));
					
					//将每一行的数据添加到List<InvestorAndInvestProductModel>中去。
					dueInvestorList.add(vo);
				}
			}
			
			//TODO:计算应付利息，totalInterest
			
			
			//TODO:计算应付本息（单位：元），totalAmountDue   
			
			
			//2、查询符合条件的到期客户列表的个数
			Long total = this.baseDAO.countBySql("SELECT COUNT(1) FROM ( "+sql.toString()+" ) AS T2");
			resultReturen[1] = 	total;
			
		} catch (Exception e) {
			e.printStackTrace();
		}			
		return resultReturen;		
		
	}

}
