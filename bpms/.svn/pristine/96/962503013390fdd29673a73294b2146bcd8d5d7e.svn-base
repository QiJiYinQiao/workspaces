package com.bpms.action;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.FileUtils;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.springframework.beans.factory.annotation.Autowired;

import com.bpms.model.Attachment;
import com.bpms.service.AttachmentService;
import com.bpms.util.DocConverter;
import com.bpms.util.SaveUploadFileUtil;
import com.bpms.view.model.DataModel;
import com.sun.jersey.api.client.UniformInterfaceException;

/**
 * 在线预览
 * 
 * @author panchuanhe 2015/6/30
 */
@Namespace("/openOfficeAction")
@Action(value = "openOfficeAction")
public class OpenOfficeAction extends BaseAction {
	private static final long serialVersionUID = 1L;

	@Autowired
	private AttachmentService attachmentService;

	private String attachmentId;

	/**
	 * 在线预览文档
	 */
	public void openOffice() {
		Attachment attachment = attachmentService
				.findAttachmentById(attachmentId);
		// 附件不存在的时候给前台提示信息
		if (null == attachment) {
			OutputJson(new DataModel("提示", "附件已经不存在！", false));
			return;
		}
		// 如果是图片则直接写到服务器上作为临时文件

		if (isImage(attachment.getFileType())) {
			// 返回信息
			OutputJson(new DataModel("提示", "转化成功！", true, getData("0",SaveUploadFileUtil.getFileSystemURL()+attachment.getAttURL())));
		}

		// 可以在线预览的文件
		else if (isOfficeFile(attachment.getFileType())) {
			saveDocToSwf(attachment);
		} else {
			OutputJson(new DataModel("提示", "此文档不支持在线预览！", true,
					getData("2", "")));
		}
	}

	/**
	 * 将office文档转化为swf并降临时文件保存到服务器
	 * 
	 * @param attachment
	 *            附件
	 * @throws IOException
	 */
	private void saveDocToSwf(Attachment attachment) {
		// 存储的路径
		String contextPath = ServletActionContext.getServletContext().getRealPath("/") + "upload";
		// attcachment.attURL = loanAttachment/2c928ac151a3646f0151a36fffc00005/2015121510215133085772.jpg
		// 源文件的名称，不带路径
		String fileName = attachment.getAttURL().split("/")[2];
		// 当前服务器的源文件存储路径
		String contextFilePath = contextPath+File.separator+ fileName;
		// 转化后的swf文件名称
		String swfFileName = fileName.split("\\.")[0]+".swf";
		// 当前服务器的swf转化文件相对目录
		String contextSwfFilePath = contextPath +File.separator+ swfFileName;
		// 转化后的swf文件名相对路径
		String swfPath =  attachment.getAttURL().split("\\.")[0] + ".swf";
		try {
			SaveUploadFileUtil.getFileFormFileSystemByPath(swfPath);
		} catch (UniformInterfaceException e) {
			// 创建转化器
			DocConverter dc = new DocConverter(contextFilePath);
			// 保存源文件到服务器
			OutputStream os = null;
			try {
				os = new FileOutputStream(new File(contextFilePath));
				os.write(FileUtils.readFileToByteArray(SaveUploadFileUtil.getFileFormFileSystemByPath(attachment.getAttURL())));
				dc.conver();
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			} catch (IOException e1) {
				e1.printStackTrace();
			}finally{
				if(os!=null){
					try {
						os.close();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}
			}
			
			// 查看转化后的文件是否存在,如果存在则将转化后的swf存储到图片服务器以备下次查看使用
			File file = new File(contextSwfFilePath);
			// 获取文件将文件写入到指定服务器
			if (file.exists()) {
				SaveUploadFileUtil.saveSwf2FileSystem(swfPath, file);
				file.delete();
			}
		}

		// 返回信息
		OutputJson(new DataModel("提示", "转化成功！", true, getData("1",SaveUploadFileUtil.getFileSystemURL() + swfPath)));
	
	}

	/**
	 * 判断是否是图片
	 * 
	 * @param fileType
	 *            文件类型
	 * @return 是图片类型返回true否则返回false
	 */

	private boolean isImage(String fileType) {
		Pattern p = Pattern.compile("(JPEG|jpeg|JPG|jpg|GIF|gif|BMP|bmp|PNG|png){1}");
		Matcher m = p.matcher(fileType);
		return m.matches();
	}

	/**
	 * 判断是不是在线预览的支持的文件格式
	 * 
	 * @param fileType
	 *            文件类型
	 * @return 是在线预览的文件格式返回true否则返回false
	 */
	private boolean isOfficeFile(String fileType) {
		Pattern p = Pattern.compile("(xlsx|docx|xls|doc|pdf|txt|ppt|pptx|wps){1}");
		Matcher m = p.matcher(fileType);
		return m.matches();
	}

	/**
	 * 组织返回值的信息
	 * 
	 * @param fileType
	 *            0：图片，1：在线预览文档，2：其他 文件类型
	 * @param filePath
	 *            文件地址
	 * @return 返回组织好的信息
	 */
	private Map<String, Object> getData(String fileType, String filePath) {
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("fileType", fileType);
		data.put("filePath", filePath);
		return data;
	}

	public String getAttachmentId() {
		return attachmentId;
	}

	public void setAttachmentId(String attachmentId) {
		this.attachmentId = attachmentId;
	}

}
