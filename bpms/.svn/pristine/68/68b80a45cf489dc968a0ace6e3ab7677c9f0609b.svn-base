package com.bpms.action;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.ActivitiObjectNotFoundException;
import org.activiti.engine.ActivitiTaskAlreadyClaimedException;
import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.beans.factory.annotation.Autowired;

import com.bpms.model.LoanOrder;
import com.bpms.service.CommonService;
import com.bpms.service.LoanOrderService;
import com.bpms.service.LoanOrderWorkFlowService;
import com.bpms.service.LoanorderAndAccountinfoService;
import com.bpms.service.LoanorderAndCompanyService;
import com.bpms.service.LoanorderAndContactsService;
import com.bpms.service.WorkFlowService;
import com.bpms.util.Constants;
import com.bpms.util.PageUtil;
import com.bpms.view.model.DataModel;
import com.bpms.view.model.GridModel;
import com.opensymphony.xwork2.ModelDriven;

/**
 * 
 * 个人贷款业务的申请单请求处理器的action
 * 
 * @author 刘洪虎 2015/05/07.
 * 
 * @version V1.00.
 * 
 *          更新履历： V1.00 2015/05/07 刘洪虎 创建.
 */
@Namespace("/loanOrder")
@Action(value = "loanOrderAction",results={@Result(name="success",location="/jsp/investOrder/debtPowerMatching.jsp")})
public class LoanOrderAction extends BaseAction implements
		ModelDriven<LoanOrder> {

	/** serialVersionUID. */
	private static final long serialVersionUID = 3658084064057123814L;

	/** 模型驱动. */
	private LoanOrder loanOrder = new LoanOrder();

	/** 备注信息. */
	private String comment;

	/** 返回值. */
	private String result;

	/** 是否通过 */
	private String processingResult;

	/** 是否涉及车贷 */
	private String isInvolvedLoanCar;

	/** 自动注入service. */
	@Autowired
	private LoanOrderService loanOrderService;

	@Autowired
	private LoanOrderWorkFlowService loanOrderWorkFlowService;

	@Autowired
	private WorkFlowService workFlowService;

	@Autowired
	private CommonService commonService;

	@Autowired
	private LoanorderAndAccountinfoService loanorderAndAccountinfoService;

	@Autowired
	private LoanorderAndCompanyService loanorderAndCompanyService;

	@Autowired
	private LoanorderAndContactsService loanorderAndContactsService;

	@Override
	public LoanOrder getModel() {
		return loanOrder;
	}

	/**
	 * 分页获取个人业务贷款列表
	 * 
	 * @return 个人业务申请单的列表的json信息
	 * @throws Exception
	 */
	public String findLoanOrderAllList() {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			if (null != searchValue && !"".equals(searchValue)) {
				map.put(searchName, Constants.GET_SQL_LIKE + searchValue
						+ Constants.GET_SQL_LIKE);
			}
			PageUtil pageUtil = new PageUtil(page, rows, searchAnds,
					searchColumnNames, searchConditions, searchVals);
			GridModel gridModel = new GridModel();
			gridModel.setRows(loanOrderService.findAllLoanOrder(map, pageUtil));
			gridModel.setTotal(loanOrderService.getCount(map, pageUtil));
			OutputJson(gridModel);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 持久化数据--保存或修改信息
	 * 
	 * @return 保存成功或保存失败
	 * @throws Exception
	 */
	public String persistenceLoanOrder() {
		OutputJson(
				getMessage(loanOrderService.persistenceLoanOrder(getModel())),
				Constants.TEXT_TYPE_PLAIN);
		return null;
	}

	/**
	 * 删除个人贷款的申请单的信息
	 * 
	 * @return 删除个人申请单是否成功
	 * @throws Exception
	 */
	public String deleteLoanOrder() {
		boolean fl = loanOrderService.deleteLoanOrder(loanOrder
				.getLoanOrderId());
		DataModel json = null;
		if (fl) {
			json = new DataModel("提示", "删除成功!", true);
		} else {
			json = new DataModel("提示", "删除失败!", false);
		}
		OutputJson(json);
		return null;
	}

	/**
	 * 启动个人贷款的流程实例
	 * 
	 * @return 启动是否成功
	 * @throws Exception
	 */
	public void saveStartProcessInstance() {
		try {

			StringBuffer message = new StringBuffer();

			// 判断开户行信息
			Long accounts = loanorderAndAccountinfoService
					.findCountByLoanOrderId(loanOrder.getLoanOrderId());
			if (accounts == 0)
				message.append("至少要有一个开户行信息。<br>");

			// 判断工作单位
			Long companys = loanorderAndCompanyService
					.findCountByLoanOrderId(loanOrder.getLoanOrderId());
			if (companys == 0)
				message.append("至少有一个工作单位。<br>");

			// 判断联系人
			Long contacts = loanorderAndContactsService
					.findCountByLoanOrderId(loanOrder.getLoanOrderId());
			if (contacts < 4)
				message.append("至少要有四个紧急联系人.<br>");

			// 判断订单信息
			LoanOrder order = loanOrderService.findLoanOrderById(loanOrder
					.getLoanOrderId());
			if (order.getLoanAmount() == null || order.getLoanMin() == null
					|| order.getLoanPeriod() == 0
					|| StringUtils.isBlank(order.getPurpose())) {
				message.append("申请订单信息不完整.<br>");
			}

			// 如果消息部位空，则直接直接进行返回
			if (message.length() > 0) {
				message.append("请您完善完订单信息再提交！！！<br>");
				OutputJson(new DataModel("提示", message.toString(), false));
				return;
			}

			OutputJson(getMessage(loanOrderWorkFlowService
					.saveStartProcessInstance(loanOrder)));
		} catch (ActivitiObjectNotFoundException e) {
			OutputJson(new DataModel("提示", "您还没有部署贷款申请流程!!", false));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 获取用户的签约任务
	 * 
	 * @return 签约任务的信息列表的json信息
	 */
	public String findAllClaimTask() {
		List<LoanOrder> rows = loanOrderWorkFlowService.findAllClaimTask(
				getFirstResult(), getMaxResults());
		// 转换显示数据
		if (null != rows && rows.size() > 0)
			for (LoanOrder loanOrder : rows) {
				String mortgageStatus = commonService.findDictName(
						"mortgage_status", loanOrder.getMortgageStatus());
				String repayMethod = commonService.findDictName("repay_method",
						loanOrder.getRepayMethod());
				if (null != mortgageStatus)
					loanOrder.setMortgageStatus(mortgageStatus);
				if (null != repayMethod)
					loanOrder.setRepayMethod(repayMethod);
			}
		Long total = loanOrderWorkFlowService.findAllClaimTaskCount();
		OutputJson(new GridModel(rows, total));
		return null;
	}

	/**
	 * 获取用户的代办任务
	 * 
	 * @return 代办任务的信息列表的json信息
	 */
	public String findAllUnClaimTask() {
		List<LoanOrder> rows = loanOrderWorkFlowService.findAllUnClaimTask(
				getFirstResult(), getMaxResults());
		// 转换显示数据
		if (null != rows && rows.size() > 0)
			for (LoanOrder loanOrder : rows) {
				String mortgageStatus = commonService.findDictName(
						"mortgage_status", loanOrder.getMortgageStatus());
				String repayMethod = commonService.findDictName("repay_method",
						loanOrder.getRepayMethod());
				if (null != mortgageStatus)
					loanOrder.setMortgageStatus(mortgageStatus);
				if (null != repayMethod)
					loanOrder.setRepayMethod(repayMethod);
			}
		Long total = loanOrderWorkFlowService.findAllUnClaimTaskCount();
		OutputJson(new GridModel(rows, total));
		return null;
	}

	/**
	 * 签约任务
	 * 
	 * @return 签约任务是否成功
	 * @throws Exception
	 */
	public String saveClaimTask() {
		try {
			loanOrderWorkFlowService.saveClaimTask(loanOrder.getTaskId());
			OutputJson(new DataModel("提示", "任务签收成功。", true));
		} catch (ActivitiTaskAlreadyClaimedException e) {
			OutputJson(new DataModel("提示", "此任务已被他人签收！！", false));
		}
		return null;
	}

	/**
	 * 根据订单的id获取当前执行任务单表单
	 * 
	 * @return
	 */
	public String findTaskFormKeyByTaskId() {
		OutputJson(workFlowService.findTaskFormKeyByTaskId(loanOrder
				.getTaskId()));
		return null;
	}

	/**
	 * 提交任务办理
	 * 
	 * @return
	 */
	public String submitTask() {
		try {
			loanOrderWorkFlowService.saveSubmitTask(loanOrder, comment, result,
					processingResult, isInvolvedLoanCar);
			OutputJson(getMessage(true));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 获取图片流
	 * 
	 * @return
	 */
	public String getDiagramResourceByTaskId() {
		try {
			workFlowService.getDiagramResourceByTaskId(loanOrder.getTaskId());
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 获取图片流
	 * 
	 * @return
	 */
	public String getDiagramResourceByLoanOrderId() {
		try {
			loanOrderWorkFlowService.getDiagramResourceByLoanOrderId(loanOrder
					.getLoanOrderId());
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 新增/更新申请贷款信息
	 */
	public String saveLoanInfo() {
		LoanOrder lo = new LoanOrder();
		String loanOrderId = loanOrder.getLoanOrderId();// 订单id
		if (StringUtils.isNotBlank(loanOrderId)) {
			lo = loanOrderService.findLoanOrderById(loanOrderId);
			lo.setLoanAmount(loanOrder.getLoanAmount());
			lo.setLoanMin(loanOrder.getLoanMin());
			lo.setLoanPeriod(loanOrder.getLoanPeriod());
			lo.setRepayMethod(loanOrder.getRepayMethod());
			lo.setPurpose(loanOrder.getPurpose());
			lo.setLoanType(loanOrder.getLoanType());
			lo.setSalesMan(loanOrder.getSalesMan());
			loanOrderService.persistenceLoanOrder(lo);
			OutputJson("{\"msg\":\"保存成功!\",\"state\":" + true + "}");
			return null;
		}
		OutputJson("{\"msg\":\"保存失败!\",\"state\":" + false + "}");
		return null;
	}

	/**
	 * 根据订单id查询申请贷款信息,驳回修改时调用该函数回显
	 * 
	 * @return
	 */
	public String queryLoanOrderById() {
		LoanOrder lo = loanOrderService.findLoanOrderById(loanOrder
				.getLoanOrderId());
		if (lo == null) {
			lo = new LoanOrder();
		}
		OutputJson(lo);
		return null;
	}

	/**
	 * 根据定订单的id获取订单的进件城市
	 * 
	 * @return
	 */
	public String findLoanCityByOrderId() {
		OutputJson(loanOrderService.findLoanCityByOrderId(loanOrder
				.getLoanOrderId()));
		return null;
	}
    /**
     * @Title: findLoanOrderListByOrderStatus 
     * @Description: TODO 根据状态查询贷款订单列表,债权匹配
     * @param @return
     * @return String
     * @throws
     */
	public String findLoanOrderListByOrderStatus(){
		PageUtil pageUtil = new PageUtil(page,rows);
		GridModel gridModel = new GridModel();
		gridModel.setRows(loanOrderService.findLoanOrderListByOrderStatus(pageUtil));
		gridModel.setTotal(loanOrderService.countLoanOrderListByOrderStatus());
		OutputJson(gridModel);
		return null;
	}
	/**
	 * @Title: findLoanOrderByLoanOrderId 
	 * @Description: TODO 根据订单id查询订单，债权
	 * @param @return
	 * @return String
	 * @throws
	 */
	public String findLoanOrderByLoanOrderId(){
		loanOrder = loanOrderService.findLoanOrderByLoanOrderId(loanOrder.getLoanOrderId());
		return "success";
	}
	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	public String getResult() {
		return result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	public String getProcessingResult() {
		return processingResult;
	}

	public void setProcessingResult(String processingResult) {
		this.processingResult = processingResult;
	}

	public String getIsInvolvedLoanCar() {
		return isInvolvedLoanCar;
	}

	public void setIsInvolvedLoanCar(String isInvolvedLoanCar) {
		this.isInvolvedLoanCar = isInvolvedLoanCar;
	}

	public LoanOrder getLoanOrder() {
		return loanOrder;
	}

	public void setLoanOrder(LoanOrder loanOrder) {
		this.loanOrder = loanOrder;
	}
    
}
