package com.bpms.service.impl;

import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.LoanContract;
import com.bpms.service.LoanContractService;

@Service("loanContractServiceImpl")
public class LoanContractServiceImpl implements LoanContractService {

	@Autowired
	private BaseDAO<LoanContract> baseDAO;

	@Override
	public boolean saveLoanContract(LoanContract loanContract) {
		if (StringUtils.isBlank(loanContract.getLcId())) {
			baseDAO.save(loanContract);
		}else{
			baseDAO.update(loanContract);
		}
		return true;
	}

	@Override
	public String findJinJianNo(String no) {
		String sql = "SELECT MAX(SUBSTRING(REPLACE(lc.CONTRACT_NO,'"
				+ no
				+ "',''),15)) FROM t_bp_loan_contract lc WHERE lc.CONTRACT_NO LIKE '"
				+ no + "%'";
		List list = baseDAO.findBySQL(sql);
		if (list.size() > 0 && null != list.get(0)) {
			String jinjianNo = (String) list.get(0);
			return String.format("%08d", (Integer.parseInt(jinjianNo) + 1));
		} else {
			return "00000000";
		}
	}

	@Override
	public LoanContract findLoanContract(String id) {
		String hql = " FROM LoanContract lc WHERE lc.lcId = '" + id + "'";
		List<LoanContract> list = baseDAO.find(hql);
		if (list.size() > 0)
			return list.get(0);
		else
			return null;
	}

	@Override
	public LoanContract findLoanContractByLoanOrderId(final String loanOrderId) {
		String hql = "from LoanContract lc where lc.loanOrderId=:loanOrderId";
		List<LoanContract> list = baseDAO.find(hql,
				new HashMap<String, Object>() {
					{
						put("loanOrderId", loanOrderId);
					}
				});
		if (list.size() > 0)
			return list.get(0);
		else
			return null;
	}
	
	@Override
	public List<Object> findLoanConractInfoModelList(Map map) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT  loh1.ASSIGNEE AS daishenwei1,loh2.ASSIGNEE AS daishenwei2,loh3.ASSIGNEE AS daishenwei3,lc.CONTRACT_NO");
		sql.append(" ,lc.LOANER_ACT_NAME,lc.LOANER_ACT_NUM,lc.LOANER_BANK_NAME,lc.CONTRACT_SIGN_DATE,lc.LOAN_BG_DATE");
		sql.append(" ,lc.LOAN_ED_DATE,lc.MONTHLY_REPAYMENT,lc.LOAN_PERIODS,lc.REMARK,lc.LOANER,lc.LOANER_IDNO,lc.LOANER_POSTAL_ADDR");
		sql.append(" ,lc.LOANER_TEL,lc.LOAN_EDU,lc.LOAN_INTEREST,fo.*  FROM");
		sql.append(" (SELECT  lo.LOAN_ORDER_ID,lo.LOAN_TYPE,lo.SALESMAN,lo.ORGANIZATION_ID,lo.HUKOU_ADDR,mo.OPERATOR_A,mo.OPERATOR_B,0 AS VISIT_FEE	");
		sql.append(" FROM t_bp_loan_order lo INNER JOIN t_bp_order_status os ON os.STATUS_CODE = 'LoanOrder_SignatoryThrough' AND lo.STATUS_ID = os.STATUS_ID");
		sql.append(" INNER JOIN t_bp_microcredit_opinion mo ON mo.LOAN_ORDER_ID = lo.LOAN_ORDER_ID UNION ");
		sql.append(" SELECT  lo.LOAN_ORDER_ID,lo.LOAN_TYPE,lo.SALESMAN,lo.ORGANIZATION_ID,lo.HUKOU_ADDR,'' AS OPERATOR_A,'' AS OPERATOR_B,far.VISIT_FEE");
		sql.append(" FROM t_bp_loan_order lo  INNER JOIN t_bp_order_status os ON os.STATUS_CODE = 'LoanOrder_SignatoryThrough' AND lo.STATUS_ID = os.STATUS_ID");
		sql.append(" INNER JOIN t_bp_final_audit_report far ON far.LOAN_ORDER_ID = lo.LOAN_ORDER_ID)  AS fo ");
		sql.append("  INNER JOIN t_bp_loan_contract lc ON lc.LOAN_ORDER_ID = fo.LOAN_ORDER_ID ");
		sql.append("  LEFT JOIN  t_bp_loan_order_his loh1 ON loh1.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh1.ROLE_ID ='10010' ");
		sql.append("  LEFT JOIN  t_bp_loan_order_his loh2 ON loh2.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh2.ROLE_ID ='10011' ");
		sql.append("LEFT JOIN  t_bp_loan_order_his loh3 ON loh3.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh3.ROLE_ID ='10012'");
		if(!map.isEmpty()){
			sql.append(" WHERE 1 = 1");
			String organizationId =  (String) map.get("organizationId");
			String loanName = (String) map.get("loanName");
			String loanBgDateS = (String) map.get("loanBgDateS");
			String loanBgDateE = (String) map.get("loanBgDateE");
			String contractNo = (String) map.get("contractNo");
			if(StringUtils.isNotEmpty(organizationId)){
				sql.append(" AND fo.ORGANIZATION_ID = '"+organizationId+"'");
			}
			if(StringUtils.isNotEmpty(loanName)){
				sql.append(" AND lc.LOANER_ACT_NAME LIKE '%"+loanName+"%' ");
			}
			if(StringUtils.isNotEmpty(loanBgDateS)){
				if(StringUtils.isNotEmpty(loanBgDateE)){
					sql.append(" AND lc.LOAN_BG_DATE BETWEEN '"+loanBgDateS+"' AND '"+loanBgDateE+"'");
				}else{
					sql.append(" AND lc.LOAN_BG_DATE = str_to_date('"+loanBgDateS+"','%Y-%m-%d')");
				}
				
			}
			if(StringUtils.isNotEmpty(contractNo)){
				sql.append("  AND lc.CONTRACT_NO LIKE '%"+contractNo+"%'");
			}
		}
		sql.append("  LIMIT "+ map.get("start")+","+map.get("number"));
		List<Object> list = this.baseDAO.findBySQL(sql.toString());
		
		return list;
	}

	@Override
	public Long getCountOfConractInfoModel(Map map) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT count(*) FROM");
		sql.append(" (SELECT  lo.LOAN_ORDER_ID,lo.LOAN_TYPE,lo.SALESMAN,lo.ORGANIZATION_ID,lo.HUKOU_ADDR,mo.OPERATOR_A,mo.OPERATOR_B,0 AS VISIT_FEE	");
		sql.append(" FROM t_bp_loan_order lo INNER JOIN t_bp_order_status os ON os.STATUS_CODE = 'LoanOrder_SignatoryThrough' AND lo.STATUS_ID = os.STATUS_ID");
		sql.append(" INNER JOIN t_bp_microcredit_opinion mo ON mo.LOAN_ORDER_ID = lo.LOAN_ORDER_ID UNION ");
		sql.append(" SELECT  lo.LOAN_ORDER_ID,lo.LOAN_TYPE,lo.SALESMAN,lo.ORGANIZATION_ID,lo.HUKOU_ADDR,'' AS OPERATOR_A,'' AS OPERATOR_B,far.VISIT_FEE");
		sql.append(" FROM t_bp_loan_order lo  INNER JOIN t_bp_order_status os ON os.STATUS_CODE = 'LoanOrder_SignatoryThrough' AND lo.STATUS_ID = os.STATUS_ID");
		sql.append(" INNER JOIN t_bp_final_audit_report far ON far.LOAN_ORDER_ID = lo.LOAN_ORDER_ID)  AS fo ");
		sql.append("  INNER JOIN t_bp_loan_contract lc ON lc.LOAN_ORDER_ID = fo.LOAN_ORDER_ID ");
		sql.append("  LEFT JOIN  t_bp_loan_order_his loh1 ON loh1.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh1.ROLE_ID ='10010' ");
		sql.append("  LEFT JOIN  t_bp_loan_order_his loh2 ON loh2.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh2.ROLE_ID ='10011' ");
		sql.append("LEFT JOIN  t_bp_loan_order_his loh3 ON loh3.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh3.ROLE_ID ='10012'");
		if(!map.isEmpty()){
			sql.append(" WHERE 1 = 1");
			String organizationId =  (String) map.get("organizationId");
			String loanName = (String) map.get("loanName");
			String loanBgDateS = (String) map.get("loanBgDateS");
			String loanBgDateE = (String) map.get("loanBgDateE");
			String contractNo = (String) map.get("contractNo");
			if(StringUtils.isNotEmpty(organizationId)){
				sql.append(" AND fo.ORGANIZATION_ID = '"+organizationId+"'");
			}
			if(StringUtils.isNotEmpty(loanName)){
				sql.append(" AND lc.LOANER_ACT_NAME LIKE '%"+loanName+"%' ");
			}
			if(StringUtils.isNotEmpty(loanBgDateS)){
				if(StringUtils.isNotEmpty(loanBgDateE)){
					sql.append(" AND lc.LOAN_BG_DATE BETWEEN '"+loanBgDateS+"' AND '"+loanBgDateE+"'");
				}else{
					sql.append(" AND lc.LOAN_BG_DATE = str_to_date('"+loanBgDateS+"','%Y-%m-%d')");
				}
				
			}
			if(StringUtils.isNotEmpty(contractNo)){
				sql.append("  AND lc.CONTRACT_NO LIKE '%"+contractNo+"%'");
			}
		}
		
		List list = baseDAO.findBySQL(sql.toString());
		BigInteger bi = (BigInteger) list.get(0);
		return bi.longValue();
	}

}
