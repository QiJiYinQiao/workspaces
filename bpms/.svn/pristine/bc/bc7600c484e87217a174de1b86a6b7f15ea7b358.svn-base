package com.bpms.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.ActivitiObjectNotFoundException;
import org.activiti.engine.ActivitiTaskAlreadyClaimedException;
import org.activiti.engine.TaskService;
import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.springframework.beans.factory.annotation.Autowired;

import com.bpms.model.LoanOrder;
import com.bpms.model.LoanOrderHis;
import com.bpms.model.Users;
import com.bpms.service.CommonService;
import com.bpms.service.LoanOrderService;
import com.bpms.service.LoanOrderWorkFlowService;
import com.bpms.service.LoanorderAndAccountinfoService;
import com.bpms.service.LoanorderAndCompanyService;
import com.bpms.service.LoanorderAndContactsService;
import com.bpms.service.UserService;
import com.bpms.service.WorkFlowService;
import com.bpms.util.Constants;
import com.bpms.util.PageUtil;
import com.bpms.view.model.DataModel;
import com.bpms.view.model.GridModel;
import com.opensymphony.xwork2.ModelDriven;

/**
 * 
 * 个人贷款业务的申请单请求处理器的action
 * 
 * @author 刘洪虎 2015/05/07.
 * 
 * @version V1.00.
 * 
 *          更新履历： V1.00 2015/05/07 刘洪虎 创建.
 */
@Namespace("/loanOrder")
@Action(value = "loanOrderAction")
public class LoanOrderAction extends BaseAction implements
		ModelDriven<LoanOrder> {

	/** serialVersionUID. */
	private static final long serialVersionUID = 3658084064057123814L;

	/** 模型驱动. */
	private LoanOrder loanOrder = new LoanOrder();

	/** 指派指定人来受理任务。 */
	private String userId;

	/** 备注标题/简述. */
	private String title;

	/** 备注信息. */
	private String comment;

	/** 返回值. */
	private String result;

	/** 是否通过 */
	private String processingResult;

	/** 是否涉及车贷 */
	/* private String isInvolvedLoanCar; */

	/** 信贷方式. */
	private String auditWay;
	
	/** 是否补调.*/
	private String auxiliary;

	/** 　用户的角色信息。 */
	private String roleCode;

	/** 制定的贷审委01 */
	private String ipclrcUser01;

	/** 制定的贷审委02 */
	private String ipclrcUser02;

	/** 制定的贷审委03 */
	private String ipclrcUser03;

	/** 电核专员的信息. */
	private String commissioner;

	/** 自动注入service. */
	@Autowired
	private LoanOrderService loanOrderService;

	@Autowired
	private LoanOrderWorkFlowService loanOrderWorkFlowService;

	@Autowired
	private WorkFlowService workFlowService;

	@Autowired
	private CommonService commonService;

	@Autowired
	protected TaskService taskService;

	@Autowired
	private LoanorderAndAccountinfoService loanorderAndAccountinfoService;

	@Autowired
	private LoanorderAndCompanyService loanorderAndCompanyService;

	@Autowired
	private LoanorderAndContactsService loanorderAndContactsService;

	@Autowired
	private UserService userService;

	@Override
	public LoanOrder getModel() {
		return loanOrder;
	}

	/**
	 * 分页获取个人业务贷款列表
	 * 
	 * @return 个人业务申请单的列表的json信息
	 * @throws Exception
	 */
	public String findLoanOrderAllList() {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			if (null != searchValue && !"".equals(searchValue)) {
				map.put(searchName, Constants.GET_SQL_LIKE + searchValue
						+ Constants.GET_SQL_LIKE);
			}
			PageUtil pageUtil = new PageUtil(page, rows, searchAnds,
					searchColumnNames, searchConditions, searchVals);
			GridModel gridModel = new GridModel();
			gridModel.setRows(loanOrderService.findAllLoanOrder(map, pageUtil));
			gridModel.setTotal(loanOrderService.getCount(map, pageUtil));
			OutputJson(gridModel);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 持久化数据--保存或修改信息
	 * 
	 * @return 保存成功或保存失败
	 * @throws Exception
	 */
	public String persistenceLoanOrder() {
		OutputJson(
				getMessage(loanOrderService.persistenceLoanOrder(getModel())),
				Constants.TEXT_TYPE_PLAIN);
		return null;
	}

	/**
	 * 删除个人贷款的申请单的信息
	 * 
	 * @return 删除个人申请单是否成功
	 * @throws Exception
	 */
	public String deleteLoanOrder() {
		boolean fl = loanOrderService.deleteLoanOrder(loanOrder
				.getLoanOrderId());
		DataModel json = null;
		if (fl) {
			json = new DataModel("提示", "删除成功!", true);
		} else {
			json = new DataModel("提示", "删除失败!", false);
		}
		OutputJson(json);
		return null;
	}

	/**
	 * 启动个人贷款的流程实例
	 * 
	 * @return 启动是否成功
	 * @throws Exception
	 */
	public void saveStartProcessInstance() {
		try {

			StringBuffer message = new StringBuffer();

			// 判断开户行信息
			Long accounts = loanorderAndAccountinfoService
					.findCountByLoanOrderId(loanOrder.getLoanOrderId());
			if (accounts == 0)
				message.append("至少要有一个开户行信息。<br>");

			// 判断工作单位
			Long companys = loanorderAndCompanyService
					.findCountByLoanOrderId(loanOrder.getLoanOrderId());
			if (companys == 0)
				message.append("至少有一个工作单位。<br>");

			// 判断联系人
			Long contacts = loanorderAndContactsService
					.findCountByLoanOrderId(loanOrder.getLoanOrderId());
			if (contacts < 6)
				message.append("至少要有六个紧急联系人.<br>");

			// 判断订单信息
			LoanOrder order = loanOrderService.findLoanOrderById(loanOrder
					.getLoanOrderId());
			if (order.getLoanAmount() == null || order.getLoanMin() == null
					|| order.getLoanPeriod() == 0
					|| StringUtils.isBlank(order.getPurpose())) {
				message.append("申请订单信息不完整.<br>");
			}

			// 如果消息部位空，则直接直接进行返回
			if (message.length() > 0) {
				message.append("请您完善完订单信息再提交！！！<br>");
				OutputJson(new DataModel("提示", message.toString(), false));
				return;
			}

			// 发起贷款申请
			loanOrderWorkFlowService.saveStartProcessInstance(loanOrder);
			OutputJson(getMessage(true));
		} catch (ActivitiObjectNotFoundException e) {
			OutputJson(new DataModel("提示", "您还没有部署贷款申请流程!!", false));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 获取用户的签约任务
	 * 
	 * @return 签约任务的信息列表的json信息
	 */
	public String findAllClaimTask() {
		List<LoanOrder> rows = loanOrderWorkFlowService.findAllClaimTask(
				getFirstResult(), getMaxResults());
		// 转换显示数据
		if (null != rows && rows.size() > 0)
			for (LoanOrder loanOrder : rows) {
				String mortgageStatus = commonService.findDictName(
						"mortgage_status", loanOrder.getMortgageStatus());
				String repayMethod = commonService.findDictName("repay_method",
						loanOrder.getRepayMethod());
				if (null != mortgageStatus)
					loanOrder.setMortgageStatus(mortgageStatus);
				if (null != repayMethod)
					loanOrder.setRepayMethod(repayMethod);
			}
		String userId = String.valueOf(Constants.getCurrendUser().getUserId());
		Long total = loanOrderWorkFlowService.findAllClaimTaskCount(userId);
		OutputJson(new GridModel(rows, total));
		return null;
	}

	/**
	 * 获取用户的代办任务
	 * 
	 * @return 代办任务的信息列表的json信息
	 */
	public String findAllUnClaimTask() {
		List<LoanOrder> rows = loanOrderWorkFlowService.findAllUnClaimTask(
				getFirstResult(), getMaxResults());
		// 转换显示数据
		if (null != rows && rows.size() > 0)
			for (LoanOrder loanOrder : rows) {
				String mortgageStatus = commonService.findDictName(
						"mortgage_status", loanOrder.getMortgageStatus());
				String repayMethod = commonService.findDictName("repay_method",
						loanOrder.getRepayMethod());
				if (null != mortgageStatus)
					loanOrder.setMortgageStatus(mortgageStatus);
				if (null != repayMethod)
					loanOrder.setRepayMethod(repayMethod);
			}
		String userId = String.valueOf(Constants.getCurrendUser().getUserId());
		Long total = loanOrderWorkFlowService.findAllUnClaimTaskCount(userId);
		OutputJson(new GridModel(rows, total));
		return null;
	}

	/**
	 * 签约任务
	 * 
	 * @return 签约任务是否成功
	 * @throws Exception
	 */
	public String saveClaimTask() {
		try {
			loanOrderWorkFlowService.saveClaimTask(loanOrder.getTaskId());
			OutputJson(new DataModel("提示", "任务签收成功。", true));
		} catch (ActivitiTaskAlreadyClaimedException e) {
			OutputJson(new DataModel("提示", "此任务已被他人签收！！", false));
		}
		return null;
	}

	/**
	 * 根据任务的ID获取任务受理人列表
	 * 
	 * @return 任务的办理人列表
	 */
	public String getIdentityLinkCandidateGroupUsers() {
		List<Users> users = loanOrderWorkFlowService.getIdentityLinkByTaskId(loanOrder.getTaskId());
		OutputJson(new GridModel(users, (long) users.size()));
		return null;
	}

	/**
	 * 指派给指定人处理
	 * 
	 * @return
	 */
	public String updateClaimTask() {
		loanOrderWorkFlowService.updateCliamTaskUser(loanOrder.getTaskId(),
				userId);
		OutputJson(new DataModel("提示", "任务指派成功。", true));
		return null;
	}

	/**
	 * 根据订单的id获取当前执行任务单表单
	 * 
	 * @return
	 */
	public String findTaskFormKeyByTaskId() {
		OutputJson(workFlowService.findTaskFormKeyByTaskId(loanOrder
				.getTaskId()));
		return null;
	}

	/**
	 * 提交任务办理
	 * 
	 * @return
	 */
	public String submitTask() {
		try {
			// 判断是否IPC组长提交，如果是则指定IPC调查人
			if ("IPCGroupLeaderThrough".equals(result)) {
				Map<String, Object> variables = new HashMap<String, Object>();
				variables.put("IPCCensorAssign", userId);
				taskService.setVariables(loanOrder.getTaskId(), variables);
			}

			// 判断是否为IPC数据提交，如果是IPC数据提交，则指定三个贷审委员
			if ("IPCData2Through".equals(result)) {
				List<String> lcrUsers = new ArrayList<String>();
				lcrUsers.add(ipclrcUser01);
				lcrUsers.add(ipclrcUser02);
				lcrUsers.add(ipclrcUser03);
				Map<String, Object> variables = new HashMap<String, Object>();
//				variables.put("ipclrcUser01", ipclrcUser01);
//				variables.put("ipclrcUser02", ipclrcUser02);
//				variables.put("ipclrcUser03", ipclrcUser03);
				variables.put("lcrUsers", lcrUsers);
				taskService.setVariables(loanOrder.getTaskId(), variables);
			}

			// 判断如果是电核专员
			if ("IPCTrialSupervisor2Through".equals(result)) {
				Map<String, Object> variables = new HashMap<String, Object>();
				variables.put("commissioner", commissioner);
				taskService.setVariables(loanOrder.getTaskId(), variables);
			}
			
			// 设置备注信息
			LoanOrderHis his = new LoanOrderHis();
			his.setTitle(title);
			his.setComment(comment);
			his.setProcessingResult(processingResult);
			his.setAuditWay(auditWay);
			his.setAuxiliary(auxiliary);

			loanOrderWorkFlowService.saveSubmitTask(result, loanOrder, his);
			OutputJson(getMessage(true));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 获取图片流
	 * 
	 * @return
	 */
	public String getDiagramResourceByTaskId() {
		try {
			workFlowService.getDiagramResourceByTaskId(loanOrder.getTaskId());
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 获取图片流
	 * 
	 * @return
	 */
	public String getDiagramResourceByLoanOrderId() {
		try {
			loanOrderWorkFlowService.getDiagramResourceByLoanOrderId(loanOrder
					.getLoanOrderId());
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 新增/更新申请贷款信息
	 */
	public String saveLoanInfo() {
		LoanOrder lo = new LoanOrder();
		String loanOrderId = loanOrder.getLoanOrderId();// 订单id
		if (StringUtils.isNotBlank(loanOrderId)) {
			lo = loanOrderService.findLoanOrderById(loanOrderId);
			lo.setLoanAmount(loanOrder.getLoanAmount());
			lo.setLoanMin(loanOrder.getLoanMin());
			lo.setLoanPeriod(loanOrder.getLoanPeriod());
			lo.setRepayMethod(loanOrder.getRepayMethod());
			lo.setPurpose(loanOrder.getPurpose());
			lo.setLoanType(loanOrder.getLoanType());
			lo.setSalesMan(loanOrder.getSalesMan());
			loanOrderService.persistenceLoanOrder(lo);
			OutputJson("{\"msg\":\"保存成功!\",\"state\":" + true + "}");
			return null;
		}
		OutputJson("{\"msg\":\"保存失败!\",\"state\":" + false + "}");
		return null;
	}

	/**
	 * 根据订单id查询申请贷款信息,驳回修改时调用该函数回显
	 * 
	 * @return
	 */
	public String queryLoanOrderById() {
		LoanOrder lo = loanOrderService.findLoanOrderById(loanOrder
				.getLoanOrderId());
		if (lo == null) {
			lo = new LoanOrder();
		}
		OutputJson(lo);
		return null;
	}

	/**
	 * 获取财富的任务个数
	 * 
	 * @return 财富的任务个数
	 */
	public String findLoanTaskCount() {
		String userId = String.valueOf(Constants.getCurrendUser().getUserId());
		Long unClaimTaskCount = loanOrderWorkFlowService
				.findAllUnClaimTaskCount(userId);
		Long claimTaskCount = loanOrderWorkFlowService
				.findAllClaimTaskCount(userId);
		Map<String, Object> taskCoutMap = new HashMap<String, Object>();
		taskCoutMap.put("unClaimTaskCount", unClaimTaskCount);
		taskCoutMap.put("claimTaskCount", claimTaskCount);
		OutputJson(taskCoutMap);
		return null;
	}

	/**
	 * 根据定订单的id获取订单的进件城市
	 * 
	 * @return
	 */
	public String findLoanCityByOrderId() {
		OutputJson(loanOrderService.findLoanCityByOrderId(loanOrder
				.getLoanOrderId()));
		return null;
	}

	/**
	 * 获取下一个结点的候选人
	 * 
	 * @return
	 */
	public String findCandidatePersons() {
		List<Users> rows = loanOrderService.findCadidatePersons(roleCode,
				loanOrder.getLoanOrderId());
		long total = rows.size();
		OutputJson(new GridModel(rows, total));
		return null;
	}

	/**
	 * 获取下一个结点的候选人
	 * 
	 * @return
	 */
	public String findCandidatePersonsByCode() {
		List<Users> rows = loanOrderService.findCadidatePersons(roleCode);
		long total = rows.size();
		OutputJson(new GridModel(rows, total));
		return null;
	}

	/**
	 * @Title: findLoanOrderListByOrderStatus
	 * @Description: TODO 根据状态查询贷款订单列表,债权匹配
	 * @param @return
	 * @return String
	 * @throws
	 */
	public String findLoanOrderListByOrderStatus() {
		PageUtil pageUtil = new PageUtil(page, rows);
		GridModel gridModel = new GridModel();
		gridModel.setRows(loanOrderService
				.findLoanOrderListByOrderStatus(pageUtil));
		gridModel.setTotal(loanOrderService.countLoanOrderListByOrderStatus());
//		OutputJson(gridModel);
		OutputJson2(gridModel);
		return null;
	}

	/**
	 * 获取订单申请列表
	 */
	public void queryLoanOrderByCondicions() {
		try {
			// 设置查询参数
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("creator", Constants.getCurrendUser().getUserId());
			map.put("name", loanOrder.getName());
			map.put("idNo", loanOrder.getIdNo());
			map.put("mobileTel", loanOrder.getMobileTel());
			map.put("loanType", loanOrder.getLoanType());
			map.put("start", getFirstResult());
			map.put("end", getRows());

			// 分页查询
			GridModel gridModel = new GridModel();
			gridModel.setRows(loanOrderService.findLoanOrderList(map));
			gridModel.setTotal(loanOrderService.findLoanOrderListCount(map));
			OutputJson(gridModel);
		} catch (Exception e) {
		}
	}
	/**
	 * 到处IPC业务统计报表信息
	 * @return
	 */
	public void exportIPCCountExcel() {
		try {
			Map<String, Object> param = new HashMap<String, Object>();
			param.put("loanOrderId", loanOrder.getLoanOrderId());
			loanOrderService.exportIPCCountExcel(param);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	public String getResult() {
		return result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	public String getProcessingResult() {
		return processingResult;
	}

	public void setProcessingResult(String processingResult) {
		this.processingResult = processingResult;
	}

	/*
	 * public String getIsInvolvedLoanCar() { return isInvolvedLoanCar; }
	 * 
	 * public void setIsInvolvedLoanCar(String isInvolvedLoanCar) {
	 * this.isInvolvedLoanCar = isInvolvedLoanCar; }
	 */

	public LoanOrder getLoanOrder() {
		return loanOrder;
	}

	public void setLoanOrder(LoanOrder loanOrder) {
		this.loanOrder = loanOrder;
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public String getRoleCode() {
		return roleCode;
	}

	public void setRoleCode(String roleCode) {
		this.roleCode = roleCode;
	}

	public String getIpclrcUser01() {
		return ipclrcUser01;
	}

	public void setIpclrcUser01(String ipclrcUser01) {
		this.ipclrcUser01 = ipclrcUser01;
	}

	public String getIpclrcUser02() {
		return ipclrcUser02;
	}

	public void setIpclrcUser02(String ipclrcUser02) {
		this.ipclrcUser02 = ipclrcUser02;
	}

	public String getIpclrcUser03() {
		return ipclrcUser03;
	}

	public void setIpclrcUser03(String ipclrcUser03) {
		this.ipclrcUser03 = ipclrcUser03;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getAuditWay() {
		return auditWay;
	}

	public void setAuditWay(String auditWay) {
		this.auditWay = auditWay;
	}

	public String getCommissioner() {
		return commissioner;
	}

	public void setCommissioner(String commissioner) {
		this.commissioner = commissioner;
	}

	public String getAuxiliary() {
		return auxiliary;
	}

	public void setAuxiliary(String auxiliary) {
		this.auxiliary = auxiliary;
	}

}
