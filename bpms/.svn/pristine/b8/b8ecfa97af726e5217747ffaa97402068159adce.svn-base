package com.bpms.service.impl;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.vo.InvestorAndInvestProductModel;
import com.bpms.service.InvestorSupervisionService;
import com.bpms.util.Collections;
import com.bpms.util.PageUtil;

/**
 * @ClassName: InvestorSupervisionServiceImpl 
 * @Description: 投资客户监管ServiceImpl 
 * @author ZHANGJIAN    
 * @date 2015年8月06日 上午13:31:00
 */
@Service("investorSupervisionService")
public class InvestorSupervisionServiceImpl implements InvestorSupervisionService {	
	
	@Autowired
	private BaseDAO<InvestorAndInvestProductModel> baseDAO;
	
	/**
	 * 计算一笔投资的 利息
	 * @param valueObj InvestorAndInvestProductModel
	 * @return BigDecimal 一笔投资的利息
	 */
	public BigDecimal calculateInterestRevenue(InvestorAndInvestProductModel valueObj){
		BigDecimal investEdu = valueObj.getInvestEdu();    //获取一笔投资的投资额度
		BigDecimal ars = valueObj.getArs();                //获取年化收益率
		Integer lendingCycle = valueObj.getLendingCycle(); //获取出借周期
		
		int int01 = 360/lendingCycle;	
		BigDecimal shengYuJinE = investEdu.divide(BigDecimal.valueOf(int01));
		BigDecimal result = shengYuJinE.multiply(ars);
		return result;
	}
	
	/**
	 * 计算一笔投资的 “利息总额”(推荐使用该方法)
	 * @author ZHANGJIAN
	 * @param model
	 * @return
	 */
	public BigDecimal calculateTotalInterest(InvestorAndInvestProductModel model){
		BigDecimal investEdu = model.getInvestEdu();    //获取一笔投资的投资额度
		BigDecimal ars = model.getArs();                //获取年化收益率
		Integer lendingCycle = model.getLendingCycle(); //获取出借周期
		
		//获取一笔投资的“年化利息（即假设该笔投资的周期为1年，按照当前年化收益率，计算后的总利息）”
		BigDecimal annualizedRevenue = investEdu.multiply(ars);
		//获取“年化收益”每一天的平均利息
//		BigDecimal daysOneYear = new BigDecimal("360");
		BigDecimal dailyRevenue = annualizedRevenue.divide(BigDecimal.valueOf(Long.parseLong("360")), 4);
		//根据该理财产品的投资周期，计算“利息总额”。
		BigDecimal totalInterest = dailyRevenue.multiply(new BigDecimal(lendingCycle));
		
		return totalInterest;
	}
	
	
	/**
	 * 计算一笔投资的 本金 + 本息总和
	 * @param valueObj InvestorAndInvestProductModel
	 * @return BigDecimal 一笔投资的本息总和
	 */
	public BigDecimal calculateTotalRevenue(InvestorAndInvestProductModel valueObj){

		return valueObj.getInvestEdu().add(valueObj.getTotalInterest());
		//声明一个
//		BigDecimal totalAmountDue = new BigDecimal("0");
		
		//获取利息					
	}	
	
	
	
	/**
	 * 获取 “到期客户明细” 信息。
	 *     1、描述：查询当月到期客户明细的前提是：投资订单已经被“销客专员”审批通过。
	 *       SQL条件： ... JOIN T_BP_ORDER_STATUS os ... WHERE os.STATUS_CODE = 'InvestOrder_SalesCustCommAgree' 
	 *       
	 *     2、必须是当月到期的客户。
	 * @return
	 */	
	public Object[] findDueInvestorInfoDetails(PageUtil pageUtil, InvestorAndInvestProductModel model) {
		//声明一个封装结果的数组，该数组包含两部分：1、符合条件的到期客户列表List， 2、符合条件的到期客户列表的个数
		Object[] resultReturen = new Object[2];
		
		//1、符合条件的到期客户列表List -----> List<InvestorAndInvestProductModel>			
		List<InvestorAndInvestProductModel> dueInvestorList = new ArrayList<InvestorAndInvestProductModel>();		
		
		resultReturen[0] = 	dueInvestorList;
		
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT ");
			sql.append("t1.INVEST_ORDER_ID, ");
			sql.append("t2.PROD_ID, ");
			sql.append("t1.CONTRACT_NO, ");
			sql.append("t1.INVESTOR_NAME, ");
			sql.append("t1.ID_CARD, ");
			sql.append("t1.MOB_TEL, ");
			sql.append("t1.ACT_NAME, ");
			sql.append("t1.ACT_NO, ");
			sql.append("t3.PROD_NAME, ");
			sql.append("t2.INVEST_EDU, ");
			sql.append("t2.BEGIN_DATE, ");
			sql.append("t2.INTEREST_DATE, ");
			sql.append("t2.END_DATE, ");
			sql.append("t1.INVESTOR_ID, ");
			sql.append("t3.ARS, ");
			sql.append("t3.LENDING_CYCLE ");
			sql.append("FROM ");
			sql.append("t_bp_invest_order t1 ");
			sql.append("JOIN t_bp_investOrder_and_products t2 ON t1.INVEST_ORDER_ID = t2.INVEST_ORDER_ID ");
			sql.append("JOIN t_bp_invest_products t3 ON t2.PROD_ID = t3.PROD_ID ");			
			sql.append("JOIN T_BP_ORDER_STATUS os ON t1.ORDER_STATUS = os.STATUS_ID ");					
			sql.append("WHERE 1=1 AND os.STATUS_CODE = 'InvestOrder_SalesCustCommAgree' AND ");            //投资订单状态为已经通过销客专员的审核。
//			sql.append("t2.END_DATE >= DATE_ADD(curdate(),interval -day(curdate())+1 day) AND ");        //默认查询到期日期为当月的数据。
//			sql.append("t2.END_DATE <= LAST_DAY(CURDATE())");                                            //默认查询到期日期为当月的数据。
			sql.append("t2.BEGIN_DATE <= CURDATE()");                                            //默认查询到期日期为当月的数据。		

			/** 设置高级查询的条件  **/
			if( model.getContractNo() !=null && StringUtils.isNotBlank(model.getContractNo())){	        //高级查询，过滤合同编号			
				sql.append(" AND t1.CONTRACT_NO = '" + model.getContractNo().toString().trim() + "'");
			}
			if( model.getInvestorName() != null && StringUtils.isNotBlank(model.getInvestorName())){	//高级查询，过滤投资者姓名			
				sql.append(" AND t1.INVESTOR_NAME LIKE '%" + model.getInvestorName().toString().trim() + "%'");
			}
			if( model.getProdId() != null && StringUtils.isNotBlank(model.getProdId())){	             //高级查询，过滤理财产品			
				sql.append(" AND t2.PROD_ID = '" + model.getProdId().toString().trim() + "'");
			}
			
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			
			if( model.getInterestDate01() != null && model.getInterestDate02() != null ){	             //高级查询，过滤处于计息日期01和计息日期02之间的日期
				sql.append(" AND t2.INTEREST_DATE >= '" + df.format(model.getInterestDate01()) +"'");
				sql.append(" AND t2.INTEREST_DATE <= '" + df.format(model.getInterestDate02()) +"'");								
			}
			
			if( model.getEndDate01() != null && model.getEndDate02() != null ){	             //高级查询，过滤处于到期日期01和到期日期02之间的日期
				sql.append(" AND t2.END_DATE >= '" + df.format(model.getEndDate01()) +"'");
				sql.append(" AND t2.END_DATE <= '" + df.format(model.getEndDate02()) +"'");								
			}			
			
			List<Object> list = baseDAO.findBySql(sql.toString(), pageUtil);
						
			InvestorAndInvestProductModel tmpObj = new InvestorAndInvestProductModel();
			
			if(Collections.listIsNotEmpty(list)){
				for(Object oneRowObj : list){
					Object[] rowArray = (Object[]) oneRowObj;
					InvestorAndInvestProductModel vo = (InvestorAndInvestProductModel) tmpObj.clone();
					vo.setInvestOrderId( rowArray[0]==null ? "" : String.valueOf(rowArray[0])  );     //设置投资订单ID
					vo.setProdId( rowArray[1]==null ? "" : String.valueOf(rowArray[1]) );             //设置理财产品ID
					vo.setContractNo( rowArray[2]==null ? "" : String.valueOf(rowArray[2])  );        //设置合同编号
					vo.setInvestorName( rowArray[3]==null ? "" : String.valueOf(rowArray[3])  );      //设置投资者姓名
					vo.setIdCrad( rowArray[4]==null ? "" : String.valueOf(rowArray[4])  );            //设置身份证号
					vo.setMobTel( rowArray[5]==null ? "" : String.valueOf(rowArray[5])  );            //设置联系方式
					vo.setBankName( rowArray[6]==null ? "" : String.valueOf(rowArray[6])  );          //设置开户行名称
					vo.setActNo( rowArray[7]==null ? "" : String.valueOf(rowArray[7])  );             //设置开户行帐号
					vo.setProdName( rowArray[8]==null ? "" : String.valueOf(rowArray[8])  );          //设置理财产品名称
					vo.setInvestEdu(BigDecimal.valueOf(Double.parseDouble(  rowArray[9]==null ? "" : String.valueOf(rowArray[9]) )));  //设置投资金额
					vo.setBeginDate(  new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[10]==null ? "" : String.valueOf(rowArray[10]) ) ); //设置意向投资日期
					vo.setInterestDate( new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[11]==null ? "" : String.valueOf(rowArray[11]) )  ); //设置计息日期
					vo.setEndDate(  new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[12]==null ? "" : String.valueOf(rowArray[12])  ) );  //设置到期日期
					vo.setInvestorId( rowArray[13]==null ? "" : String.valueOf(rowArray[13])  );        //设置投资人ID
					vo.setArs(BigDecimal.valueOf(Double.parseDouble( rowArray[14]==null ? "" : String.valueOf(rowArray[14]) )));     //设置年化收益率
					vo.setLendingCycle(Integer.parseInt( rowArray[15]==null ? "" : String.valueOf(rowArray[15]) ));            //设置出借周期
					
					//计算利息以及本息总和，并且将这些数据设置到vo中。					
//					vo.setTotalInterest(calculateInterestRevenue(vo));
					vo.setTotalInterest(calculateTotalInterest(vo));
					//计算本息总和，并且将本息总和数值设置到vo中。
					vo.setTotalAmountDue(calculateTotalRevenue(vo));
					
					//将每一行的数据添加到List<InvestorAndInvestProductModel>中去。
					dueInvestorList.add(vo);
				}
			}			
			
			//2、查询符合条件的到期客户列表的个数
			Long total = this.baseDAO.countBySql("SELECT COUNT(1) FROM ( "+sql.toString()+" ) AS T2");
			resultReturen[1] = 	total;
			
		} catch (Exception e) {
			e.printStackTrace();
		}			
		return resultReturen;				
	}
	
	

	/**
	 * 获取 “返息客户明细” 信息。
	 * 备注：
	 *     在SQL的where条件中，要特别注意包含以下几个条件：
	 *     1、描述：查询当月返息客户明细的前提是：投资订单已经被“销客专员”审批通过。
	 *       SQL条件： ... JOIN T_BP_ORDER_STATUS os ... WHERE os.STATUS_CODE = 'InvestOrder_SalesCustCommAgree'  
	 *     
	 *     2、描述：在没有选择高级查询条件的情况下，列表默认显示“当前月份返息的客户信息”。
	 *       SQL条件： ....JOIN t_bp_investOrder_and_products t2 ...  where t2.END_DATE > DATE_ADD(curdate(),interval -day(curdate())+29 day) 
	 *       其中，“DATE_ADD(curdate(),interval -day(curdate())+29 day”表示当前月的第29天的日期。
	 *        
	 * 	   3、描述：当要月回息的投资中，理财产品的还款方式必须为：“按月回息”，字典表中其数值为“B”。
	 * 	     SQL条件： ....JOIN t_bp_invest_products t3 ... where t3.REPAYMENT_MODE = 'B';
	 * 
	 * **/
	public Object[] findReturnInterestInvestorInfoDetails(PageUtil pageUtil,
			InvestorAndInvestProductModel model) {
		
		//声明一个封装结果的数组，该数组包含两部分：1、符合条件的返息客户列表List， 2、符合条件的到返息客户表的个数
		Object[] resultReturen = new Object[2];
		
		//1、符合条件的到期客户列表List -----> List<InvestorAndInvestProductModel>			
		List<InvestorAndInvestProductModel> dueInvestorList = new ArrayList<InvestorAndInvestProductModel>();		
		
		resultReturen[0] = 	dueInvestorList;
		
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT ");
			sql.append("t1.INVEST_ORDER_ID, ");
			sql.append("t1.INVESTOR_ID, ");
			sql.append("t2.PROD_ID, ");
			sql.append("t1.CONTRACT_NO, ");
			sql.append("t1.SIGN_DATE, ");
			sql.append("t1.INVESTOR_NAME, ");
			sql.append("t1.ID_CARD, ");
			sql.append("t1.MOB_TEL, ");
			sql.append("t1.ACT_NAME, ");
			sql.append("t1.ACT_NO, ");
			sql.append("t3.PROD_NAME, ");
			sql.append("t3.LENDING_CYCLE, ");
			sql.append("t3.ARS, ");
			sql.append("t2.INVEST_EDU, ");
			sql.append("t2.INTEREST_DATE, ");
			sql.append("t2.END_DATE, ");
			sql.append("t3.REPAYMENT_MODE ");
			sql.append("FROM t_bp_invest_order t1 ");
			sql.append("JOIN t_bp_investOrder_and_products t2 ON t1.INVEST_ORDER_ID = t2.INVEST_ORDER_ID ");
			sql.append("JOIN t_bp_invest_products t3 ON t2.PROD_ID = t3.PROD_ID ");
			sql.append("JOIN T_BP_ORDER_STATUS os ON t1.ORDER_STATUS = os.STATUS_ID ");
			sql.append("WHERE 1=1 ");
			sql.append("AND os.STATUS_CODE = 'InvestOrder_SalesCustCommAgree' ");   //投资订单状态为已经通过销客专员的审核。
			sql.append("AND t3.REPAYMENT_MODE = 'B' ");    //当要月回息的投资中，理财产品的还款方式必须为：“按月回息”
			sql.append("AND t2.END_DATE > DATE_ADD(curdate(),interval -day(curdate())+29 day)");   //列表默认显示“当前月份返息的客户信息”。			

			/** 设置高级查询的条件  **/
			if( model.getContractNo() !=null && StringUtils.isNotBlank(model.getContractNo())){	        //高级查询，过滤合同编号			
				sql.append(" AND t1.CONTRACT_NO = '" + model.getContractNo().toString().trim() + "'");
			}
			if( model.getInvestorName() != null && StringUtils.isNotBlank(model.getInvestorName())){	//高级查询，过滤投资者姓名			
				sql.append(" AND t1.INVESTOR_NAME LIKE '%" + model.getInvestorName().toString().trim() + "%'");
			}
			if( model.getProdId() != null && StringUtils.isNotBlank(model.getProdId())){	             //高级查询，过滤理财产品			
				sql.append(" AND t2.PROD_ID = '" + model.getProdId().toString().trim() + "'");
			}
			
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			
			if( model.getInterestDate01() != null && model.getInterestDate02() != null ){	 //高级查询，过滤处于计息日期01和计息日期02之间的日期
				sql.append(" AND t2.INTEREST_DATE >= '" + df.format(model.getInterestDate01()) +"'");
				sql.append(" AND t2.INTEREST_DATE <= '" + df.format(model.getInterestDate02()) +"'");								
			}
			
			if( model.getEndDate01() != null && model.getEndDate02() != null ){	             //高级查询，过滤处于到期日期01和到期日期02之间的日期
				sql.append(" AND t2.END_DATE >= '" + df.format(model.getEndDate01()) +"'");
				sql.append(" AND t2.END_DATE <= '" + df.format(model.getEndDate02()) +"'");								
			}			
			
			List<Object> list = baseDAO.findBySql(sql.toString(), pageUtil);
						
			InvestorAndInvestProductModel tmpObj = new InvestorAndInvestProductModel();
			
			if(Collections.listIsNotEmpty(list)){
				for(Object oneRowObj : list){
					Object[] rowArray = (Object[]) oneRowObj;
					InvestorAndInvestProductModel vo = (InvestorAndInvestProductModel) tmpObj.clone();
					
					vo.setInvestOrderId( rowArray[0]==null ? "" : String.valueOf(rowArray[0])  );  //设置投资订单ID
					vo.setInvestorId( rowArray[1]==null ? "" : String.valueOf(rowArray[1]) );      //设置投资人ID
					vo.setProdId( rowArray[2]==null ? "" : String.valueOf(rowArray[2]) );          //理财产品ID
					vo.setContractNo( rowArray[3]==null ? "" : String.valueOf(rowArray[3])  );        //设置合同编号
					vo.setSignDate(new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[4]==null ? "" : String.valueOf(rowArray[4]) ) ); ////设置合同签署日期
					vo.setInvestorName( rowArray[5]==null ? "" : String.valueOf(rowArray[5])  );      //设置投资者姓名
					vo.setIdCrad( rowArray[6]==null ? "" : String.valueOf(rowArray[6])  );            //设置身份证号
					vo.setMobTel( rowArray[7]==null ? "" : String.valueOf(rowArray[7])  );            //设置联系方式
					vo.setBankName( rowArray[8]==null ? "" : String.valueOf(rowArray[8])  );          //设置开户行名称
					vo.setActNo( rowArray[9]==null ? "" : String.valueOf(rowArray[9])  );             //设置开户行帐号
					vo.setProdName( rowArray[10]==null ? "" : String.valueOf(rowArray[10])  );          //设置理财产品名称
					vo.setLendingCycle(Integer.parseInt( rowArray[11]==null ? "" : String.valueOf(rowArray[11]) ));            //设置出借周期
					vo.setArs(BigDecimal.valueOf(Double.parseDouble( rowArray[12]==null ? "" : String.valueOf(rowArray[12]) )));     //设置年化收益率
					vo.setInvestEdu(BigDecimal.valueOf(Double.parseDouble(  rowArray[13]==null ? "" : String.valueOf(rowArray[13]) )));  //设置投资金额
					vo.setInterestDate( new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[14]==null ? "" : String.valueOf(rowArray[14]) )  ); //设置计息日期
					vo.setEndDate(  new SimpleDateFormat("yyyy-MM-dd").parse( rowArray[15]==null ? "" : String.valueOf(rowArray[15])  ) );  //设置到期日期
					
					//计算利息总额
//					vo.setTotalInterest(totalInterest);
					vo.setTotalInterest(calculateTotalInterest(vo));
					
					//计算月付利息
					
					
					//计算本息天数
					
					
					/*															
					
					//计算利息以及本息总和，并且将这些数据设置到vo中。					
					vo.setTotalInterest(calculateInterestRevenue(vo));
					//计算本息总和，并且将本息总和数值设置到vo中。
					vo.setTotalAmountDue(calculateTotalRevenue(vo));
*/					
					//将每一行的数据添加到List<InvestorAndInvestProductModel>中去。
					
					
					dueInvestorList.add(vo);
				}
			}			
			
			//2、查询符合条件的到期客户列表的个数
			Long total = this.baseDAO.countBySql("SELECT COUNT(1) FROM ( "+sql.toString()+" ) AS T2");
			resultReturen[1] = 	total;
			
		} catch (Exception e) {
			e.printStackTrace();
		}			
		return resultReturen;								
	}	
	

	@SuppressWarnings("unchecked")
	@Override
	public List<InvestorAndInvestProductModel> toExportExcelFindAllList(InvestorAndInvestProductModel model) {
		try {
			//获取当前时间
			String nowTime = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
			String startTime = nowTime.substring(0, nowTime.lastIndexOf("-")+1)+"01";
			String endTime = nowTime.substring(0, nowTime.lastIndexOf("-")+1)+"30";
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT");
			sql.append(" io.CONTRACT_NO as 'contractNo',");
			sql.append("io.INVESTOR_NAME as 'investorName',");
			sql.append("io.ID_CARD as 'idCrad',");
			sql.append("io.MOB_TEL as 'mobTel',");
			sql.append("io.BANK_NAME as 'bankName',");
			sql.append("io.ACT_NO as 'actNo',");
			sql.append("ips.PROD_NAME as 'prodName',");
			sql.append("ip.INVEST_EDU as 'investEdu',");
			sql.append("ips.REPAYMENT_MODE as 'repaymentMode',");
			sql.append("ips.ARS as 'ars',");
			sql.append("ips.YTM as 'ytm',");
			sql.append("ip.INTEREST_DATE as 'interestDate',");
			sql.append("ip.END_DATE as 'endDate',");
			sql.append("ips.LENDING_CYCLE as 'lendingCycle'");
			sql.append(" FROM T_BP_INVEST_ORDER io");
			sql.append(" LEFT JOIN T_BP_INVESTORDER_AND_PRODUCTS ip ON io.INVEST_ORDER_ID = ip.INVEST_ORDER_ID");
			sql.append(" LEFT JOIN T_BP_INVEST_PRODUCTS ips ON ip.PROD_ID = ips.PROD_ID");
			sql.append(" LEFT JOIN T_BP_ORDER_STATUS os ON io.ORDER_STATUS = os.STATUS_ID WHERE 1=1");
			sql.append(" AND os.STATUS_CODE = 'InvestOrder_SalesCustCommAgree'");
			if(StringUtils.isNotBlank(model.getContractNo())){//合同编号
				sql.append(" And io.CONTRACT_NO like '%"+model.getContractNo()+"%'");
			}
			if(StringUtils.isNotBlank(model.getInvestorName())){//客户姓名
				sql.append(" And io.INVESTOR_NAME like '%"+model.getInvestorName()+"%'");
			}
			if(StringUtils.isNotBlank(model.getInvestorName())){//理财产品
				sql.append(" And ip.PROD_ID like '%"+model.getProdId()+"%'");
			}
			if(model.getInterestDate01()!=null){//计息日
				sql.append(" And ip.INTEREST_DATE >= '"+new SimpleDateFormat("yyyy-MM-dd").format(model.getInterestDate01())+"'");
			}
			if(model.getInterestDate02()!=null){
				sql.append(" And ip.INTEREST_DATE <= '"+new SimpleDateFormat("yyyy-MM-dd").format(model.getInterestDate02())+"'");
			}
			if(model.getEndDate01()!=null){
				sql.append(" And ip.END_DATE >= '"+new SimpleDateFormat("yyyy-MM-dd").format(model.getEndDate01())+"'");
			}else{
				sql.append(" And ip.END_DATE >= '"+startTime+"'");
			}
			if(model.getEndDate02()!=null){
				sql.append(" AND ip.END_DATE <= '"+new SimpleDateFormat("yyyy-MM-dd").format(model.getEndDate02())+"'");
			}else{
				sql.append(" AND ip.END_DATE <= '"+endTime+"'");
			}
			List<Object[]> list = this.baseDAO.findBySQL(sql.toString());
			//最终返回的list
			List<InvestorAndInvestProductModel> modelList = new ArrayList<InvestorAndInvestProductModel>();
			if(Collections.listIsNotEmpty(list)){
				InvestorAndInvestProductModel mdl = new InvestorAndInvestProductModel();
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = list.get(i);
					InvestorAndInvestProductModel modelc = (InvestorAndInvestProductModel)mdl.clone();
					modelc.setContractNo(obj[0]==null?"":String.valueOf(obj[0]));
					modelc.setInvestorName(obj[1]==null?"":String.valueOf(obj[1]));
					modelc.setIdCrad(obj[2]==null?"":String.valueOf(obj[2]));
					modelc.setMobTel(obj[3]==null?"":String.valueOf(obj[3]));
					modelc.setBankName(obj[4]==null?"":String.valueOf(obj[4]));
					modelc.setActNo(obj[5]==null?"":String.valueOf(obj[5]));
					modelc.setProdName(obj[6]==null?"":String.valueOf(obj[6]));
					modelc.setInvestEdu(BigDecimal.valueOf(Double.parseDouble(obj[7]==null?"0":String.valueOf(obj[7]))));
					modelc.setRepaymentMode(obj[8]==null?"":String.valueOf(obj[8]));
					modelc.setArs(BigDecimal.valueOf(Double.parseDouble(obj[9]==null?"0":String.valueOf(obj[9]))));
					modelc.setYtm(BigDecimal.valueOf(Double.parseDouble(obj[10]==null?"0":String.valueOf(obj[10]))));
					modelc.setInterestDate(new SimpleDateFormat("yyyy-MM-dd").parse(obj[11]==null?"":String.valueOf(obj[11])));
					modelc.setEndDate(new SimpleDateFormat("yyyy-MM-dd").parse(obj[12]==null?"":String.valueOf(obj[12])));
					modelc.setLendingCycle(obj[13]==null?0:(Integer)obj[13]);
					modelc.setTotalInterest(calculateInterestRevenue(modelc));//应付利息
					modelc.setTotalAmountDue(calculateTotalRevenue(modelc));//本息和
					
					modelList.add(modelc);
				}
			}
			return modelList;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}	
}
