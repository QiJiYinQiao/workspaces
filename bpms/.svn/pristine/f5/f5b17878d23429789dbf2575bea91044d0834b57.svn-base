package com.bpms.service.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.LoanOrder;
import com.bpms.model.vo.InvestorAndInvestProductModel;
import com.bpms.model.vo.LoanOrderModel;
import com.bpms.service.DebtMatchingService;
import com.bpms.util.Collections;


/**
 * @ClassName: DebtMatchingServiceImpl 
 * @Description: 债券匹配Service实现类
 * @author ZHANGJIAN 
 * @date 2015年8月19日  
 */
@Service("debtMatchingService")
public class DebtMatchingServiceImpl implements DebtMatchingService {
	
	@Autowired
	public BaseDAO<LoanOrder> baseDAO;
	
	@Autowired	
	public BaseDAO<InvestorAndInvestProductModel> baseDAO02;		

	@Override
	public LoanOrderModel findLoanOrderByLoanOrderId(String loanOrderId) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT sp.PARM_VALUE AS '利率',");
		sql.append("lc.LOAN_ED_DATE as '到期日期',");
		sql.append("t.`NAME` as '姓名',");
		sql.append("t.ID_NO as '证件号码',");
		sql.append("t.LOAN_AMOUNT as '贷款金额',");
		sql.append("t.LOAN_PERIOD as '贷款期限',");
		sql.append("t.REPAY_METHOD as '还款方式',");
		sql.append("t.LOAN_ORDER_ID as '订单id',");
		sql.append("t.LOANER_ID as '贷款人id'");
		sql.append(" FROM T_BP_LOAN_ORDER t,T_SYS_PARAMETER sp,T_BP_LOAN_CONTRACT lc WHERE 1=1");
		sql.append(" AND t.LOAN_ORDER_ID = '"+loanOrderId+"'");
		sql.append(" AND sp.PARM_CODE = 'loan_rate'");
		sql.append(" AND t.LOAN_ORDER_ID = lc.LOAN_ORDER_ID");
		List<Object[]> list = baseDAO.findBySQL(sql.toString());
		//需要返回的实体类
		LoanOrderModel model = new LoanOrderModel();
		if(Collections.listIsNotEmpty(list)){
			Object[] obj = list.get(0);
			model.setRate(obj[0] == null?"":String.valueOf(obj[0]));
			model.setLoanEdDate(obj[1] == null?null:(Date)obj[1]);
			model.setName(obj[2] == null?"":String.valueOf(obj[2]));
			model.setIdNo(obj[3] == null?"":String.valueOf(obj[3]));
			model.setLoanAmount(obj[4] == null?new BigDecimal(0):(BigDecimal)obj[4]);
			model.setLoanPeriod(obj[5] == null?0:(Integer)obj[5]);
			model.setRepayMethod(obj[6] == null?"":String.valueOf(obj[6]));
			model.setLoanOrderId(obj[7] == null?"":String.valueOf(obj[7]));
			model.setLoanerId(obj[8] == null?"":String.valueOf(obj[8]));
		}
		return model;
	}

	@Override
	public List<InvestorAndInvestProductModel> findListByOrderStatus() {
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT ");
			sql.append("t.INVESTOR_NAME as '投资客户',");
			sql.append("t.ID_CARD as '身份证号码',");
			sql.append("ips.PROD_NAME as '理财产品',");
			sql.append("iap.INVEST_EDU as '理财金额',");
			sql.append("iap.USABLE_EDU as '可用余额',");
			sql.append("t.INVEST_ORDER_ID as '订单id',");
			sql.append("t.INVESTOR_ID as '投资人id',");
			sql.append("iap.END_DATE as '到期日期'");
			sql.append("FROM T_BP_INVEST_ORDER t ");
			sql.append("LEFT JOIN T_BP_ORDER_STATUS os ON t.ORDER_STATUS = os.STATUS_ID ");
			sql.append("LEFT JOIN T_BP_INVESTORDER_AND_PRODUCTS iap ON iap.INVEST_ORDER_ID = t.INVEST_ORDER_ID ");
			sql.append("LEFT JOIN T_BP_INVEST_PRODUCTS ips ON iap.PROD_ID = ips.PROD_ID ");
			sql.append("WHERE os.STATUS_CODE = 'InvestOrder_SalesCustCommAgree' ORDER BY iap.INVEST_EDU DESC");
			List<Object[]> list = baseDAO.findBySQL(sql.toString());
			//需要返回的
			List<InvestorAndInvestProductModel> modellist = new ArrayList<InvestorAndInvestProductModel>();
			if (Collections.listIsNotEmpty(list)) {
				InvestorAndInvestProductModel model = new InvestorAndInvestProductModel();
				for (int i = 0; i < list.size(); i++) {
					InvestorAndInvestProductModel cmodel = (InvestorAndInvestProductModel)model.clone();
					Object[] obj = list.get(i);
					cmodel.setInvestorName(obj[0] == null?"":String.valueOf(obj[0]));
					cmodel.setIdCrad(obj[1] == null?"":String.valueOf(obj[1]));
					cmodel.setProdName(obj[2] == null?"":String.valueOf(obj[2]));
					cmodel.setInvestEdu(obj[3] == null?new BigDecimal(0):(BigDecimal)obj[3]);
					cmodel.setUsableEdu(obj[4] == null?new BigDecimal(0):(BigDecimal)obj[4]);
					cmodel.setInvestOrderId(obj[5] == null?"":String.valueOf(obj[5]));
					cmodel.setInvestorId(obj[6] == null?"":String.valueOf(obj[6]));
					cmodel.setEndDate(obj[7] == null?null:(Date)obj[7]);
					modellist.add(cmodel);
				}
			}
			return modellist;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 获取自动匹配后的投资订单。
	 */	
	@Override
	public List<InvestorAndInvestProductModel> getAutoDebtMatchingData(
			String loanOrderId) {
				
		//1.根据loanOrderId获取 
		//myList.get(0) ----> 贷款总额  
		//myList.get(1) ----> 贷款截至日期
		List<String> myList = getLoanEduAndEndDateById(loanOrderId);		
		
		//2.查询满足条件的投资订单数据。(1)投资订单的endDate > 贷款订单的EndDate。 ==> ArrayList<>
		List<InvestorAndInvestProductModel> matchingOrderList = getMatchingInvestOrders(myList);
		
		//3.进行计算 ——————当用户确认保存匹配后的数据时，才进行计算。
		//(1)对关系表中的可用余额进行修改
		//(2)若用户
				
		return matchingOrderList;				
	}
	
	
	/**
	 * 根据loanOrderId， 从贷款合同表中，获取“贷款总额” 和 “贷款截止日期”
	 * @AUTHOR ZHANGJIAN
	 * @param @param loanOrderId
	 * @param @return
	 * @return List<String>
	 */
	public List<String> getLoanEduAndEndDateById(String loanOrderId){
		List<String> rtnList = new ArrayList<String>(); 		
		
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT ");
			sql.append("t2.LOAN_ORDER_ID, ");   //获取贷款订单ID			
			sql.append("t1.LOAN_AMOUNT, ");      //获取贷款总额度
			sql.append("t2.LOAN_ED_DATE ");      //获取贷款截止日期
			sql.append("FROM t_bp_loan_order t1 ");
			sql.append("INNER JOIN t_bp_loan_contract t2 ");
			sql.append("ON 	t1.LOAN_ORDER_ID = t2.LOAN_ORDER_ID ");
			sql.append("WHERE ");
			sql.append("t1.LOAN_ORDER_ID = '"+loanOrderId.toString()+"'");			
			
			List<Object[]> queryResult = this.baseDAO.findBySQL(sql.toString());
			if(Collections.listIsNotEmpty(queryResult)){
				Object[] oneRow = queryResult.get(0);
				rtnList.add( oneRow[0]==null ? "" : String.valueOf(oneRow[0]) );
				rtnList.add( oneRow[1]==null ? "" : String.valueOf(oneRow[1]) );
				rtnList.add( oneRow[2]==null ? "" : String.valueOf(oneRow[2]) );
			}			
		} catch (Exception e) {
			e.printStackTrace();
		}		
		return rtnList;
	}
	
	/**
	 * 根据贷款订单，获取能够匹配债权的投资订单。
	 * @AUTHOR ZHANGJIAN
	 * @param List args，包含贷款订单ID，贷款总额度，贷款截止日期
	 * @return List<InvestorAndInvestProductModel>
	 */	
	public List<InvestorAndInvestProductModel> getMatchingInvestOrders(List args){
		//1.获取贷款订单的ID，loanOrderId,args数组的第一个元素
		String loanOrderId = args.get(0).toString();
		//2.获取贷款截止日期，loanOrderId,args数组的第三个元素
		String loanEnDate = args.get(2).toString();	
		
		//1、能够匹配债权的投资订单List -----> List<InvestorAndInvestProductModel>			
		List<InvestorAndInvestProductModel> debtMatchInvestOrderList = new ArrayList<InvestorAndInvestProductModel>();		
		
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT ");
			sql.append("t_invest.INVESTOR_NAME, ");    //投资客户名称
			sql.append("t_invest.ID_CARD, ");          //身份证编号
			sql.append("(t_invest.INVEST_EDU - t_invest.USABLE_EDU) AS 'matchingEdu', ");  //匹配额度，即从本投资额度中匹配了多少钱给贷款
			sql.append("t_invest.USABLE_EDU, ");       //可用余额
			sql.append("t_invest.INVEST_EDU, ");       //账户总额
			sql.append("t_invest.END_DATE, ");
			sql.append("t_loan.LOAN_ORDER_ID, ");     //贷款相关的信息并没有封装到Model类中
			sql.append("t_loan.LOAN_ED_DATE ");	  //贷款相关的信息并没有封装到Model类中		
			sql.append("FROM ");
			sql.append("t_bp_loan_contract t_loan ");
			sql.append("INNER JOIN ( ");
			sql.append("SELECT ");
			sql.append("t1.INVEST_ORDER_ID, ");
			sql.append("t2.PROD_ID, ");
			sql.append("t1.INVESTOR_ID, ");
			sql.append("t1.CONTRACT_NO, ");
			sql.append("t1.INVESTOR_NAME, ");
			sql.append("t1.ID_CARD, ");
			sql.append("t2.INVEST_EDU, ");
			sql.append("t2.USABLE_EDU, ");
			sql.append("t2.END_DATE ");
			sql.append("FROM ");
			sql.append("t_bp_invest_order t1 ");
			sql.append("INNER JOIN t_bp_investOrder_and_products t2 ON t1.INVEST_ORDER_ID = t2.INVEST_ORDER_ID ");
			sql.append("INNER JOIN T_BP_ORDER_STATUS os ON t1.ORDER_STATUS = os.STATUS_ID ");
			sql.append("WHERE 1=1 ");
			sql.append("AND os.STATUS_CODE = 'InvestOrder_SalesCustCommAgree' ");
			sql.append(") t_invest ON t_invest.END_DATE > '"+loanEnDate+"' ");
			sql.append("AND t_loan.OBLI_MATCH_STATUS = '0' ");
			sql.append("AND t_loan.LOAN_ORDER_ID = '"+loanOrderId+"' ");
			sql.append("ORDER BY ");
			sql.append("t_invest.END_DATE DESC");		
			

			List<Object> list = baseDAO02.findBySQL(sql.toString());
			
			InvestorAndInvestProductModel tmpObj = new InvestorAndInvestProductModel();
			
			if(Collections.listIsNotEmpty(list)){
				for(Object oneRowObj : list){
					Object[] rowArray = (Object[]) oneRowObj;
					InvestorAndInvestProductModel vo = (InvestorAndInvestProductModel) tmpObj.clone();
					vo.setInvestorName( rowArray[0]==null ? "" : String.valueOf(rowArray[0])  );  //设置投资客户名称
					vo.setIdCrad( rowArray[1]==null ? "" : String.valueOf(rowArray[1]) );         //设置身份证编号
					vo.setMatchingEdu( rowArray[2]==null ? null : new BigDecimal(String.valueOf(rowArray[2])));  //设置匹配额度，即从本投资额度中匹配了多少钱给贷款
					vo.setUsableEdu( rowArray[3]==null ? null : new BigDecimal(String.valueOf(rowArray[3])));  //设置可用余额
					vo.setInvestEdu( rowArray[4]==null ? null : new BigDecimal(String.valueOf(rowArray[4])));  //设置帐号总额，即投资金额
					vo.setEndDate( rowArray[5]==null ? null : new SimpleDateFormat("yyyy-MM-dd").parse( String.valueOf(rowArray[5])) ); //设置投资到期日期

					debtMatchInvestOrderList.add(vo);
				}
			}												
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return debtMatchInvestOrderList;
	}

}
