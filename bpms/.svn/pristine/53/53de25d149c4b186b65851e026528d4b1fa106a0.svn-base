package com.bpms.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.LoanContract;
import com.bpms.model.vo.LoanContractInfoModel;
import com.bpms.service.LoanContractService;
import com.bpms.util.Collections;
import com.bpms.util.Constants;

@Service("loanContractServiceImpl")
public class LoanContractServiceImpl implements LoanContractService {

	@Autowired
	private BaseDAO<LoanContract> baseDAO;

	@Override
	public boolean saveLoanContract(LoanContract loanContract) {
		if (StringUtils.isBlank(loanContract.getLcId())) {
			baseDAO.save(loanContract);
		}else{
			baseDAO.update(loanContract);
		}
		return true;
	}

	@Override
	public String findJinJianNo(String no) {
		String sql = "SELECT MAX(SUBSTRING(REPLACE(lc.CONTRACT_NO,'"
				+ no
				+ "',''),15)) FROM t_bp_loan_contract lc WHERE lc.CONTRACT_NO LIKE '"
				+ no + "%'";
		List list = baseDAO.findBySQL(sql);
		if (list.size() > 0 && null != list.get(0)) {
			String jinjianNo = (String) list.get(0);
			return String.format("%08d", (Integer.parseInt(jinjianNo) + 1));
		} else {
			return "00000000";
		}
	}

	@Override
	public LoanContract findLoanContract(String id) {
		String hql = " FROM LoanContract lc WHERE lc.lcId = '" + id + "'";
		List<LoanContract> list = baseDAO.find(hql);
		if (list.size() > 0)
			return list.get(0);
		else
			return null;
	}

	@Override
	public LoanContract findLoanContractByLoanOrderId(final String loanOrderId) {
		String hql = "from LoanContract lc where lc.loanOrderId=:loanOrderId";
		List<LoanContract> list = baseDAO.find(hql,
				new HashMap<String, Object>() {
					{
						put("loanOrderId", loanOrderId);
					}
				});
		if (list.size() > 0)
			return list.get(0);
		else
			return null;
	}
	
	@Override
	public List<LoanContractInfoModel> findLoanConractInfoModelList() {
		String  sql = 
		"SELECT "
		+"	loh1.ASSIGNEE AS daishenwei1"
		+"	,loh2.ASSIGNEE AS daishenwei2"
		+"	,loh3.ASSIGNEE AS daishenwei3"
		+"	,lc.CONTRACT_NO"
		+"	,lc.LOANER_ACT_NAME"
		+"	,lc.LOANER_ACT_NUM"
		+"	,lc.LOANER_BANK_NAME"
		+"	,lc.CONTRACT_SIGN_DATE"
		+"	,lc.LOAN_BG_DATE"
		+"	,lc.LOAN_ED_DATE"
		+"	,lc.MONTHLY_REPAYMENT"
		+"	,lc.LOAN_PERIODS"
		+"	,lc.REMARK"
		+"	,lc.LOANER"
		+"	,lc.LOANER_IDNO"
		+"	,lc.LOANER_POSTAL_ADDR"
		+"	,lc.LOANER_TEL"
		+"	,lc.LOAN_EDU"
		+"	,lc.LOAN_INTEREST"
		+"	,fo.* "
		+"FROM"
		+"	("
		+"		SELECT"
		+"					lo.LOAN_ORDER_ID"
		+"					,lo.LOAN_TYPE"
		+"					,lo.SALESMAN"
		+"					,lo.ORGANIZATION_ID"
		+"					,lo.HUKOU_ADDR"
		+"					,mo.OPERATOR_A"
		+"					,mo.OPERATOR_B"
		+"					,0 AS VISIT_FEE"
		+"		FROM t_bp_loan_order lo"
		+"		INNER JOIN t_bp_order_status os ON os.STATUS_CODE = 'LoanOrder_SignatoryThrough' AND lo.STATUS_ID = os.STATUS_ID"
		+"		INNER JOIN t_bp_microcredit_opinion mo ON mo.LOAN_ORDER_ID = lo.LOAN_ORDER_ID"
		+"		UNION "
		+"		SELECT "
		+"					lo.LOAN_ORDER_ID"
		+"					,lo.LOAN_TYPE"
		+"					,lo.SALESMAN"
		+"					,lo.ORGANIZATION_ID"
		+"					,lo.HUKOU_ADDR"
		+"					,'' AS OPERATOR_A"
		+"					,'' AS OPERATOR_B"
		+"					,far.VISIT_FEE"
		+"		FROM t_bp_loan_order lo"
		+"		INNER JOIN t_bp_order_status os ON os.STATUS_CODE = 'LoanOrder_SignatoryThrough' AND lo.STATUS_ID = os.STATUS_ID"
		+"		INNER JOIN t_bp_final_audit_report far ON far.LOAN_ORDER_ID = lo.LOAN_ORDER_ID"
		+"	)  AS fo "
		+" INNER JOIN t_bp_loan_contract lc ON lc.LOAN_ORDER_ID = fo.LOAN_ORDER_ID "
		+" LEFT JOIN  t_bp_loan_order_his loh1 ON loh1.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh1.ROLE_ID ='10010' "
		+" LEFT JOIN  t_bp_loan_order_his loh2 ON loh2.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh2.ROLE_ID ='10011' "
		+" LEFT JOIN  t_bp_loan_order_his loh3 ON loh3.LOAN_ORDER_ID = fo.LOAN_ORDER_ID AND loh3.ROLE_ID ='10012' ";
		
		List<LoanContractInfoModel> contractInfoModes = new ArrayList<LoanContractInfoModel>();
		List<?> list = this.baseDAO.findBySQL(sql);
		if(Collections.listIsNotEmpty(list)){
			for (Object object : list) {
				Object[] o = (Object[]) object;
				LoanContractInfoModel infoModel = new LoanContractInfoModel();
				contractInfoModes.add(infoModel);
				infoModel.setLoanReviewRommittee1((String)o[0]);
				infoModel.setLoanReviewRommittee2((String)o[1]);
				infoModel.setLoanReviewRommittee3((String)o[2]);
				infoModel.setContractNo((String)o[3]);
				infoModel.setLoanerActName((String) o[4]);
				infoModel.setLoanerActNum((String) o[5]);
				infoModel.setLoanerBankNmae((String) o[6]);
				infoModel.setContractSignDate((Date) o[7]);
				infoModel.setLoanBgDate((Date) o[8]);
				infoModel.setLoanEdDate((Date) o[9]);
				infoModel.setMonthlyRepayment((BigDecimal) o[10]);
				infoModel.setLoanPeriod((Integer) o[11]);
				infoModel.setRemark((String) o[12]);
				infoModel.setLoanName((String) o[13]);
				infoModel.setLoanIdNo((String) o[14]);
				infoModel.setLoanCurAddr((String) o[15]);
				infoModel.setLoanMobileTel((String) o[16]);
				infoModel.setLoanEdu((BigDecimal) o[17]);
				infoModel.setLoanInterest((BigDecimal) o[18]);
				infoModel.setLoanOrderId((String) o[19]);
				infoModel.setLoanType((String) o[20]);
				infoModel.setSalesMan((String) o[21]);
				infoModel.setOrganizationId((String) o[22]);
				infoModel.setLoanHukouAddrId((String) o[23]);
				infoModel.setOperatorAId((String) o[24]);
				infoModel.setOperatorBId((String) o[25]);
				infoModel.setVisitFee((BigDecimal) o[26]);
				contractInfoModes.add(infoModel);
			}
		}
		
		
		return contractInfoModes;
	}

}
