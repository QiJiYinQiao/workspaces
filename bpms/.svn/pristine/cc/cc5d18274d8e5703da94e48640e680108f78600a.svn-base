package com.bpms.listener;

import java.util.List;

import org.activiti.engine.delegate.DelegateTask;
import org.apache.commons.lang.StringUtils;

import com.bpms.model.Role;
import com.bpms.model.Users;
import com.bpms.util.Collections;
import com.bpms.util.Constants;

/**
 * @Creater chenfl
 * @File_Name InitialAuditTaskListener.java
 * @Version v1.0
 * @Creation_Date 2015年5月25日 下午1:23:14
 * @Modifier
 * @Modified_Date
 * @Description 借款业务流程初审部门节点任务监听器
 */
@SuppressWarnings("serial")
public class LoanInitialAuditTaskListener extends BaseLoanTaskListener {

	@Override
	public String getRoleCode() {
		return Constants.LOAN_ROLE_CODE_INITIALAUDIT;
	}

	@Override
	public void notify(DelegateTask task) {
		// 设置候选人
		List<Users> users = userService.findUsersByRoleCode(getRoleCode());
		Role role = roleService.findRoleByCode(getRoleCode());
		task.createVariableLocal("role", role);

		// 获取流程变量
		String initAuditUser = (String) task.getVariable("initAuditUser");
		String result = (String) task.getVariable("result");
		
		// 判断如果是初审组长驳回或者是执行外方通过，则设定初审操作人，否则使用候选人
		boolean isResult = StringUtils.isNotBlank(initAuditUser)
				&& StringUtils.isNotBlank(result)
				&& (result.equals("InitialAuditGroupLeaderReject")
						|| result.equals("InitialVerificationGroupLeaderReject")
						|| result.equals("PerformOutboundThrough"));

		// 判断是不是执行外访通过或者是出身组长驳回
		if (isResult) {
			task.setAssignee(initAuditUser);
			sendMessageByUserId(task, initAuditUser);
		} else {
			sendMessageByUsers(task, users);
		}

		// 设置候选人
		if (Collections.listIsNotEmpty(users)) {
			for (Users user : users) {
				task.addCandidateUser(user.getUserId().toString());
			}
		}

	}
}
