package com.bpms.service.impl;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bpms.dao.BaseDAO;
import com.bpms.model.InvestOrder;
import com.bpms.model.InvestRedeem;
import com.bpms.model.vo.InvestRedeemFinanceDetails4ClientVO;
import com.bpms.mydao.invest.InvestRedeemMapper;
import com.bpms.service.InvestOrderService;
import com.bpms.service.InvestRedeemService;
import com.bpms.service.InvestRedeemWorkFlowService;
import com.bpms.util.Collections;

import common.Logger;

@Service("investRedeemService")
public class InvestRedeemServiceImpl implements InvestRedeemService {
	
	private Logger logger = Logger.getLogger(InvestRedeemServiceImpl.class);

	@Autowired
	private BaseDAO<InvestRedeem> investRedeemDao;
	
	@Autowired
	private InvestRedeemMapper investRedeemMapper; 

	@Autowired
	private InvestOrderService investOrderService;
	
	@Autowired
	private InvestRedeemWorkFlowService investRedeemWorkFlowService;	

	@Override
	public List<Map<String, Object>> findAlreadyApprovedInvestApplyList(
			Map<String, Object> param) {
		return investRedeemMapper.findAlreadyApprovedInvestApplyList(param);
	}

	@Override
	public Long countAlreadyApprovedInvestApplyList(Map<String, Object> param) {
		return investRedeemMapper.countAlreadyApprovedInvestApplyList(param);
	}

	@Override
	public List<Map<String, Object>> findInvestRedeemList(
			Map<String, Object> param) {
		return investRedeemMapper.findInvestRedeemList(param);
	}

	@Override
	public Long countInvestRedeemList(Map<String, Object> param) {
		return investRedeemMapper.countInvestRedeemList(param);
	}

	@Override
	public int updateInvestRedeemBeginDate(Map<String, Object> param) {
		return investRedeemMapper.updateInvestRedeemBeginDate(param);
	}

	@Override
	public Map<String, Object> findInvestRedeemInfo4HandleTask(
			Map<String, Object> param) {
		return investRedeemMapper.findInvestRedeemInfo4HandleTask(param);
	}
	
	/**
	 * 修改投资订单的 “流程类型”，将其类型在“投资申请流程”与“投资赎回类型”之间变换。
	 * @Title: updateInvestOrderProcessType
	 * @Description: TODO
	 * @param @return
	 * @author ZHANGJIAN
	 * @return String
	 * @throws
	 */
	@Override
	public boolean updateInvestOrderProcessType(InvestOrder investOrder) {
		boolean isSuccess = false;
		try {
			isSuccess = investOrderService.updateInvestOrderProcessType(investOrder.getInvestOrderId(), investOrder.getInvestProcessType());
			return isSuccess;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return isSuccess;
	}
	
	/**
	 * 更改投资订单的流程状态，将其由“2(已结束状态)”更改为“0(未开启状态)”
	 * @Title: updateInvestOrderProcessStatusToWeiKaiQi
	 * @author ZHANGJIAN
	 * @return String
	 * @date 2015年12月17日 上午10:00:09
	 */
	@Override
	public boolean updateInvestRedeemProcessStatus(InvestOrder investOrder) {
		boolean isSuccess = false;
		try {
			isSuccess = investOrderService.updateInvestRedeemProcessStatus(investOrder.getInvestOrderId(), investOrder.getProcessStatus());
			return isSuccess;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return isSuccess;
	}	
	
	/**
	 * 新增一笔投资赎回申请。
	 */
	@Override
	public boolean addNewInvestRedeem(InvestOrder investOrder) {		
		 //1.修改投资订单类型
		 //修改该投资业务订单表(t_bp_invest_order)表中“INVEST_PROCESS_TYPE”字段，将其由“1(代表：投资申请流程)”修改为“2(代表：投资赎回流程)”
		boolean flag01 = updateInvestOrderProcessType(investOrder);		
		
		 //2.修改投资赎回流程的流程状态
		 //修改该投资业务订单表(t_bp_invest_order)表中“PROCESS_STATUS”字段，将其修改为“0(代表：流程未开启)”
		boolean flag02 = this.updateInvestRedeemProcessStatus(investOrder); 
		
 		 //3.向t_bp_invest_redeem表中新增一条记录
    	InvestRedeem investRedeem = new InvestRedeem();
    	investRedeem.setInvestOrderId(investOrder.getInvestOrderId());
    	boolean flag03 = persistenceInvestRedeem(investRedeem);
    	
		if(true == flag01 && true == flag02 && flag03 == true){
			return true;
		}else{			
			return false;
		}		
	}

	@Override
	public boolean deleteInvestRedeemRecord(InvestOrder investOrder) {
		 //1.修改投资订单类型
		 //修改该投资业务订单表(t_bp_invest_order)表中“INVEST_PROCESS_TYPE”字段，将其由“2(代表：投资赎回流程)”修改为“1(代表：投资申请流程)”
		boolean flag01 = updateInvestOrderProcessType(investOrder);		
		
		 //2.修改投资赎回流程的流程状态
		 //修改该投资业务订单表(t_bp_invest_order)表中“PROCESS_STATUS”字段，将其修改为“2(代表：流程已结束)”
		boolean flag02 = this.updateInvestRedeemProcessStatus(investOrder); 
		
		 //3.删除t_bp_invest_redeem表中的指定记录
    	InvestRedeem investRedeem = new InvestRedeem();
    	investRedeem.setInvestOrderId(investOrder.getInvestOrderId());
    	boolean flag03 = doDeleteInvestRedeemRecord(investRedeem);
		
		if(true == flag01 && true == flag02 && flag03==true){
			return true;
		}else{			
			return false;
		}		
	}	
	
	public boolean persistenceInvestRedeem(InvestRedeem InvestRedeem) {
		try {
			
			if ( StringUtils.isBlank(InvestRedeem.getInvestRedeemId()) ) {
				investRedeemDao.save(InvestRedeem);				
			} else {								
//				investOrder.setOrderStatus(orderStatusServiceImpl.getOrderStatusByStatusCode(investOrder.getOrderStatus().getStatusCode()));
				investRedeemDao.update(InvestRedeem);				
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}
	
	/**
	 * 真正执行删除InvestRedeem记录的方法，根据传入的InvestOrderId来执行删除。
	 * @Title: doDeleteInvestRedeemRecord 
	 * @Description: TODO
	 * @param @param investRedeem
	 * @param @return
	 * @author ZHANGJIAN
	 * @return boolean
	 * @date 2015年12月24日 下午3:11:45
	 * @throws
	 */
	protected boolean doDeleteInvestRedeemRecord(InvestRedeem investRedeem){
		try {
			if(null != investRedeem.getInvestOrderId()){			
				String sql = "DELETE FROM t_bp_invest_redeem WHERE invest_order_id='"+investRedeem.getInvestOrderId()+"'";
				int rtnVal = investRedeemDao.getCurrentSession().createSQLQuery(sql).executeUpdate();
				if(rtnVal == 1){
					return true;
				}else{
					return false;
				}
			}			
		} catch (Exception e) {
			e.printStackTrace();
		}		
		return false;
	}

	
	
	@Override
	public InvestRedeem getInvestRedeemByInvestOrderId(InvestOrder investOrder) {
		try {
			if(null != investOrder.getInvestOrderId()){
				String hql = "FROM InvestRedeem t1 WHERE t1.investOrderId='"+investOrder.getInvestOrderId()+"'";
				List<InvestRedeem> rtnValList = investRedeemDao.find(hql);
				return rtnValList.size()>0 ? rtnValList.get(0) : null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	

	public boolean saveSubmitTask4InvestRedeem(InvestRedeem investRedeem, InvestOrder investOrder, String comment, String result, String processingResult) {
		
		boolean flag01 = false;
		
		//1.修改InvestRedeem数据，并且持久化（保存“回款日期”，“银行同期活期存款利率”，“实际理财天数”）
		//说明此时是“销客专员”角色的用户 办理任务。		
		if( null != investRedeem && null != investRedeem.getHuiKuanDate()){			
			//获得已存在的InvestRedeem对象
			InvestRedeem existInvestRedeemObj = this.getInvestRedeemByInvestOrderId(investOrder);
			existInvestRedeemObj.setCurDepositInterestRate(investRedeem.getCurDepositInterestRate());  //设置银行同期活期存款利率
			existInvestRedeemObj.setHuiKuanDate(investRedeem.getHuiKuanDate());  //设置回款日期
			existInvestRedeemObj.setActualInvestDays(investRedeem.getActualInvestDays());  //设置实际理财天数			
			//更新数据库中InvestRedeem信息。
			flag01 = this.persistenceInvestRedeem(existInvestRedeemObj);				
		}
		
		//2.提交流程信息
//		investRedeemWorkFlowService.saveSubmitTask(investOrder, comment, result, processingResult);						
		
		if(flag01 == true){														
			return true;
		}else{
			return false;
		}
	}
			
	
	/**
	 * 根据投资订单ID，计算投资赎回客户的信息
	 * @Title: getInvestRedeemFinanceDetailsVOByOrderId 
	 * @Description: TODO
	 * @param @param investOrderId
	 * @param @return
	 * @author ZHANGJIAN
	 * @return InvestRedeemFinanceDetails4ClientVO
	 * @date 2015年12月26日 下午5:28:41
	 * @throws
	 */
	public InvestRedeemFinanceDetails4ClientVO getInvestRedeemFinanceDetailsVOByOrderId(
			String investOrderId) {
		
		InvestRedeemFinanceDetails4ClientVO rtnObjVo = new InvestRedeemFinanceDetails4ClientVO();
		
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT ");
			sql.append("t_investOrder.INVEST_ORDER_ID AS 'investOrderId', ");
			sql.append("t_investOrder.INVESTOR_ID AS 'investorId', ");
			sql.append("t_investOrder.CONTRACT_NO AS 'contractNo', ");          //合同编号
			sql.append("t_investOrder.FINANCING_MGR AS 'financingMgr', ");      //理财顾问名称
			sql.append("t_investOrder.PROCESS_STATUS AS 'processStatus', ");         
			sql.append("t_investOrder.INVEST_PROCESS_TYPE AS 'investProcessType', ");  //投资流程类型       
			sql.append("t_investor.CH_NAME AS 'chName', ");         
			sql.append("t_investor.INVESTOR_STATUS AS 'investorStatus', ");         
			sql.append("t_products.PROD_ID AS 'prodId', ");         
			sql.append("t_products.PROD_NAME AS 'prodName', ");               //理财产品名称    
			sql.append("t_products.REPAYMENT_MODE as 'repaymentMode', ");     //理财还款方式
			sql.append("t_ivstOrder_prod.INVEST_EDU AS 'investEdu', ");       //理财金额
			sql.append("t_ivstOrder_prod.INTEREST_DATE AS 'interestDate', "); //计息日期
			sql.append("t_redeem.actual_invest_days, ");                                                 //实际理财天数
			sql.append("DATE_FORMAT(t_redeem.REDEEM_BEGIN_DATE,'%Y-%m-%d') AS 'redeemBeginDate', ");     //投资赎回申请日期
			sql.append("t_redeem.HUI_KUAN_DATE, ");                       //回款日期			
			sql.append("t_redeem.CUR_DEPOSIT_INTEREST_RATE ");           //银行同期活期存款利率			
			sql.append("FROM ");    
			sql.append("T_BP_INVEST_ORDER t_investOrder ");    
			sql.append("LEFT JOIN T_BP_INVESTOR t_investor ON t_investOrder.INVESTOR_ID = t_investor.INVESTOR_ID ");    
			sql.append("LEFT JOIN t_bp_investOrder_and_products t_ivstOrder_prod ON t_investOrder.INVEST_ORDER_ID = t_ivstOrder_prod.INVEST_ORDER_ID ");    
			sql.append("LEFT JOIN t_bp_invest_products t_products ON t_ivstOrder_prod.PROD_ID = t_products.PROD_ID ");    
			sql.append("LEFT JOIN t_bp_invest_redeem t_redeem ON t_investOrder.INVEST_ORDER_ID = t_redeem.INVEST_ORDER_ID ");    
			sql.append("WHERE 1=1 ");    
			sql.append("AND t_investor.INVESTOR_STATUS = 'A' ");    
			sql.append("AND t_investOrder.INVEST_PROCESS_TYPE = '2' ");    
			sql.append("AND t_investOrder.FINANCING_MGR = 149 ");    
			sql.append("AND t_investOrder.INVEST_ORDER_ID = '"+investOrderId+"' ");    
			
			List<Object> tmpList = this.investRedeemDao.findBySQL(sql.toString());
			
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			
			if(Collections.listIsNotEmpty(tmpList)){
				for(Object tmpVoObj : tmpList){					
					Object[] objArray = (Object[]) tmpVoObj;
					rtnObjVo.setInvestOrderId( objArray[0] == null ? "" : String.valueOf(objArray[0]) );
					rtnObjVo.setInvestorId( objArray[1] == null ? "" : String.valueOf(objArray[1]) );				
					rtnObjVo.setContractNo( objArray[2] == null ? "" : String.valueOf(objArray[2]) );
					rtnObjVo.setFinancingMgr( objArray[3] == null ? "" : String.valueOf(objArray[3]) );
					rtnObjVo.setProcessStatus( objArray[4] == null ? "" : String.valueOf(objArray[4]) );
					rtnObjVo.setInvestProcessType( objArray[5] == null ? "" : String.valueOf(objArray[5]) );   //投资流程类型
					rtnObjVo.setChName( objArray[6] == null ? "" : String.valueOf(objArray[6]) );   //投资者名字
					rtnObjVo.setInvestorStatus( objArray[7] == null ? "" : String.valueOf(objArray[7]) );   //投资者状态
					rtnObjVo.setProdId( objArray[8] == null ? "" : String.valueOf(objArray[8]) );   //理财产品ID
					rtnObjVo.setProdName( objArray[9] == null ? "" : String.valueOf(objArray[9]) );   //理财产品名字
					rtnObjVo.setRepaymentMode( objArray[10] == null ? "" : String.valueOf(objArray[10]) );   //理财还款方式
					rtnObjVo.setInvestEdu( objArray[11] == null ? null : BigDecimal.valueOf(Double.valueOf(String.valueOf(objArray[11]))) );   //理财金额
					rtnObjVo.setInterestDate( objArray[12] == null ? null : df.parse(String.valueOf(objArray[12])) );   //计息日期
					rtnObjVo.setActualInvestDays( objArray[13] == null ? null : Integer.parseInt(String.valueOf(objArray[13])) );   //实际理财天数
					rtnObjVo.setRedeemBeginDate( objArray[14] == null ? null : df.parse(String.valueOf(objArray[14])) );   //实际投资赎回申请日期								 					
					rtnObjVo.setHuiKuanDate( objArray[15] == null ? null : df.parse(String.valueOf(objArray[15])) );   //回款日期								 					
					rtnObjVo.setCurDepositInterestRate( objArray[16] == null ? null : BigDecimal.valueOf(Double.valueOf(String.valueOf(objArray[16]))) );   //银行同期活期存款利率								 					
				}
			}					
			return rtnObjVo;					
		} catch (Exception e) {
			e.printStackTrace();
		}						
		return null;
	}	
	
	/**
	 * 计算投资赎回客户的详细信息
	 * @Title: calculateInvestRedeemFinanceDetail 
	 * @Description: TODO
	 * @param @param investOrderId
	 * @author ZHANGJIAN
	 * @return void
	 * @date 2015年12月26日 下午7:01:35
	 * @throws
	 */
	public void processRedeemClientFinancialDetail(InvestRedeem investRedeem, InvestOrder investOrder){
		//在事务一致性正确的前提下，计算赎回客户明细信息，包括如下信息：			
		//(1)获得根据investOrderId，获得InvestRedeemFinanceDetails4ClientVO
		InvestRedeemFinanceDetails4ClientVO redeemDetailsObj = getInvestRedeemFinanceDetailsVOByOrderId(investOrder.getInvestOrderId());				
		InvestRedeemFinanceDetails4ClientVO redeemDetailsObj02 = redeemDetailsObj;
		//(2)开始计算违约金、服务费、已付利息、应回款、划扣日期、赎回申请日期、回款日期、理财天数等信息
		
		
	}
	
}
