package com.qqms.serviceImpl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.qqms.dao.PublicDao;
import com.qqms.model.Organization;
import com.qqms.model.OrganizationRole;
import com.qqms.model.Role;
import com.qqms.service.OrganizationService;
import com.qqms.shiro.ShiroUser;
import com.qqms.util.Constants;
import com.qqms.util.HqlUtil;
import com.qqms.viewModel.OrganizationRoleModel;
import com.qqms.viewModel.TreeModel;

/**
 * 
 * 组织机构管理ServiceImpl
 * 
 * @author 刘洪虎 2015/05/07.
 * 
 * @version V1.00.
 * 
 *          更新履历： V1.00 2015/05/07 刘洪虎 创建.
 */
@Service("organizationService")
@SuppressWarnings("unchecked")
public class OrganizationServiceImpl implements OrganizationService {

	/** 自动注入实体共同dao */
	@SuppressWarnings("rawtypes")
	@Autowired
	private PublicDao publicDao;

	public List<TreeModel> findOrganizationList() {
		String hql = "from Organization o where o.status='A'";
		List<Organization> tempList = publicDao.find(hql);
		List<TreeModel> list = new ArrayList<TreeModel>();
		for (Organization o : tempList) {
			TreeModel treeModel = new TreeModel();
			treeModel.setId(o.getOrganizationId() + HqlUtil.NULL_STRING);
			treeModel.setPid(o.getPid() == null ? null : o.getPid().toString());
			treeModel.setName(o.getFullName());
			treeModel.setState(Constants.TREE_STATUS_OPEN);
			treeModel.setIconCls(o.getIconCls());
			list.add(treeModel);
		}
		return list;
	}
	
	public List<TreeModel> findOrganizationListTree() {
		String hql = "from Organization o where o.status='A'";
		List<Organization> tempList = publicDao.find(hql);
		List<TreeModel> list = new ArrayList<TreeModel>();
		for (Organization o : tempList) {
			TreeModel treeModel = new TreeModel();
			treeModel.setId(o.getOrganizationId() + HqlUtil.NULL_STRING);
			treeModel.setPid(o.getPid() == null ? null : o.getPid().toString());
			treeModel.setName(o.getFullName());
			treeModel.setText(o.getFullName());
			treeModel.setState(Constants.TREE_STATUS_OPEN);
			treeModel.setIconCls(o.getIconCls());
			list.add(treeModel);
		}
		return getMenuModelList(new TreeModel(), list)
				.getChildren();
	}
	
	/**
	 * 将结果转化为树结构
	 * 
	 * @param parentMenuModel
	 *            制定父节点递归组树
	 * @param listMenu
	 *            源数据
	 * @return 组成树结构的数据
	 */
	private TreeModel getMenuModelList(TreeModel parentMenuModel,
			List<TreeModel> listMenu) {
		List<TreeModel> list = new ArrayList<TreeModel>();
		for (TreeModel menu : listMenu) {
			String pid = String.valueOf(parentMenuModel.getId());
			String cid = String.valueOf(menu.getPid());
			if (pid.equals(cid)) {
				list.add(menu);
				getMenuModelList(menu, listMenu);
			}
		}
		parentMenuModel.setChildren(list);
		return parentMenuModel;
	}

	public List<Organization> findOrganizationList(Integer id) {
		String hql = "from Organization o where o.status='A' ";
		if (null == id || "".equals(id)) {
			hql += " and o.pid is null";
		} else {
			hql += " and o.pid=" + id;
		}
		List<Organization> list = (List<Organization>) publicDao.find(hql);
		for (Organization organization : list) {
			organization.setOrganizationRoles(null);
		}
		return list;
	}

	public List<Organization> findOrganizationByIdList() {
		String hql = "from Organization o where o.status='A'";
		List<Organization> tempList = publicDao.find(hql);
		for (Organization organization : tempList) {
			organization.setOrganizationRoles(null);
		}
		return tempList;
	}

	public boolean persistenceOrganization(Organization o) {
		Integer userId = Constants.getCurrendUser().getUserId();
		// 维护组织机构编码
		if ("钱钱金融信息服务（北京）有限公司".equals(o.getFullName())) {
			o.setMyid("QQJRBJ");
		}

		// 维护总部、分部
		// 上层组织ID只要有财富管理中心26||借款管理中心38，部门级别就是分部否则是总部
		boolean isBranchDept = false;
		// 判断是否属于第一级（QQJRBJ）或第二级菜单
		/*
		 * if(o.getPid()!=null){
		 * if("CF".equals(o.getMyid())||"JK".equals(o.getMyid())){ //分部
		 * isBranchDept=true; }else{ Organization
		 * o1=(Organization)publicDao.get(Organization.class, o.getPid());
		 * //继续往上推看pid是否为26或38 1代表钱钱金融 while(!"QQJRBJ".equals(o1.getMyid())){
		 * if("CF".equals(o1.getMyid())||"JK".equals(o1.getMyid())){
		 * isBranchDept=true; break; }else{
		 * o1=(Organization)publicDao.get(Organization.class, o1.getPid()); } }
		 * } }
		 */
		if ("CF".equals(o.getMyid()) || "JK".equals(o.getMyid())) {
			isBranchDept = true;
		}
		if (isBranchDept == true) {
			o.setDeptLevel("1");
		} else {
			o.setDeptLevel("0");
		}
		// =====需维护功能 end======//
		String hql = "from Organization o where o.status='A' and ";
		if (null == o.getOrganizationId() || "".equals(o.getOrganizationId())) {
			o.setCreated(new Date());
			o.setLastmod(new Date());
			o.setCreater(userId);
			o.setModifyer(userId);
			o.setStatus(Constants.PERSISTENCE_STATUS);
			publicDao.save(o);
		} else {
			o.setLastmod(new Date());
			o.setModifyer(userId);
			publicDao.update(o);
		}
		return true;
	}

	@SuppressWarnings("rawtypes")
	public boolean delOrganization(Integer id) {
		String hql = "from Organization o where o.status='A' and o.pid=" + id;
		List<Organization> list = publicDao.find(hql);
		if (list.size() != 0) {
			return false;
		} else {
			String hql2 = "from Users t where t.organizeId=" + id;
			List list2 = publicDao.find(hql2);
			if (list2.size() != 0) {
				return false;
			} else {
				Organization o = (Organization) publicDao.get(
						Organization.class, id);
				o.setStatus(Constants.PERSISTENCE_DELETE_STATUS);
				o.setLastmod(new Date());
				o.setModifyer(Constants.getCurrendUser().getUserId());
				publicDao.deleteToUpdate(o);
			}
			return true;
		}
	}

	@Override
	public String getRegionTypeById(Integer id) {
		// TODO Auto-generated method stub
		String hql = "select t.regionType from Organization t where t.status='A' and t.id="
				+ id;
		String regionType = null;
		List<Object> orgList = publicDao.find(hql);
		if (orgList != null && orgList.size() > 0) {
			regionType = orgList.get(0).toString();
		}
		return regionType;
	}

	@Override
	public String getOrganizationCode(Integer id) {
		// TODO Auto-generated method stub
		// CF财富 ；JK借款 ；QT其它
		String code = null;
		Organization o = (Organization) publicDao.get(Organization.class, id);
		if ("CF".equals(o.getMyid())) {
			code = "CF";
		} else if ("JK".equals(o.getMyid())) {
			code = "JK";
		} else {
			code = "QT";
		}
		return code;
	}

	@Override
	public List<OrganizationRoleModel> findOrganiazationRolesList(
			Integer organizationId) {
		String sql = "SELECT ur.ORGANIZATION_ID,ur.ROLE_ID,ur.JOINT_ORGAN_ID FROM\n"
				+ "T_ORGANIZATION_AND_ROLE AS ur where ur.STATUS ='A' and ur.ORGANIZATION_ID="
				+ organizationId;
		List<Object> list = publicDao.findBySQL(sql);

		List<OrganizationRoleModel> listm = new ArrayList<OrganizationRoleModel>();
		for (Object object : list) {
			Object[] obj = (Object[]) object;
			OrganizationRoleModel organizationRoleModel = new OrganizationRoleModel();
			organizationRoleModel.setOrganizationId(obj[0] == null ? null
					: Integer.valueOf(obj[0].toString()));
			organizationRoleModel.setRoleId(obj[1] == null ? null : Integer
					.valueOf(obj[1].toString()));
			organizationRoleModel.setJointOrganId(obj[2] == null ? null
					: Integer.valueOf(obj[2].toString()));
			listm.add(organizationRoleModel);
		}
		return listm;
	}

	@Override
	public boolean saveOrganizationRoles(Integer organizationId,
			String isCheckedIds) {
		Organization organization = (Organization) publicDao.get(
				Organization.class, organizationId);
		Set<OrganizationRole> set = organization.getOrganizationRoles();
		Map<Integer, OrganizationRole> map = new HashMap<Integer, OrganizationRole>();
		for (OrganizationRole organizationRole : set) {
			map.put(organizationRole.getRole().getRoleId(), organizationRole);
			organizationRole.setLastmod(new Date());
			organizationRole.setStatus(Constants.PERSISTENCE_DELETE_STATUS);
			publicDao.deleteToUpdate(organizationRole);
		}
		if (!"".equals(isCheckedIds) && isCheckedIds.length() != 0) {
			String[] ids = isCheckedIds.split(",");
			ShiroUser currUser = Constants.getCurrendUser();
			for (String id : ids) {
				Integer tempId = Integer.valueOf(id.split("-")[1]);
				Role role = (Role) publicDao.get(Role.class,
						Integer.valueOf(id.split("-")[1]));
				OrganizationRole organizationRole = null;
				if (map.containsKey(tempId)) {
					organizationRole = map.get(tempId);
					if(!id.split("-")[2].equals("0")){
						organizationRole.setDjId(Integer.valueOf(id.split("-")[2]));
					}
					organizationRole.setStatus(Constants.PERSISTENCE_STATUS);
					organizationRole.setCreater(currUser.getUserId());
					organizationRole.setModifyer(currUser.getUserId());
					publicDao.update(organizationRole);
				} else {
					organizationRole = new OrganizationRole();
					organizationRole.setCreated(new Date());
					organizationRole.setLastmod(new Date());
					organizationRole.setRole(role);
					organizationRole.setOrganization(organization);
					if(!id.split("-")[2].equals("0")){
						organizationRole.setDjId(Integer.valueOf(id.split("-")[2]));
					}
					organizationRole.setCreater(currUser.getUserId());
					organizationRole.setModifyer(currUser.getUserId());
					organizationRole.setStatus(Constants.PERSISTENCE_STATUS);
					publicDao.save(organizationRole);
				}
			}
		}
		return true;
	}

	@Override
	public String getJointOrganId(String deptId, String roleId) {
		// TODO Auto-generated method stub
		String sql = "select t.JOINT_ORGAN_ID from t_organization_and_role t where 1=1 and t.`STATUS`='A' and t.ORGANIZATION_ID='"+deptId+"' and t.ROLE_ID='"+roleId+"' ";
		List<Object> objList=publicDao.findBySQL(sql);
		return objList.size()>0?objList.get(0).toString():null;
	}

}
