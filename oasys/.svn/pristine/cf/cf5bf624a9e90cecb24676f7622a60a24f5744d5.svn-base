package com.oasys.serviceImpl;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletResponse;

import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.runtime.Execution;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.apache.commons.httpclient.util.DateUtil;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.oasys.dao.PublicDao;
import com.oasys.model.BusinessTripApp;
import com.oasys.model.BusinessTripAttach;
import com.oasys.model.Organization;
import com.oasys.model.Role;
import com.oasys.model.Users;
import com.oasys.service.BusinessTripAppService;
import com.oasys.service.BusinessTripAttachService;
import com.oasys.service.OrganizationService;
import com.oasys.service.RoleService;
import com.oasys.service.UserService;
import com.oasys.service.workFlow.WorkFlowTaskService;
import com.oasys.serviceImpl.workFlow.WorkFlowBaseServiceImpl;
import com.oasys.shiro.ShiroUser;
import com.oasys.util.Collections;
import com.oasys.util.Constants;
import com.oasys.util.PageUtil;
import com.oasys.util.UniqueIdUtil;
import com.oasys.viewModel.ComboBoxModel;
import com.oasys.viewModel.WorkFlowTasksModel;
@Service(value="businessTripAppService")
public class BusinessTripAppServiceImpl extends WorkFlowBaseServiceImpl implements BusinessTripAppService {
	
	@Autowired
	private PublicDao<BusinessTripApp> publicDao;
	@Autowired
	private BusinessTripAttachService businessTripAttachService;
	@Autowired
	private WorkFlowTaskService workFlowTaskService;
	@Autowired
	private OrganizationService orgService;
	@Autowired
	private RoleService roleService;
	@Autowired
	private UserService userService;
	private String imgName;
	private String getFindHQL(BusinessTripApp businessTripApp){
		String hql = "from BusinessTripApp where 1=1 and applicantNo = "+Constants.getCurrendUser().getUserId();
		
		if(StringUtils.isNotBlank(businessTripApp.getAppDateBefore())){
			hql += " and appDate >='" + businessTripApp.getAppDateBefore()+"'";  //申请开始日期
		}
		if(StringUtils.isNotBlank(businessTripApp.getAppDateAfter())){
			hql += " and appDate <='" + businessTripApp.getAppDateAfter()+"'";  //申请结束日期
		}
		if(StringUtils.isNotBlank(businessTripApp.getProcStatus())){
			hql+=" and procStatus='"+businessTripApp.getProcStatus()+"'";
		}
		hql += " order by btaId desc";
		return hql;
	}
	@Override
	public List<BusinessTripApp> findBusinessTripAppList(PageUtil pageUtil,
			BusinessTripApp businessTripApp) {
		// TODO Auto-generated method stub
		String hql = getFindHQL(businessTripApp);
		List<BusinessTripApp> list = publicDao.find(hql, pageUtil);
		BusinessTripAttach businessTripAttach = null;
		for (BusinessTripApp businessTrip : list) {
			businessTripAttach = businessTripAttachService.findBusinessTripAttachByAppNo(businessTrip.getAppNo());
			businessTrip.setBusinessTripAttach(businessTripAttach);
			businessTrip.setUserName(userService.getUserByID(businessTrip.getApplicantNo()).getName());
			businessTrip.setAgentName(userService.getUserByID(businessTrip.getAgentNo()).getName());
			businessTrip.setDeptName(orgService.getOrgNameByID(userService.getUserByID(businessTrip.getApplicantNo()).getOrganizeId()));
		}
		return list;
	}

	@Override
	public Long findBusinessTripAppCount(BusinessTripApp businessTripApp) {
		// TODO Auto-generated method stub
		String hql = "select count(*) "+ getFindHQL(businessTripApp);
		return publicDao.count(hql);
	}
	@Override
	public boolean saveBusinessTripApp(BusinessTripApp businessTripApp) {
		// TODO Auto-generated method stub
		try {
			BusinessTripAttach businessTripAttach = businessTripApp.getBusinessTripAttach();
			businessTripAttach.setPlanBtDays(sumDays(DateUtil.formatDate(businessTripAttach.getPlanEdDtime(),"yyyy-MM-dd HH:mm:ss"),
					DateUtil.formatDate(businessTripAttach.getPlanBgDtime(), "yyyy-MM-dd HH:mm:ss")));
			businessTripApp.setBusinessTripAttach(null);
			if(businessTripApp.getBtaId()==null){
				//新增
				String appNo=UniqueIdUtil.generate("CC");
				Users user = userService.getUserByID(Constants.getCurrendUser().getUserId());
				businessTripApp.setAppNo(appNo);//申请编号
				businessTripApp.setApplicantNo(Constants.getCurrendUser().getUserId());//用户ID
				businessTripApp.setAppDate(new Date());//申请日期
				businessTripApp.setDeptNo(user.getOrganizeId());//部门ID
				businessTripApp.setProcStatus("1");
				publicDao.save(businessTripApp);
				businessTripAttach.setAppNo(appNo);
				businessTripAttachService.saveOrUpdateBusinessTripAttach(businessTripAttach);
			}else{
				//更新
				publicDao.update(businessTripApp);
				businessTripAttach.setAppNo(businessTripApp.getAppNo());
				businessTripAttach.setBtaId(businessTripApp.getBtaId());
				businessTripAttachService.saveOrUpdateBusinessTripAttach(businessTripAttach);
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}
	@Override
	public void delBusinessTripApp(String appNo) {
		// TODO Auto-generated method stub
		publicDao.executeHql("delete from BusinessTripApp where appNo = '" + appNo+"'");
		publicDao.executeHql("delete from BusinessTripAttach where appNo = '" + appNo+"'");
	}
	@Override
	public void updateBusinessTripAppProceStatus(Integer id, String status) {
		// TODO Auto-generated method stub
		BusinessTripApp businessTripApp = publicDao.get(BusinessTripApp.class, id);
		businessTripApp.setProcStatus(status);
		publicDao.saveOrUpdate(businessTripApp);
	}
	@Override
	public List<BusinessTripApp> findBusinessTripAppTask(PageUtil pageUtil,
			BusinessTripApp businessTripApp) {
		// TODO Auto-generated method stub
		WorkFlowTasksModel taskModel = new WorkFlowTasksModel();
		taskModel.setProcessKey(businessTripApp.getDefinitionKey());
		List<WorkFlowTasksModel> workList = workFlowTaskService.findAcceptTaskByGroup(taskModel);
		if(null == workList || workList.size() == 0)return new ArrayList<BusinessTripApp>();
		String hql ="from BusinessTripApp where btaId in ("+getTaskEMPids(workList)+") ";
		if(StringUtils.isNotBlank(businessTripApp.getAppDateBefore())){
			hql += " and appDate >='" + businessTripApp.getAppDateBefore()+"'";  //申请开始日期
		}
		if(StringUtils.isNotBlank(businessTripApp.getAppDateAfter())){
			hql += " and appDate <='" + businessTripApp.getAppDateAfter()+"'";  //申请结束日期
		}
		if(StringUtils.isNotBlank(businessTripApp.getProcStatus())){
			hql+=" and procStatus='"+businessTripApp.getProcStatus()+"'";
		}
		hql += " order by btaId desc";
		List<BusinessTripApp> businessTripAppList = publicDao.find(hql, pageUtil);
		BusinessTripAttach businessTripAttach = null;
		for (WorkFlowTasksModel wl : workList) {
			for (BusinessTripApp businessTrip : businessTripAppList) {
				if(Integer.valueOf(wl.getBusinessID()) == businessTrip.getBtaId()){
					businessTrip.setTaskModel(wl);
					businessTrip.setTaskID(wl.getTaskID());
					businessTrip.setAssistant(wl.getAssistant());
					businessTrip.setFormKey(wl.getFormKey());
					businessTrip.setUserName(userService.getUserByID(businessTrip.getApplicantNo()).getName());
					businessTrip.setAgentName(userService.getUserByID(businessTrip.getAgentNo()).getName());
					businessTrip.setDeptName(orgService.getOrgNameByID(userService.getUserByID(businessTrip.getApplicantNo()).getOrganizeId()));
					businessTripAttach = businessTripAttachService.findBusinessTripAttachByAppNo(businessTrip.getAppNo());
					businessTrip.setBusinessTripAttach(businessTripAttach);
					break;
				}
			}
		}
		return businessTripAppList;
	}
	
	private String getTaskEMPids(List<WorkFlowTasksModel> workList){
		String ids = "";
		for (WorkFlowTasksModel workFlowTasksModel : workList) {
			ids+=workFlowTasksModel.getBusinessID()+",";
		}
		if(ids.length()>0){
			ids = ids.substring(0, ids.length()-1);
		}
		return ids;
	}
	
	@Override
	public Long findBusinessTripAppTaskCount(BusinessTripApp businessTripApp) {
		// TODO Auto-generated method stub
		List<WorkFlowTasksModel> workList = workFlowTaskService.findAcceptTaskByGroup(new WorkFlowTasksModel());
		if(null == workList || workList.size() == 0)return (long) 0;
		Long counts = publicDao.count("select count(*) from BusinessTripApp where btaId in ("+getTaskEMPids(workList)+")");
		return counts;
	}
	@Override
	public String saveStartProcess(BusinessTripApp businessTripApp) {
		// TODO Auto-generated method stub
		WorkFlowTasksModel taskModel = new WorkFlowTasksModel();
		taskModel.setAppNo(businessTripApp.getAppNo());
		taskModel.setBusinessID(businessTripApp.getBtaId().toString());//业务ID
		taskModel.setBusinessDefineKey(getProcessKey(businessTripApp.getBtaId()));// 获取启动实例的key
//		taskModel.setApplyStr(Constants.APPLY_FOR_ADJUSTMENT);//调整申请节点的标识
		Map<String,Object> resultMap = workFlowTaskService.startProcessInstance(taskModel);
		//判断任务未结束
		if(null != resultMap.get(Constants.STATUS_REF_ID) && StringUtils.isNotBlank(resultMap.get(Constants.STATUS_REF_ID).toString())){
			if(StringUtils.isNotBlank(resultMap.get(Constants.STATUS_REF_ID).toString())){
				updateBusinessTripAppStatus(Integer.valueOf(taskModel.getBusinessID()),resultMap.get(Constants.STATUS_REF_ID).toString());// 更新流程状态
			}
		}
		BusinessTripApp businessTripApp2 = publicDao.get(BusinessTripApp.class, businessTripApp.getBtaId());
		businessTripApp2.setAppDate(new Date());//申请日期更新为提交日期
		//更新流程状态
		businessTripApp2.setProcStatus("2");//审批中
		publicDao.saveOrUpdate(businessTripApp2);
		return resultMap.get(Constants.RESULT_STR).toString();
	}
	@Override
	public void updateBusinessTripAppStatus(Integer id, String state) {
		// TODO Auto-generated method stub
		BusinessTripApp businessTripApp = publicDao.get(BusinessTripApp.class, id);
		businessTripApp.setAppStatus(state.toString());
		publicDao.saveOrUpdate(businessTripApp);
	}
	@Override
	public String getProcessKey(Integer btaId) {
		String resultCode = "";
		try {
			BusinessTripApp businessTripApp2 = publicDao.get(BusinessTripApp.class,btaId);
			if (businessTripApp2!=null) {
				Integer appDeptId = businessTripApp2.getDeptNo();//部门id
				Organization organization = orgService.findOrganizationByOrganizationId(appDeptId);
				if(organization!=null){
					//0是总部，1是分部
					if("0".equals(organization.getDeptLevel())){
						imgName =Constants.BUSINESSTRIPAPP_HO_RES;
						resultCode = Constants.BUSINESSTRIPAPP_HO;//走总部流程图
					}else{
						Integer userId = businessTripApp2.getApplicantNo();//申请人id
						List<Role> roleList = userService.findRoleListByUserId(userId);
						if (Collections.listIsNotEmpty(roleList)) {
							//目前只考虑一个用户只有一个角色
							Role role = roleList.get(0);
							//1－业务，2－职能，3－其他
							if ("1".equals(role.getRoleType())) {
								imgName = Constants.BUSINESSTRIPAPP_BO_BU_RES;
								resultCode = Constants.BUSINESSTRIPAPP_BO_BU; 
							}else if("2".equals(role.getRoleType())){
								imgName = Constants.BUSINESSTRIPAPP_BO_FU_RES;
								resultCode = Constants.BUSINESSTRIPAPP_BO_FU; 
							}else{
								imgName = Constants.BUSINESSTRIPAPP_BO_FU_RES;
								resultCode = Constants.BUSINESSTRIPAPP_BO_FU; 
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultCode;
	}
	public String getImgName() {
		return imgName;
	}
	public void setImgName(String imgName) {
		this.imgName = imgName;
	}
	@Override
	public void getDiagramResourceByPaId(
			HttpServletResponse httpServletResponse, Integer btaId) {
		// TODO Auto-generated method stub
		InputStream in = null;
		try {
			String proDefKey =getProcessKey(btaId);
			String businessKey = proDefKey + "." + btaId;
			// 获取当前执行的流程实例
			ProcessInstance pi = this.runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(businessKey).singleResult();
			// 获取流程定义的实体对象（对应.bpmn文件中的数据）
			ProcessDefinitionEntity pd = (ProcessDefinitionEntity) repositoryService.getProcessDefinition(pi.getProcessDefinitionId());
			// 获取当前执行任务流程
			List<Task> tasks = this.taskService.createTaskQuery().processInstanceBusinessKey(businessKey).list();
			// 获取图片的流程图片名称
			String resourceName = imgName + ".png";
			// 获取图片的文件的流
			in = this.repositoryService.getResourceAsStream(pd.getDeploymentId(),resourceName);
			// 获取图片对象
			BufferedImage bimg;
			bimg = ImageIO.read(in);
			// 得到Graphics2D 对象
			Graphics2D g2d = (Graphics2D) bimg.getGraphics();
			// 设置颜色和画笔粗细
			g2d.setColor(Color.RED);
			g2d.setStroke(new BasicStroke(3));
			// 遍历执行的任务,画图
			for (Task task : tasks) {
				// 根据任务的获取当前执行对象的id,根据执行对象的id获取执行对象的信息
				Execution execution = runtimeService.createExecutionQuery().executionId(task.getExecutionId()).singleResult();
				// 根据当前的执行对象的id获取正在执行的活动信息
				ActivityImpl activityImpl = pd.findActivity(execution.getActivityId());
				// 绘制矩形
				Rectangle2D rectangle = new Rectangle2D.Float(
						activityImpl.getX(), activityImpl.getY(),
						activityImpl.getWidth(), activityImpl.getHeight());
				g2d.draw(rectangle);
			}
			// 写入response输出流中
			ImageIO.write(bimg, "png", httpServletResponse.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (in != null)
				try {
					in.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
	}
	@Override
	public String saveTask(WorkFlowTasksModel taskModel) {
		// TODO Auto-generated method stub
		Map<String,Object> resultMap = workFlowTaskService.saveSubmitTask(taskModel);
		if(resultMap.get(Constants.STATUS_REF_ID)!=null){
			updateBusinessTripAppStatus(Integer.valueOf(taskModel.getBusinessID()), resultMap.get(Constants.STATUS_REF_ID).toString());
		}
		return resultMap.get(Constants.RESULT_STR).toString();
	}
	@Override
	public BigDecimal sumDays(String endTime, String beginTime) {
		// TODO Auto-generated method stub
		endTime=endTime.split(" ")[0];
		beginTime=beginTime.split(" ")[0];
		String sql="SELECT DATEDIFF('"+endTime+"','"+beginTime+"')+1 AS 出差天数;";
		BigInteger number = publicDao.getDays(sql);
		return new BigDecimal(number);
	}
	@Override
	public String saveSubmitTaskBatch(WorkFlowTasksModel taskModel) {
		// TODO Auto-generated method stub
		List<Map<String,Object>> resultMapList = workFlowTaskService.saveSubmitTaskBatch(taskModel);//调用通用受理任务方法
		String resultStr = "";
		if(Collections.listIsNotEmpty(resultMapList)){
			for (Map<String, Object> map : resultMapList) {
				if(map.containsKey(Constants.STATUS_REF_ID) && map.containsKey(Constants.BUSINESS_ID)){
					updateBusinessTripAppStatus(Integer.valueOf(map.get(Constants.BUSINESS_ID).toString()),map.get(Constants.STATUS_REF_ID).toString());// 更新流程状态
					resultStr = map.get(Constants.RESULT_STR).toString();
				}
			}
		}
		return resultStr;
	}
	@Override
	public List<ComboBoxModel> findOrgUserList() {
		// TODO Auto-generated method stub
		Users user = userService.getUserByID(Constants.getCurrendUser().getUserId());
		List<ComboBoxModel> list = userService.findOrgUserList(user.getOrganizeId().toString());
		return list;
	}
	
	
}
