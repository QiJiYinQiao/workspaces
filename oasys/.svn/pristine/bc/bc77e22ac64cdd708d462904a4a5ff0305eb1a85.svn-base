package com.oasys.serviceImpl;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletResponse;

import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.runtime.Execution;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.oasys.dao.PublicDao;
import com.oasys.model.SpecialRatifyApp;
import com.oasys.model.Users;
import com.oasys.service.OrganizationService;
import com.oasys.service.SpecialRatifyAppService;
import com.oasys.service.workFlow.WorkFlowTaskService;
import com.oasys.serviceImpl.workFlow.WorkFlowBaseServiceImpl;
import com.oasys.util.Constants;
import com.oasys.util.PageUtil;
import com.oasys.util.UniqueIdUtil;
import com.oasys.viewModel.WorkFlowTasksModel;

@Service(value="specialRatifyAppService")
public class SpecialRatifyAppServiceImpl extends WorkFlowBaseServiceImpl implements SpecialRatifyAppService {

	@Autowired
	private PublicDao<SpecialRatifyApp> publicDao;
	@Autowired
	private OrganizationService organizationService;
	@Autowired
	private WorkFlowTaskService workFlowTaskService;
	private String getFindHQL(SpecialRatifyApp specialRatifyApp){
		String hql = "from SpecialRatifyApp where 1=1 and applicantNo = "+Constants.getCurrendUser().getUserId();
		
		if(StringUtils.isNotBlank(specialRatifyApp.getAppDateBefore())){
			hql += " and appDate >='" + specialRatifyApp.getAppDateBefore()+"'";  //申请开始日期
		}
		if(StringUtils.isNotBlank(specialRatifyApp.getAppDateAfter())){
			hql += " and appDate <='" + specialRatifyApp.getAppDateAfter()+"'";  //申请结束日期
		}
		if(StringUtils.isNotBlank(specialRatifyApp.getProcStatus())){
			hql+=" and procStatus='"+specialRatifyApp.getProcStatus()+"'";
		}
		hql += " order by sraId desc";
		return hql;
	}
	@Override
	public List<SpecialRatifyApp> findSpecialRatifyAppList(PageUtil pageUtil,
			SpecialRatifyApp specialRatifyApp) {
		// TODO Auto-generated method stub
		String hql = getFindHQL(specialRatifyApp);
		List<SpecialRatifyApp> list = publicDao.find(hql);
		for (SpecialRatifyApp specialRatifyApp2 : list) {
			specialRatifyApp2.setUserName(userService.getUserByID(specialRatifyApp2.getApplicantNo()).getName());
			specialRatifyApp2.setDeptName(organizationService.getOrgNameByID(specialRatifyApp2.getDeptNo()));
		}
		return list;
	}

	@Override
	public Long findSpecialRatifyAppCount(SpecialRatifyApp specialRatifyApp) {
		// TODO Auto-generated method stub
		String hql = "select count(*) "+ getFindHQL(specialRatifyApp);
		return publicDao.count(hql);
	}
	@Override
	public boolean saveSpecialRatifyApp(SpecialRatifyApp specialRatifyApp) {
		// TODO Auto-generated method stub
		try {
			if (specialRatifyApp.getSraId()==null) {
				//新增
				String appNo=UniqueIdUtil.generate("TP");
				Users user = userService.findUserById(Constants.getCurrendUser().getUserId());
				specialRatifyApp.setAppNo(appNo);
				specialRatifyApp.setApplicantNo(Constants.getCurrendUser().getUserId());
				specialRatifyApp.setDeptNo(user.getOrganizeId());
				specialRatifyApp.setAppDate(new Date());
				specialRatifyApp.setProcStatus("1");
			}
			publicDao.saveOrUpdate(specialRatifyApp);
			return true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return false;
	}
	@Override
	public void delSpecialRatifyApp(String appNo) {
		// TODO Auto-generated method stub
		publicDao.executeHql("delete from SpecialRatifyApp where appNo = '" + appNo+"'");
	}
	@Override
	public void updateSpecialRatifyAppProceStatus(Integer id, String status) {
		// TODO Auto-generated method stub
		SpecialRatifyApp specialRatifyApp = publicDao.get(SpecialRatifyApp.class, id);
		specialRatifyApp.setProcStatus(status);
		publicDao.saveOrUpdate(specialRatifyApp);
	}
	@Override
	public void updateSpecialRatifyAppStatus(Integer id, String status) {
		// TODO Auto-generated method stub
		SpecialRatifyApp specialRatifyApp = publicDao.get(SpecialRatifyApp.class, id);
		specialRatifyApp.setAppStatus(status);
		publicDao.saveOrUpdate(specialRatifyApp);
	}
	@Override
	public String saveStartProcess(SpecialRatifyApp specialRatifyApp) {
		// TODO Auto-generated method stub
		WorkFlowTasksModel taskModel = new WorkFlowTasksModel();
		taskModel.setAppNo(specialRatifyApp.getAppNo());
		taskModel.setBusinessID(specialRatifyApp.getSraId().toString());//业务ID
		taskModel.setBusinessDefineKey(Constants.SPECIALRATIFYAPP);// 获取启动实例的key
//		taskModel.setApplyStr(Constants.APPLY_FOR_ADJUSTMENT);//调整申请节点的标识
		Map<String,Object> resultMap = workFlowTaskService.startProcessInstance(taskModel);
		//判断任务未结束
		if(null != resultMap.get(Constants.STATUS_REF_ID) && StringUtils.isNotBlank(resultMap.get(Constants.STATUS_REF_ID).toString())){
			if(StringUtils.isNotBlank(resultMap.get(Constants.STATUS_REF_ID).toString())){
				updateSpecialRatifyAppStatus(Integer.valueOf(taskModel.getBusinessID()),resultMap.get(Constants.STATUS_REF_ID).toString());// 更新流程状态
			}
		}
		SpecialRatifyApp specialRatifyApp2 = publicDao.get(SpecialRatifyApp.class, specialRatifyApp.getSraId());
		specialRatifyApp2.setAppDate(new Date());//申请日期更新为提交日期
		//更新流程状态
		specialRatifyApp2.setProcStatus("2");//审批中
		publicDao.saveOrUpdate(specialRatifyApp2);
		return resultMap.get(Constants.RESULT_STR).toString();
	}
	@Override
	public List<SpecialRatifyApp> findSpecialRatifyAppTask(PageUtil pageUtil,
			SpecialRatifyApp specialRatifyApp) {
		// TODO Auto-generated method stub
		WorkFlowTasksModel taskModel = new WorkFlowTasksModel();
		taskModel.setProcessKey(specialRatifyApp.getDefinitionKey());
		List<WorkFlowTasksModel> workList = workFlowTaskService.findAcceptTaskByGroup(taskModel);
		if(null == workList || workList.size() == 0)return new ArrayList<SpecialRatifyApp>();
		String hql ="from SpecialRatifyApp where sraId in ("+getTaskEMPids(workList)+") ";
		if(StringUtils.isNotBlank(specialRatifyApp.getAppDateBefore())){
			hql += " and appDate >='" + specialRatifyApp.getAppDateBefore()+"'";  //申请开始日期
		}
		if(StringUtils.isNotBlank(specialRatifyApp.getAppDateAfter())){
			hql += " and appDate <='" + specialRatifyApp.getAppDateAfter()+"'";  //申请结束日期
		}
		if(StringUtils.isNotBlank(specialRatifyApp.getProcStatus())){
			hql+=" and procStatus='"+specialRatifyApp.getProcStatus()+"'";
		}
		hql += " order by sraId desc";
		List<SpecialRatifyApp> specialRatifyAppList = publicDao.find(hql, pageUtil);
		for (WorkFlowTasksModel wl : workList) {
			for (SpecialRatifyApp specialRatify : specialRatifyAppList) {
				if(Integer.valueOf(wl.getBusinessID()) == specialRatify.getSraId()){
					specialRatify.setTaskModel(wl);
					specialRatify.setTaskID(wl.getTaskID());
					specialRatify.setAssistant(wl.getAssistant());
					specialRatify.setFormKey(wl.getFormKey());
					specialRatify.setUserName(userService.getUserByID(specialRatify.getApplicantNo()).getName());
					specialRatify.setDeptName(organizationService.getOrgNameByID(userService.getUserByID(specialRatify.getApplicantNo()).getOrganizeId()));
					break;
				}
			}
		}
		return specialRatifyAppList;
	}
	
	private String getTaskEMPids(List<WorkFlowTasksModel> workList){
		String ids = "";
		for (WorkFlowTasksModel workFlowTasksModel : workList) {
			ids+=workFlowTasksModel.getBusinessID()+",";
		}
		if(ids.length()>0){
			ids = ids.substring(0, ids.length()-1);
		}
		return ids;
	}
	@Override
	public Long findSpecialRatifyAppTaskCount(SpecialRatifyApp specialRatifyApp) {
		// TODO Auto-generated method stub
		List<WorkFlowTasksModel> workList = workFlowTaskService.findAcceptTaskByGroup(new WorkFlowTasksModel());
		if(null == workList || workList.size() == 0)return (long) 0;
		Long counts = publicDao.count("select count(*) from SpecialRatifyApp where sraId in ("+getTaskEMPids(workList)+")");
		return counts;
	}
	@Override
	public void getDiagramResourceBySraId(
			HttpServletResponse httpServletResponse, Integer sraId) {
		// TODO Auto-generated method stub
		InputStream in = null;
		try {
			String proDefKey =Constants.SPECIALRATIFYAPP;
			String businessKey = proDefKey + "." + sraId;
			// 获取当前执行的流程实例
			ProcessInstance pi = this.runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(businessKey).singleResult();
			// 获取流程定义的实体对象（对应.bpmn文件中的数据）
			ProcessDefinitionEntity pd = (ProcessDefinitionEntity) repositoryService.getProcessDefinition(pi.getProcessDefinitionId());
			// 获取当前执行任务流程
			List<Task> tasks = this.taskService.createTaskQuery().processInstanceBusinessKey(businessKey).list();
			// 获取图片的流程图片名称
			String resourceName = Constants.SPECIALRATIFYAPP_RES + ".png";
			// 获取图片的文件的流
			in = this.repositoryService.getResourceAsStream(pd.getDeploymentId(),resourceName);
			// 获取图片对象
			BufferedImage bimg;
			bimg = ImageIO.read(in);
			// 得到Graphics2D 对象
			Graphics2D g2d = (Graphics2D) bimg.getGraphics();
			// 设置颜色和画笔粗细
			g2d.setColor(Color.RED);
			g2d.setStroke(new BasicStroke(3));
			// 遍历执行的任务,画图
			for (Task task : tasks) {
				// 根据任务的获取当前执行对象的id,根据执行对象的id获取执行对象的信息
				Execution execution = runtimeService.createExecutionQuery().executionId(task.getExecutionId()).singleResult();
				// 根据当前的执行对象的id获取正在执行的活动信息
				ActivityImpl activityImpl = pd.findActivity(execution.getActivityId());
				// 绘制矩形
				Rectangle2D rectangle = new Rectangle2D.Float(
						activityImpl.getX(), activityImpl.getY(),
						activityImpl.getWidth(), activityImpl.getHeight());
				g2d.draw(rectangle);
			}
			// 写入response输出流中
			ImageIO.write(bimg, "png", httpServletResponse.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (in != null)
				try {
					in.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
	}
	@Override
	public String saveTask(WorkFlowTasksModel taskModel) {
		// TODO Auto-generated method stub
		Map<String,Object> resultMap = workFlowTaskService.saveSubmitTask(taskModel);
		if(resultMap.get(Constants.STATUS_REF_ID)!=null){
			updateSpecialRatifyAppStatus(Integer.valueOf(taskModel.getBusinessID()), resultMap.get(Constants.STATUS_REF_ID).toString());
		}
		return resultMap.get(Constants.RESULT_STR).toString();
	}
	@Override
	public SpecialRatifyApp getSpecialRatifyById(Integer id) {
		// TODO Auto-generated method stub
		return publicDao.get(SpecialRatifyApp.class, id);
	}
	@Override
	public void updateLoan(String contractNo, String spType,
			Date appRepaymentDate) {
		// TODO Auto-generated method stub
		String sql="UPDATE qqms.t_bp_loan_contract SET IS_AHEAD_REPAYMENT='"+spType+"',REPAYMENT_DATE='"+appRepaymentDate+"' WHERE CONTRACT_NO='"+contractNo+"'";
		publicDao.executeBySql(sql);
	}
	

}
